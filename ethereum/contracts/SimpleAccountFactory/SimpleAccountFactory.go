// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package SimpleAccountFactory

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
	_ = abi.ConvertType
)

// SimpleAccountFactoryMetaData contains all meta data concerning the SimpleAccountFactory contract.
var SimpleAccountFactoryMetaData = &bind.MetaData{
	ABI: "[{\"type\":\"constructor\",\"inputs\":[{\"name\":\"_entryPoint\",\"type\":\"address\",\"internalType\":\"contractIEntryPoint\"}],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"accountImplementation\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\",\"internalType\":\"contractSimpleAccount\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"createAccount\",\"inputs\":[{\"name\":\"owner\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"salt\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"outputs\":[{\"name\":\"ret\",\"type\":\"address\",\"internalType\":\"contractSimpleAccount\"}],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"getAddress\",\"inputs\":[{\"name\":\"owner\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"salt\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"outputs\":[{\"name\":\"\",\"type\":\"address\",\"internalType\":\"address\"}],\"stateMutability\":\"view\"},{\"type\":\"event\",\"name\":\"AccountCreated\",\"inputs\":[{\"name\":\"account\",\"type\":\"address\",\"indexed\":true,\"internalType\":\"address\"},{\"name\":\"owner\",\"type\":\"address\",\"indexed\":false,\"internalType\":\"address\"}],\"anonymous\":false}]",
	Bin: "0x60a0604052346100415761001961001461010f565b610189565b604051610c28620001ce823960805181818160ef0152818161036301526105290152610c2890f35b5f80fd5b634e487b7160e01b5f52604160045260245ffd5b90601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016810190811067ffffffffffffffff82111761009957604052565b610045565b906100b26100ab60405190565b9283610059565b565b73ffffffffffffffffffffffffffffffffffffffff1690565b90565b73ffffffffffffffffffffffffffffffffffffffff81160361004157565b905051906100b2826100d0565b90602082820312610041576100cd916100ee565b6100cd62002e2e803803806101238161009e565b9283398101906100fb565b6100cd906100b49073ffffffffffffffffffffffffffffffffffffffff1682565b6100cd9061012e565b6100cd9061014f565b61016a90610158565b9052565b6020810192916100b29190610161565b6040513d5f823e3d90fd5b60405190612038820167ffffffffffffffff8111838210176100995782916101b99161203862000df6853961016e565b03905ff080156101c857608052565b61017e56fe6080604052600436101562000012575f80fd5b5f3560e01c806311464fbe14620000465780635fbfb9cf146200004057638cb84e18036200005757620001bf565b62000180565b620000d6565b5f9103126200005757565b5f80fd5b6200008462000081620000819273ffffffffffffffffffffffffffffffffffffffff1690565b90565b73ffffffffffffffffffffffffffffffffffffffff1690565b62000081906200005b565b62000081906200009d565b620000be90620000a8565b9052565b602081019291620000d49190620000b3565b565b346200005757620000e93660046200004c565b6200011c7f00000000000000000000000000000000000000000000000000000000000000005b60405191829182620000c2565b0390f35b6200012b8162000084565b036200005757565b90503590620000d48262000120565b806200012b565b90503590620000d48262000142565b91906040838203126200005757620000819062000176818562000133565b9360200162000149565b3462000057576200011c6200010f6200019b36600462000158565b9062000323565b620000be9062000084565b602081019291620000d49190620001a2565b3462000057576200011c620001e1620001da36600462000158565b90620004db565b6040515b91829182620001ad565b6200008162000081620000819290565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b90601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016810190811067ffffffffffffffff8211176200026d57604052565b620001ff565b5f5b838110620002855750505f910152565b818101518382015260200162000275565b620002bb620002c5602093620002ed93620002af815190565b80835293849260200190565b9586910162000273565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01690565b0190565b9162000081926200030a60408201935f830190620001a2565b602081840391015262000296565b6040513d5f823e3d90fd5b909190620003328382620004db565b92833b62000348620003445f620001ef565b9190565b1162000475576200035990620001ef565b620003ca620003887f0000000000000000000000000000000000000000000000000000000000000000620000a8565b620003da846200039760405190565b9384916004602084017fc4d66de800000000000000000000000000000000000000000000000000000000815201620001ad565b602082018103825203836200022c565b604051916105b983019083821067ffffffffffffffff8311176200026d5783926200040e926105b96200063a8639620002f1565b03905ff580156200046f57620004286200042e91620000a8565b620000a8565b926200046a6200045f7fac631f3001b55ea1509cf3d7e74898f85392a61a76e8149181ae1259622dabc892620000a8565b92620001e560405190565b0390a2565b62000318565b505090620004286200008191620000a8565b90620000d46200049660405190565b92836200022c565b620002ed620004b992602092620004b3815190565b94859290565b9384910162000273565b620004d4906200008193926200049e565b906200049e565b6200058c620005f2620004fb6200008194620004f45f90565b50620001ef565b92620005c76105b991620005126020840162000487565b928084526200063a60208501396200059c6200054e7f0000000000000000000000000000000000000000000000000000000000000000620000a8565b916200055960405190565b9687916004602084017fc4d66de800000000000000000000000000000000000000000000000000000000815201620001ad565b602082018103825203866200022c565b620005b7620005aa60405190565b95869260208401620002f1565b602082018103825203846200022c565b620005e2620005d560405190565b93849260208401620004c3565b602082018103825203826200022c565b62000606620005ff825190565b9160200190565b209062000081916200061830620000a8565b91605592600b9291604051926040840152602083015281520160ff8153209056fe608060405261001561000f6101bb565b906101dd565b60405160cb6104ee823960cb90f35b634e487b7160e01b5f52604160045260245ffd5b90601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016810190811067ffffffffffffffff82111761007857604052565b610024565b9061009161008a60405190565b9283610038565b565b73ffffffffffffffffffffffffffffffffffffffff1690565b90565b73ffffffffffffffffffffffffffffffffffffffff8116036100cd57565b5f80fd5b90505190610091826100af565b67ffffffffffffffff811161007857602090601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0160190565b5f5b83811061012a5750505f910152565b818101518382015260200161011b565b9092919261014f61014a826100de565b61007d565b938185526020850190828401116100cd5761009192610119565b9080601f830112156100cd5781516100ac9260200161013a565b9190916040818403126100cd5761019a83826100d1565b602082015190939067ffffffffffffffff81116100cd576100ac9201610169565b6101d96105b9803803806101ce8161007d565b928339810190610183565b9091565b9061009191610227565b6100ac906100939073ffffffffffffffffffffffffffffffffffffffff1682565b6100ac906101e7565b6100ac90610208565b6100ac6100ac6100ac9290565b9061023182610334565b7fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b61025b83610211565b9061026560405190565b5f90a2805161027a6102765f61021a565b9190565b111561028c576102899161040c565b50565b505061009161039d565b73ffffffffffffffffffffffffffffffffffffffff909116815260200190565b6100ac7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc61021a565b906102ef6100ac61033092610211565b82547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff919091161790565b9055565b803b6103426102765f61021a565b1461035d57610091905f6103576100ac6102b6565b016102df565b6103999061036a60405190565b7f4c9c8ce300000000000000000000000000000000000000000000000000000000815291829160048301610296565b0390fd5b346103aa6102765f61021a565b116103b157565b6040517fb398979f000000000000000000000000000000000000000000000000000000008152600490fd5b906103e961014a836100de565b918252565b3d15610407576103fd3d6103dc565b903d5f602084013e565b606090565b5f806100ac9361041a606090565b50805190602001845af49061042d6103ee565b9161043857506104a6565b81516104466102765f61021a565b1480610491575b610455575090565b6103999061046260405190565b7f9996b31500000000000000000000000000000000000000000000000000000000815291829160048301610296565b50803b6104a06102765f61021a565b1461044d565b80516104b46102765f61021a565b11156104c257805190602001fd5b6040517f1425ea42000000000000000000000000000000000000000000000000000000008152600490fdfe6080604052600a600e565b6017565b60146085565b90565b5f8091368280378136915af43d5f803e15602f573d5ff35b3d5ffd5b6014601460149290565b60147f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc6033565b73ffffffffffffffffffffffffffffffffffffffff1690565b601490546064565b60145f60906014603d565b01607d56fea2646970667358221220ceab7fca6fb6a03270c0156da812fe7c31790d61ecef7b19ebe7fd986e20ba7b64736f6c63430008170033a264697066735822122021963afae5d8088659b3fbeafb003d5ee024a603b90489ca9d734e8c95886f6564736f6c6343000817003360c0604052346200007a576200001e6200001862000153565b62000176565b604051611cf3620003458239608051818181611518015281816115990152611715015260a05181818161077a01528181610d7701528181610ed201528181611038015281816113f10152818161182301526119020152611cf390f35b5f80fd5b634e487b7160e01b5f52604160045260245ffd5b90601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016810190811067ffffffffffffffff821117620000d357604052565b6200007e565b90620000f0620000e860405190565b928362000092565b565b73ffffffffffffffffffffffffffffffffffffffff1690565b90565b73ffffffffffffffffffffffffffffffffffffffff8116036200007a57565b90505190620000f0826200010e565b906020828203126200007a576200010b916200012d565b6200010b62002038803803806200016a81620000d9565b9283398101906200013c565b620001806200018d565b60a052620000f06200027d565b620000f0620001d0565b6200010b90620000f29073ffffffffffffffffffffffffffffffffffffffff1682565b6200010b9062000197565b6200010b90620001ba565b620001db30620001c5565b608052565b6200010b9060401c60ff1690565b6200010b9054620001e0565b6200010b905b67ffffffffffffffff1690565b6200010b9054620001fa565b6200010b90620002009067ffffffffffffffff1682565b90620002446200010b620002799262000219565b82547fffffffffffffffffffffffffffffffffffffffffffffffff00000000000000001667ffffffffffffffff919091161790565b9055565b7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00620002a981620001ee565b6200031957620002b9816200020d565b67ffffffffffffffff90811603620002ce5750565b620002e39067ffffffffffffffff9062000230565b60405167ffffffffffffffff81527fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d290602090a1565b6040517ff92ee8a9000000000000000000000000000000000000000000000000000000008152600490fdfe6080604052600436101561001a575b3615610018575f80fd5b005b5f3560e01c806301ffc9a714610129578063150b7a021461012457806347e1da2a1461011f5780634a58db191461011a5780634f1ef2861461011557806352d1902d146101105780638da5cb5b1461010b578063907fa12114610106578063ad3cb1cc14610101578063aeae547d146100fc578063b0d691fe146100f7578063b61d27f6146100f2578063bc197c81146100ed578063c399ec88146100e8578063c4d66de8146100e3578063f23a6e61146100de5763f563d33c0361000e57610996565b610951565b6108d9565b6108aa565b610885565b6107e1565b610761565b6106fb565b6106d4565b6105db565b610585565b610524565b610510565b6103ad565b61037f565b610291565b610187565b7fffffffff0000000000000000000000000000000000000000000000000000000081165b0361015957565b5f80fd5b9050359061016a8261012e565b565b90602082820312610159576101809161015d565b90565b9052565b34610159576101b46101a261019d36600461016c565b6109b2565b60405191829182901515815260200190565b0390f35b73ffffffffffffffffffffffffffffffffffffffff1690565b73ffffffffffffffffffffffffffffffffffffffff8116610152565b9050359061016a826101d1565b80610152565b9050359061016a826101fa565b909182601f830112156101595781359167ffffffffffffffff831161015957602001926001830284011161015957565b906080828203126101595761025281836101ed565b9261026082602085016101ed565b9261026e8360408301610200565b92606082013567ffffffffffffffff81116101595761028d920161020d565b9091565b34610159576101b46102b06102a736600461023d565b93929092610a71565b604051918291827fffffffff00000000000000000000000000000000000000000000000000000000909116815260200190565b909182601f830112156101595781359167ffffffffffffffff831161015957602001926020830284011161015957565b9060608282031261015957813567ffffffffffffffff8111610159578161033b9184016102e3565b929093602082013567ffffffffffffffff8111610159578361035e9184016102e3565b929093604082013567ffffffffffffffff81116101595761028d92016102e3565b346101595761039e610392366004610313565b94939093929192610be4565b604051005b5f91031261015957565b6103b83660046103a3565b61039e610d72565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b90601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016810190811067ffffffffffffffff82111761042d57604052565b6103c0565b9061016a61043f60405190565b92836103ed565b67ffffffffffffffff811161042d57602090601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0160190565b0190565b90825f939282370152565b909291926104a56104a082610446565b610432565b938185526020850190828401116101595761016a92610485565b9080601f830112156101595781602061018093359101610490565b919091604081840312610159576104f183826101ed565b92602082013567ffffffffffffffff81116101595761018092016104bf565b61039e61051e3660046104da565b90610e3c565b34610159576105343660046103a3565b6101b461053f610e89565b6040519182918290815260200190565b610180916008021c73ffffffffffffffffffffffffffffffffffffffff1690565b90610180915461054f565b6101805f80610570565b34610159576105953660046103a3565b6101b46105a061057b565b6040519182918273ffffffffffffffffffffffffffffffffffffffff909116815260200190565b906020828203126101595761018091610200565b346101595761039e6105ee3660046105c7565b610f39565b906106006104a083610446565b918252565b61060f60056105f3565b7f352e302e30000000000000000000000000000000000000000000000000000000602082015290565b610180610605565b610180610638565b610180610640565b5f5b8381106106615750505f910152565b8181015183820152602001610652565b61069261069b60209361048193610686815190565b80835293849260200190565b95869101610650565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01690565b602080825261018092910190610671565b34610159576106e43660046103a3565b6101b46106ef610648565b604051918291826106c3565b346101595761039e61070e3660046105c7565b610fb6565b6101b86101806101809273ffffffffffffffffffffffffffffffffffffffff1690565b61018090610713565b61018090610736565b6101839061073f565b60208101929161016a9190610748565b34610159576107713660046103a3565b604051806101b47f000000000000000000000000000000000000000000000000000000000000000082610751565b91606083830312610159576107b482846101ed565b926107c28360208301610200565b92604082013567ffffffffffffffff81116101595761028d920161020d565b346101595761039e6107f436600461079f565b92919091610fbf565b9160a0838303126101595761081282846101ed565b9261082083602083016101ed565b92604082013567ffffffffffffffff811161015957816108419184016102e3565b929093606082013567ffffffffffffffff811161015957836108649184016102e3565b929093608082013567ffffffffffffffff81116101595761028d920161020d565b34610159576101b46102b061089b3660046107fd565b96959095949194939293610fd9565b34610159576108ba3660046103a3565b6101b461053f61102e565b9060208282031261015957610180916101ed565b346101595761039e6108ec3660046108c5565b61131b565b91909160a0818403126101595761090883826101ed565b9261091681602084016101ed565b926109248260408501610200565b926109328360608301610200565b92608082013567ffffffffffffffff81116101595761028d920161020d565b34610159576101b46102b06109673660046108f1565b94939093929192611324565b9190604083820312610159576101809061098d81856101ed565b93602001610200565b34610159576101b461053f6109ac366004610973565b90611356565b806109fe7f150b7a02000000000000000000000000000000000000000000000000000000005b917fffffffff000000000000000000000000000000000000000000000000000000001690565b148015610a40575b908115610a11575090565b9050610a3c7f01ffc9a7000000000000000000000000000000000000000000000000000000006109d8565b1490565b5080610a6b7f4e2312e0000000000000000000000000000000000000000000000000000000006109d8565b14610a06565b5050505050610a7d5f90565b507f150b7a020000000000000000000000000000000000000000000000000000000090565b6101806101806101809290565b15610ab657565b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601360248201527f77726f6e67206172726179206c656e67746873000000000000000000000000006044820152606490fd5b0390fd5b7f4e487b71000000000000000000000000000000000000000000000000000000005f52603260045260245ffd5b9190811015610b56576020020190565b610b19565b35610180816101d1565b35610180816101fa565b9035907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe13682900301821215610159570180359067ffffffffffffffff8211610159576020019136829003831361015957565b90821015610b5657602061028d9202810190610b6f565b610180913691610490565b919092959495610bf26113e5565b83610bfc885b9190565b1480610cf5575b610c0c90610aaf565b80610c19610bf85f610aa2565b03610c8c575050610c295f610aa2565b80610c3384610bf8565b1015610c8457610c7f90610c79610c53610c4e838787610b46565b610b5b565b5f610c73610c6d610c65868d8c610bc2565b919093610aa2565b92610bd9565b916114b5565b60010190565b610c29565b505050509050565b91610c9a5f97949297610aa2565b80610ca484610bf8565b1015610ceb57610ce690610c79610cbf610c4e838787610b46565b610cd2610ccd84898e610b46565b610b65565b610c73610ce0858b8d610bc2565b90610bd9565b610c9a565b5050505050509050565b5080610d03610bf85f610aa2565b1480610c035750610c0c81610d1789610bf8565b149050610c03565b610180906101b8565b6101809054610d1f565b73ffffffffffffffffffffffffffffffffffffffff91821681529116602082015260608101929161016a9160400152565b0152565b6040513d5f823e3d90fd5b610da07f000000000000000000000000000000000000000000000000000000000000000061073f565b61073f565b34906374e8119490610db13061073f565b90610dbb5f610d28565b933490823b15610159575f94610def610de493610dd760405190565b9889978896879560e01b90565b855260048501610d32565b03925af18015610e1757610e005750565b61016a905f610e0f81836103ed565b8101906103a3565b610d67565b9061016a91610e296114f5565b9061016a91610e37816115c5565b6115ce565b9061016a91610e1c565b61018090610e526116f2565b610e80565b6101807f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc610aa2565b50610180610e57565b6101805f610e46565b61016a90610e9e6117a7565b610ecd565b73ffffffffffffffffffffffffffffffffffffffff909116815260408101929161016a9160200152565b610ef67f000000000000000000000000000000000000000000000000000000000000000061073f565b9063afc8d53290610f065f610d28565b9092803b1561015957610f2e5f8094610def610f2160405190565b9788968795869460e01b90565b845260048401610ea3565b61016a90610e92565b61016a90610f4e6117a7565b610f64565b6101805f6105f3565b610180610f53565b80610f78610bf8610f743061073f565b3190565b11610f8b5761016a903390610c73610f5c565b6040517ff4d678b8000000000000000000000000000000000000000000000000000000008152600490fd5b61016a90610f42565b61016a93610c7391939293610fd26113e5565b9392610bd9565b5050505050505050610fe85f90565b507fbc197c810000000000000000000000000000000000000000000000000000000090565b9050519061016a826101fa565b90602082820312610159576101809161100d565b6110a9602061105c7f000000000000000000000000000000000000000000000000000000000000000061073f565b6370a082319061108561106e3061073f565b9261107860405190565b9586948593849360e01b90565b835273ffffffffffffffffffffffffffffffffffffffff1660048301526024820190565b03915afa908115610e17575f916110be575090565b610180915060203d81116110df575b6110d781836103ed565b81019061101a565b503d6110cd565b6101809060401c60ff1690565b61018090546110e6565b610180905b67ffffffffffffffff1690565b61018090546110fd565b6111026101806101809290565b9067ffffffffffffffff905b9181191691161790565b6111026101806101809267ffffffffffffffff1690565b9061116361018061116a9261113c565b8254611126565b9055565b9068ff00000000000000009060401b611132565b9061119261018061116a92151590565b825461116e565b61018390611119565b60208101929161016a9190611199565b7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00906111e46111e0836110f3565b1590565b906111ee8361110f565b806112096111fb5f611119565b9167ffffffffffffffff1690565b148061130b575b9061121e6111fb6001611119565b14806112e9575b90155b90816112e0575b506112b5576112559061124b6112456001611119565b85611153565b826112a557611312565b61125c5750565b611267905f90611182565b60016112a07fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d29161129760405190565b918291826111a2565b0390a1565b6112b0600185611182565b611312565b6040517ff92ee8a9000000000000000000000000000000000000000000000000000000008152600490fd5b1590505f61122f565b506112286112f63061073f565b3b611303610bf85f610aa2565b149050611225565b5082611210565b61016a90611817565b61016a906111b2565b5050505050506113315f90565b507ff23a6e610000000000000000000000000000000000000000000000000000000090565b61137561016a919392936113675f90565b506113706118f3565b61193f565b9261197d565b1561138257565b6040517f08c379a000000000000000000000000000000000000000000000000000000000815280610b15600482016020808252818101527f6163636f756e743a206e6f74204f776e6572206f7220456e747279506f696e74604082015260600190565b3361142f6114156101b87f000000000000000000000000000000000000000000000000000000000000000061073f565b9173ffffffffffffffffffffffffffffffffffffffff1690565b148015611440575b61016a9061137b565b5061016a336114546114156101b85f610d28565b149050611437565b61146660106105f3565b7f72756e2063616c6c2025732c2025732000000000000000000000000000000000602082015290565b61018061145c565b3d156114b0576114a63d6105f3565b903d5f602084013e565b606090565b5f928392916114cc83826114c761148f565b611a16565b91602082019151925af16114e66114e1611497565b911590565b6114ed5750565b602081519101fd5b6114fe3061073f565b61153d73ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000016611415565b148015611576575b61154b57565b6040517fe07c8dba000000000000000000000000000000000000000000000000000000008152600490fd5b5061157f611a6d565b6115be73ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000016611415565b1415611545565b5061016a6117a7565b91906115f960206115e1610d9b8661073f565b6352d1902d906115f060405190565b93849260e01b90565b825260049082905afa5f91816116d2575b5061167257505090600161161b5750565b610b159061162860405190565b9182917f4c9c8ce30000000000000000000000000000000000000000000000000000000083526004830173ffffffffffffffffffffffffffffffffffffffff909116815260200190565b9283611682610bf8610180610e57565b036116925761016a929350611a82565b610b158461169f60405190565b9182917faa1d49a40000000000000000000000000000000000000000000000000000000083526004830190815260200190565b6116eb91925060203d81116110df576110d781836103ed565b905f61160a565b6116fb3061073f565b61173a73ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000016611415565b0361154b57565b1561174857565b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600a60248201527f6f6e6c79206f776e6572000000000000000000000000000000000000000000006044820152606490fd5b336117b76114156101b85f610d28565b1480156117c8575b61016a90611741565b5061016a336117dc6114156101b83061073f565b1490506117bf565b9073ffffffffffffffffffffffffffffffffffffffff90611132565b9061181061018061116a9261073f565b82546117e4565b611821905f611800565b7f000000000000000000000000000000000000000000000000000000000000000061184b5f610d28565b61187e6118787f47e55c76e7a6f1fd8996a1da8008c1ea29699cca35e7bcd057f2dec313b6e5de9361073f565b9161073f565b9161188860405190565b5f90a3565b1561189457565b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601c60248201527f6163636f756e743a206e6f742066726f6d20456e747279506f696e74000000006044820152606490fd5b61016a336119266114156101b87f000000000000000000000000000000000000000000000000000000000000000061073f565b1461188d565b6101806001610aa2565b6101805f610aa2565b61196861141561194e5f610d28565b9273ffffffffffffffffffffffffffffffffffffffff1690565b0361197557610180611936565b61018061192c565b8061198a610bf85f610aa2565b036119925750565b5f80916119a1610d9b3361073f565b6040515f9290917ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1506119d3611497565b50565b604090610d636119f761016a9597969460608401908482035f860152610671565b73ffffffffffffffffffffffffffffffffffffffff9097166020830152565b60405161016a93611a689291611a5991909485936004602086017f07c81217000000000000000000000000000000000000000000000000000000008152016119d6565b602082018103825203826103ed565b611aea565b6101805f611a7c610180610e57565b01610d28565b90611a8c82611af5565b7fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b611ab68361073f565b90611ac060405190565b5f90a28051611ad1610bf85f610aa2565b1115611ae0576119d391611b5d565b505061016a611b1e565b61016a906001611cad565b803b611b03610bf85f610aa2565b1461161b5761016a905f611b18610180610e57565b01611800565b34611b2b610bf85f610aa2565b11611b3257565b6040517fb398979f000000000000000000000000000000000000000000000000000000008152600490fd5b5f8061018093611b6b606090565b50805190602001845af490611b7e611497565b9190611ba5565b5f8091611b90815190565b906020016a636f6e736f6c652e6c6f675afa50565b90611bb05750611c39565b8151611bbe610bf85f610aa2565b1480611c24575b611bcd575090565b610b1590611bda60405190565b9182917f9996b3150000000000000000000000000000000000000000000000000000000083526004830173ffffffffffffffffffffffffffffffffffffffff909116815260200190565b50803b611c33610bf85f610aa2565b14611bc5565b8051611c47610bf85f610aa2565b1115611c5557805190602001fd5b6040517f1425ea42000000000000000000000000000000000000000000000000000000008152600490fd5b7f4e487b71000000000000000000000000000000000000000000000000000000005f52605160045260245ffd5b600103611c805761016a90611b8556fea2646970667358221220f902f30569003fca03aa3cade83a94c445ac27fda29a25f8ed5cf12951ad016664736f6c63430008170033",
}

// SimpleAccountFactoryABI is the input ABI used to generate the binding from.
// Deprecated: Use SimpleAccountFactoryMetaData.ABI instead.
var SimpleAccountFactoryABI = SimpleAccountFactoryMetaData.ABI

// SimpleAccountFactoryBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use SimpleAccountFactoryMetaData.Bin instead.
var SimpleAccountFactoryBin = SimpleAccountFactoryMetaData.Bin

// DeploySimpleAccountFactory deploys a new Ethereum contract, binding an instance of SimpleAccountFactory to it.
func DeploySimpleAccountFactory(auth *bind.TransactOpts, backend bind.ContractBackend, _entryPoint common.Address) (common.Address, *types.Transaction, *SimpleAccountFactory, error) {
	parsed, err := SimpleAccountFactoryMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(SimpleAccountFactoryBin), backend, _entryPoint)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &SimpleAccountFactory{SimpleAccountFactoryCaller: SimpleAccountFactoryCaller{contract: contract}, SimpleAccountFactoryTransactor: SimpleAccountFactoryTransactor{contract: contract}, SimpleAccountFactoryFilterer: SimpleAccountFactoryFilterer{contract: contract}}, nil
}

// SimpleAccountFactory is an auto generated Go binding around an Ethereum contract.
type SimpleAccountFactory struct {
	SimpleAccountFactoryCaller     // Read-only binding to the contract
	SimpleAccountFactoryTransactor // Write-only binding to the contract
	SimpleAccountFactoryFilterer   // Log filterer for contract events
}

// SimpleAccountFactoryCaller is an auto generated read-only Go binding around an Ethereum contract.
type SimpleAccountFactoryCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// SimpleAccountFactoryTransactor is an auto generated write-only Go binding around an Ethereum contract.
type SimpleAccountFactoryTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// SimpleAccountFactoryFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type SimpleAccountFactoryFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// SimpleAccountFactorySession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type SimpleAccountFactorySession struct {
	Contract     *SimpleAccountFactory // Generic contract binding to set the session for
	CallOpts     bind.CallOpts         // Call options to use throughout this session
	TransactOpts bind.TransactOpts     // Transaction auth options to use throughout this session
}

// SimpleAccountFactoryCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type SimpleAccountFactoryCallerSession struct {
	Contract *SimpleAccountFactoryCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts               // Call options to use throughout this session
}

// SimpleAccountFactoryTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type SimpleAccountFactoryTransactorSession struct {
	Contract     *SimpleAccountFactoryTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts               // Transaction auth options to use throughout this session
}

// SimpleAccountFactoryRaw is an auto generated low-level Go binding around an Ethereum contract.
type SimpleAccountFactoryRaw struct {
	Contract *SimpleAccountFactory // Generic contract binding to access the raw methods on
}

// SimpleAccountFactoryCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type SimpleAccountFactoryCallerRaw struct {
	Contract *SimpleAccountFactoryCaller // Generic read-only contract binding to access the raw methods on
}

// SimpleAccountFactoryTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type SimpleAccountFactoryTransactorRaw struct {
	Contract *SimpleAccountFactoryTransactor // Generic write-only contract binding to access the raw methods on
}

// NewSimpleAccountFactory creates a new instance of SimpleAccountFactory, bound to a specific deployed contract.
func NewSimpleAccountFactory(address common.Address, backend bind.ContractBackend) (*SimpleAccountFactory, error) {
	contract, err := bindSimpleAccountFactory(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &SimpleAccountFactory{SimpleAccountFactoryCaller: SimpleAccountFactoryCaller{contract: contract}, SimpleAccountFactoryTransactor: SimpleAccountFactoryTransactor{contract: contract}, SimpleAccountFactoryFilterer: SimpleAccountFactoryFilterer{contract: contract}}, nil
}

// NewSimpleAccountFactoryCaller creates a new read-only instance of SimpleAccountFactory, bound to a specific deployed contract.
func NewSimpleAccountFactoryCaller(address common.Address, caller bind.ContractCaller) (*SimpleAccountFactoryCaller, error) {
	contract, err := bindSimpleAccountFactory(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &SimpleAccountFactoryCaller{contract: contract}, nil
}

// NewSimpleAccountFactoryTransactor creates a new write-only instance of SimpleAccountFactory, bound to a specific deployed contract.
func NewSimpleAccountFactoryTransactor(address common.Address, transactor bind.ContractTransactor) (*SimpleAccountFactoryTransactor, error) {
	contract, err := bindSimpleAccountFactory(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &SimpleAccountFactoryTransactor{contract: contract}, nil
}

// NewSimpleAccountFactoryFilterer creates a new log filterer instance of SimpleAccountFactory, bound to a specific deployed contract.
func NewSimpleAccountFactoryFilterer(address common.Address, filterer bind.ContractFilterer) (*SimpleAccountFactoryFilterer, error) {
	contract, err := bindSimpleAccountFactory(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &SimpleAccountFactoryFilterer{contract: contract}, nil
}

// bindSimpleAccountFactory binds a generic wrapper to an already deployed contract.
func bindSimpleAccountFactory(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := SimpleAccountFactoryMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_SimpleAccountFactory *SimpleAccountFactoryRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _SimpleAccountFactory.Contract.SimpleAccountFactoryCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_SimpleAccountFactory *SimpleAccountFactoryRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _SimpleAccountFactory.Contract.SimpleAccountFactoryTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_SimpleAccountFactory *SimpleAccountFactoryRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _SimpleAccountFactory.Contract.SimpleAccountFactoryTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_SimpleAccountFactory *SimpleAccountFactoryCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _SimpleAccountFactory.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_SimpleAccountFactory *SimpleAccountFactoryTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _SimpleAccountFactory.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_SimpleAccountFactory *SimpleAccountFactoryTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _SimpleAccountFactory.Contract.contract.Transact(opts, method, params...)
}

// AccountImplementation is a free data retrieval call binding the contract method 0x11464fbe.
//
// Solidity: function accountImplementation() view returns(address)
func (_SimpleAccountFactory *SimpleAccountFactoryCaller) AccountImplementation(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _SimpleAccountFactory.contract.Call(opts, &out, "accountImplementation")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// AccountImplementation is a free data retrieval call binding the contract method 0x11464fbe.
//
// Solidity: function accountImplementation() view returns(address)
func (_SimpleAccountFactory *SimpleAccountFactorySession) AccountImplementation() (common.Address, error) {
	return _SimpleAccountFactory.Contract.AccountImplementation(&_SimpleAccountFactory.CallOpts)
}

// AccountImplementation is a free data retrieval call binding the contract method 0x11464fbe.
//
// Solidity: function accountImplementation() view returns(address)
func (_SimpleAccountFactory *SimpleAccountFactoryCallerSession) AccountImplementation() (common.Address, error) {
	return _SimpleAccountFactory.Contract.AccountImplementation(&_SimpleAccountFactory.CallOpts)
}

// GetAddress is a free data retrieval call binding the contract method 0x8cb84e18.
//
// Solidity: function getAddress(address owner, uint256 salt) view returns(address)
func (_SimpleAccountFactory *SimpleAccountFactoryCaller) GetAddress(opts *bind.CallOpts, owner common.Address, salt *big.Int) (common.Address, error) {
	var out []interface{}
	err := _SimpleAccountFactory.contract.Call(opts, &out, "getAddress", owner, salt)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetAddress is a free data retrieval call binding the contract method 0x8cb84e18.
//
// Solidity: function getAddress(address owner, uint256 salt) view returns(address)
func (_SimpleAccountFactory *SimpleAccountFactorySession) GetAddress(owner common.Address, salt *big.Int) (common.Address, error) {
	return _SimpleAccountFactory.Contract.GetAddress(&_SimpleAccountFactory.CallOpts, owner, salt)
}

// GetAddress is a free data retrieval call binding the contract method 0x8cb84e18.
//
// Solidity: function getAddress(address owner, uint256 salt) view returns(address)
func (_SimpleAccountFactory *SimpleAccountFactoryCallerSession) GetAddress(owner common.Address, salt *big.Int) (common.Address, error) {
	return _SimpleAccountFactory.Contract.GetAddress(&_SimpleAccountFactory.CallOpts, owner, salt)
}

// CreateAccount is a paid mutator transaction binding the contract method 0x5fbfb9cf.
//
// Solidity: function createAccount(address owner, uint256 salt) returns(address ret)
func (_SimpleAccountFactory *SimpleAccountFactoryTransactor) CreateAccount(opts *bind.TransactOpts, owner common.Address, salt *big.Int) (*types.Transaction, error) {
	return _SimpleAccountFactory.contract.Transact(opts, "createAccount", owner, salt)
}

// CreateAccount is a paid mutator transaction binding the contract method 0x5fbfb9cf.
//
// Solidity: function createAccount(address owner, uint256 salt) returns(address ret)
func (_SimpleAccountFactory *SimpleAccountFactorySession) CreateAccount(owner common.Address, salt *big.Int) (*types.Transaction, error) {
	return _SimpleAccountFactory.Contract.CreateAccount(&_SimpleAccountFactory.TransactOpts, owner, salt)
}

// CreateAccount is a paid mutator transaction binding the contract method 0x5fbfb9cf.
//
// Solidity: function createAccount(address owner, uint256 salt) returns(address ret)
func (_SimpleAccountFactory *SimpleAccountFactoryTransactorSession) CreateAccount(owner common.Address, salt *big.Int) (*types.Transaction, error) {
	return _SimpleAccountFactory.Contract.CreateAccount(&_SimpleAccountFactory.TransactOpts, owner, salt)
}

// SimpleAccountFactoryAccountCreatedIterator is returned from FilterAccountCreated and is used to iterate over the raw logs and unpacked data for AccountCreated events raised by the SimpleAccountFactory contract.
type SimpleAccountFactoryAccountCreatedIterator struct {
	Event *SimpleAccountFactoryAccountCreated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *SimpleAccountFactoryAccountCreatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(SimpleAccountFactoryAccountCreated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(SimpleAccountFactoryAccountCreated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *SimpleAccountFactoryAccountCreatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *SimpleAccountFactoryAccountCreatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// SimpleAccountFactoryAccountCreated represents a AccountCreated event raised by the SimpleAccountFactory contract.
type SimpleAccountFactoryAccountCreated struct {
	Account common.Address
	Owner   common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterAccountCreated is a free log retrieval operation binding the contract event 0xac631f3001b55ea1509cf3d7e74898f85392a61a76e8149181ae1259622dabc8.
//
// Solidity: event AccountCreated(address indexed account, address owner)
func (_SimpleAccountFactory *SimpleAccountFactoryFilterer) FilterAccountCreated(opts *bind.FilterOpts, account []common.Address) (*SimpleAccountFactoryAccountCreatedIterator, error) {

	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}

	logs, sub, err := _SimpleAccountFactory.contract.FilterLogs(opts, "AccountCreated", accountRule)
	if err != nil {
		return nil, err
	}
	return &SimpleAccountFactoryAccountCreatedIterator{contract: _SimpleAccountFactory.contract, event: "AccountCreated", logs: logs, sub: sub}, nil
}

// WatchAccountCreated is a free log subscription operation binding the contract event 0xac631f3001b55ea1509cf3d7e74898f85392a61a76e8149181ae1259622dabc8.
//
// Solidity: event AccountCreated(address indexed account, address owner)
func (_SimpleAccountFactory *SimpleAccountFactoryFilterer) WatchAccountCreated(opts *bind.WatchOpts, sink chan<- *SimpleAccountFactoryAccountCreated, account []common.Address) (event.Subscription, error) {

	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}

	logs, sub, err := _SimpleAccountFactory.contract.WatchLogs(opts, "AccountCreated", accountRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(SimpleAccountFactoryAccountCreated)
				if err := _SimpleAccountFactory.contract.UnpackLog(event, "AccountCreated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseAccountCreated is a log parse operation binding the contract event 0xac631f3001b55ea1509cf3d7e74898f85392a61a76e8149181ae1259622dabc8.
//
// Solidity: event AccountCreated(address indexed account, address owner)
func (_SimpleAccountFactory *SimpleAccountFactoryFilterer) ParseAccountCreated(log types.Log) (*SimpleAccountFactoryAccountCreated, error) {
	event := new(SimpleAccountFactoryAccountCreated)
	if err := _SimpleAccountFactory.contract.UnpackLog(event, "AccountCreated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
