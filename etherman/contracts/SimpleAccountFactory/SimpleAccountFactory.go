// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package SimpleAccountFactory

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
	_ = abi.ConvertType
)

// ZKVizingAccountFactoryUserZKVizingAccountInfo is an auto generated low-level Go binding around an user-defined struct.
type ZKVizingAccountFactoryUserZKVizingAccountInfo struct {
	UserId          *big.Int
	ZkVizingAccount common.Address
}

// SimpleAccountFactoryMetaData contains all meta data concerning the SimpleAccountFactory contract.
var SimpleAccountFactoryMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"contractIEntryPoint\",\"name\":\"_entryPoint\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_bundler\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"AccountAlreadyCreated\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"AccountCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"accountImplementation\",\"outputs\":[{\"internalType\":\"contractZKVizingAccount\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"userId\",\"type\":\"uint256\"}],\"name\":\"createAccount\",\"outputs\":[{\"internalType\":\"contractZKVizingAccount\",\"name\":\"ret\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"userId\",\"type\":\"uint256\"}],\"name\":\"getAccountAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"getUserAccountInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"userId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"zkVizingAccount\",\"type\":\"address\"}],\"internalType\":\"structZKVizingAccountFactory.UserZKVizingAccountInfo\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_bundler\",\"type\":\"address\"}],\"name\":\"updateBundler\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
	Bin: "0x60a0604052346200004f576200001f620000186200016f565b9062000268565b6200002962000055565b6115646200043e823960805181818161029a015281816107f60152610abb015261156490f35b6200005b565b60405190565b5f80fd5b601f801991011690565b634e487b7160e01b5f52604160045260245ffd5b9062000089906200005f565b810190811060018060401b03821117620000a257604052565b62000069565b90620000bf620000b762000055565b92836200007d565b565b5f80fd5b60018060a01b031690565b620000db90620000c5565b90565b620000e990620000d0565b90565b620000f781620000de565b03620000ff57565b5f80fd5b905051906200011282620000ec565b565b6200011f81620000d0565b036200012757565b5f80fd5b905051906200013a8262000114565b565b91906040838203126200016957806200015c62000166925f860162000103565b936020016200012b565b90565b620000c1565b620001926200558f803803806200018681620000a8565b9283398101906200013c565b9091565b90565b620001b2620001ac620001b892620000c5565b62000196565b620000c5565b90565b620001c69062000199565b90565b620001d490620001bb565b90565b620001e290620001c9565b9052565b9190620001fb905f60208501940190620001d7565b565b6200020762000055565b3d5f823e3d90fd5b5f1b90565b906200022760018060a01b03916200020f565b9181191691161790565b6200023c90620001bb565b90565b90565b906200025c62000256620002649262000231565b6200023f565b825462000214565b9055565b62000273336200032e565b6200027d62000055565b90613bed820182811060018060401b03821117620002cf578291620002ab91613bed620019a28539620001e6565b03905ff0908115620002c957620002c791608052600162000242565b565b620001fd565b62000069565b90565b620002f1620002eb620002f792620002d5565b62000196565b620000c5565b90565b6200030590620002d8565b90565b6200031390620000d0565b9052565b91906200032c905f6020850194019062000308565b565b806200034f62000348620003425f620002fa565b620000d0565b91620000d0565b1462000362576200036090620003d2565b565b62000392620003715f620002fa565b6200037b62000055565b918291631e4fbdf760e01b83526004830162000317565b0390fd5b5f1c90565b60018060a01b031690565b620003b5620003bb9162000396565b6200039b565b90565b620003ca9054620003a6565b90565b5f0190565b620003dd5f620003be565b620003e9825f62000242565b90620004216200041a7f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09362000231565b9162000231565b916200042c62000055565b806200043881620003cd565b0390a356fe6080604052600436101562000015575b6200049d565b620000215f35620000b0565b80630cc0622114620000aa5780630d253d7614620000a457806311464fbe146200009e5780635fbfb9cf1462000098578063715018a614620000925780638da5cb5b146200008c578063c7217f7f14620000865763f2fde38b036200000f5762000460565b62000423565b620003e4565b620003a7565b62000362565b62000323565b62000247565b62000187565b60e01c90565b60405190565b5f80fd5b5f80fd5b60018060a01b031690565b620000da90620000c4565b90565b620000e881620000cf565b03620000f057565b5f80fd5b905035906200010382620000dd565b565b9060208282031262000121576200011e915f01620000f4565b90565b620000c0565b90565b620001359062000127565b9052565b6200014490620000cf565b9052565b906020806200016e93620001635f8201515f8601906200012a565b015191019062000139565b565b919062000185905f6040850194019062000148565b565b34620001c057620001bc620001a8620001a236600462000105565b6200065b565b620001b2620000b6565b9182918262000170565b0390f35b620000bc565b620001d18162000127565b03620001d957565b5f80fd5b90503590620001ec82620001c6565b565b91906040838203126200021b57806200020e62000218925f8601620000f4565b93602001620001dd565b90565b620000c0565b6200022c90620000cf565b9052565b919062000245905f6020850194019062000221565b565b3462000281576200027d6200026962000262366004620001ee565b90620007a6565b62000273620000b6565b9182918262000230565b0390f35b620000bc565b5f9103126200029257565b620000c0565b7f000000000000000000000000000000000000000000000000000000000000000090565b90565b620002d8620002d2620002de92620000c4565b620002bc565b620000c4565b90565b620002ec90620002bf565b90565b620002fa90620002e1565b90565b6200030890620002ef565b9052565b919062000321905f60208501940190620002fd565b565b346200035c576200033636600462000287565b620003586200034462000298565b6200034e620000b6565b918291826200030c565b0390f35b620000bc565b346200039c5762000398620003846200037d366004620001ee565b9062000c43565b6200038e620000b6565b918291826200030c565b0390f35b620000bc565b5f0190565b34620003de57620003ba36600462000287565b620003c462000c89565b620003ce620000b6565b80620003da81620003a2565b0390f35b620000bc565b346200041d57620003f736600462000287565b620004196200040562000c95565b6200040f620000b6565b9182918262000230565b0390f35b620000bc565b346200045a57620004406200043a36600462000105565b62000cd4565b6200044a620000b6565b806200045681620003a2565b0390f35b620000bc565b3462000497576200047d6200047736600462000105565b62000d60565b62000487620000b6565b806200049381620003a2565b0390f35b620000bc565b5f80fd5b601f801991011690565b634e487b7160e01b5f52604160045260245ffd5b90620004cb90620004a1565b810190811067ffffffffffffffff821117620004e657604052565b620004ab565b9062000503620004fb620000b6565b9283620004bf565b565b620005116040620004ec565b90565b5f90565b5f90565b6200052662000505565b90602080836200053562000514565b8152016200054262000518565b81525050565b620005526200051c565b90565b6200056090620002bf565b90565b6200056e9062000555565b90565b906200057d9062000563565b5f5260205260405f2090565b5f1c90565b90565b620005a0620005a69162000589565b6200058e565b90565b620005b5905462000591565b90565b90620005c49062000127565b9052565b60018060a01b031690565b620005e2620005e89162000589565b620005c8565b90565b620005f79054620005d3565b90565b906200060690620000cf565b9052565b906200064b6200064160016200061f62000505565b946200063a620006315f8301620005a9565b5f8801620005b8565b01620005eb565b60208401620005fa565b565b62000658906200060a565b90565b620006776200067d916200066e62000548565b50600262000571565b6200064d565b90565b5f90565b90565b5f1b90565b620006a56200069f620006ab9262000127565b62000687565b62000684565b90565b620006b99062000555565b90565b5190565b60209181520190565b5f5b838110620006dc575050905f910152565b806020918301518185015201620006cb565b620007136200071d60209362000723936200070981620006bc565b93848093620006c0565b95869101620006c9565b620004a1565b0190565b916200074e926200074060408201935f83019062000221565b6020818403910152620006ee565b90565b905090565b6200078162000777926020926200076d81620006bc565b9485809362000751565b93849101620006c9565b0190565b62000796906200079d939262000756565b9062000756565b90565b60200190565b62000840620008a6620007c8620008c494620007c162000680565b506200068c565b926200087b61067b91620007df60208401620004ec565b9280845262000eb46020850139620008506200081b7f0000000000000000000000000000000000000000000000000000000000000000620006ae565b9162000826620000b6565b96879160046020840163189acdbd60e31b81520162000230565b60208201810382520386620004bf565b6200086b6200085e620000b6565b9586926020840162000727565b60208201810382520384620004bf565b6200089662000889620000b6565b9384926020840162000785565b60208201810382520382620004bf565b620008bc620008b582620006bc565b91620007a0565b209062000d7b565b90565b5f90565b15620008d357565b5f80fd5b906200091192916200090b3362000904620008fd620008f76001620005eb565b620000cf565b91620000cf565b14620008cb565b62000aa2565b90565b6200091e620000b6565b3d5f823e3d90fd5b6200093190620002e1565b90565b6200093f90620002bf565b90565b6200094d9062000934565b90565b90565b6200096c62000966620009729262000950565b620002bc565b620000c4565b90565b620009809062000953565b90565b6200098f6040620004ec565b90565b6200099e905162000127565b90565b90620009af5f199162000687565b9181191691161790565b620009d2620009cc620009d89262000127565b620002bc565b62000127565b90565b90565b90620009f8620009f262000a0092620009b9565b620009db565b8254620009a1565b9055565b62000a109051620000cf565b90565b9062000a2660018060a01b039162000687565b9181191691161790565b90565b9062000a4d62000a4762000a559262000563565b62000a30565b825462000a13565b9055565b9062000a8b6020600162000a929462000a825f820162000a7b5f880162000992565b90620009de565b01920162000a04565b9062000a33565b565b9062000aa09162000a59565b565b9291925062000ab1836200068c565b62000b0962000ae07f0000000000000000000000000000000000000000000000000000000000000000620006ae565b62000b198462000aef620000b6565b93849160046020840163189acdbd60e31b81520162000230565b60208201810382520383620004bf565b62000b23620000b6565b9161067b83019083821067ffffffffffffffff83111762000c3d57839262000b549261067b62000eb4863962000727565b03905ff5801562000c375762000b6e62000b749162000926565b62000942565b9262000bed62000b8485620006ae565b9162000bb28362000baa62000ba362000b9d5f62000975565b620000cf565b91620000cf565b1415620008cb565b62000bd98362000bcf62000bc562000983565b935f8501620005b8565b60208301620005fa565b62000be76002859062000571565b62000a94565b62000c3262000c1d7fac631f3001b55ea1509cf3d7e74898f85392a61a76e8149181ae1259622dabc89262000563565b9262000c28620000b6565b9182918262000230565b0390a2565b62000914565b620004ab565b9062000c599162000c53620008c7565b620008d7565b90565b62000c6662000da2565b62000c7062000c72565b565b62000c8762000c815f62000975565b62000e06565b565b62000c9362000c5c565b565b62000c9f62000680565b5062000cab5f620005eb565b90565b62000cc39062000cbd62000da2565b62000cc5565b565b62000cd290600162000a33565b565b62000cdf9062000cae565b565b62000cf69062000cf062000da2565b62000cf8565b565b8062000d1962000d1262000d0c5f62000975565b620000cf565b91620000cf565b1462000d2c5762000d2a9062000e06565b565b62000d5c62000d3b5f62000975565b62000d45620000b6565b918291631e4fbdf760e01b83526004830162000230565b0390fd5b62000d6b9062000ce1565b565b62000d789062000555565b90565b9062000d9f9162000d8b62000680565b509062000d983062000d6d565b9162000e71565b90565b62000dac62000c95565b62000dcb62000dc462000dbe62000ea4565b620000cf565b91620000cf565b0362000dd357565b62000e0262000de162000ea4565b62000deb620000b6565b91829163118cdaa760e01b83526004830162000230565b0390fd5b62000e115f620005eb565b62000e1d825f62000a33565b9062000e5562000e4e7f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09362000563565b9162000563565b9162000e60620000b6565b8062000e6c81620003a2565b0390a3565b91600b9262000e7f62000680565b50604051926040840152602083015281520160ff8153605560018060a01b0391201690565b62000eae62000680565b50339056fe608060405261001561000f6101b5565b906101d7565b61001d61002b565b61010c61056f823961010c90f35b60405190565b601f801991011690565b634e487b7160e01b5f52604160045260245ffd5b9061005990610031565b810190811060018060401b0382111761007157604052565b61003b565b9061008961008261002b565b928361004f565b565b5f80fd5b5f80fd5b60018060a01b031690565b6100a790610093565b90565b6100b38161009e565b036100ba57565b5f80fd5b905051906100cb826100aa565b565b5f80fd5b5f80fd5b60018060401b0381116100f1576100ed602091610031565b0190565b61003b565b5f5b838110610108575050905f910152565b8060209183015181850152016100f8565b9092919261012e610129826100d5565b610076565b9381855260208501908284011161014a57610148926100f6565b565b6100d1565b9080601f8301121561016d5781602061016a93519101610119565b90565b6100cd565b9190916040818403126101b05761018b835f83016100be565b92602082015160018060401b0381116101ab576101a8920161014f565b90565b61008f565b61008b565b6101d361067b803803806101c881610076565b928339810190610172565b9091565b906101e191610245565b565b90565b6101fa6101f56101ff92610093565b6101e3565b610093565b90565b61020b906101e6565b90565b61021790610202565b90565b5f0190565b5190565b90565b90565b61023d61023861024292610226565b6101e3565b610223565b90565b9061024f82610381565b8161027a7fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b9161020e565b9061028361002b565b8061028d8161021a565b0390a26102998161021f565b6102ab6102a55f610229565b91610223565b115f146102bf576102bb9161045f565b505b565b50506102c96103dd565b6102bd565b6102d79061009e565b9052565b91906102ee905f602085019401906102ce565b565b90565b90565b5f1b90565b61030f61030a610314926102f0565b6102f6565b6102f3565b90565b6103407f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc6102fb565b90565b9061035460018060a01b03916102f6565b9181191691161790565b90565b9061037661037161037d9261020e565b61035e565b8254610343565b9055565b803b61039561038f5f610229565b91610223565b146103b7576103b5905f6103af6103aa610317565b61048e565b01610361565b565b6103d9906103c361002b565b918291634c9c8ce360e01b8352600483016102db565b0390fd5b346103f06103ea5f610229565b91610223565b116103f757565b6103ff61002b565b63b398979f60e01b8152806104166004820161021a565b0390fd5b606090565b9061043161042c836100d5565b610076565b918252565b3d5f14610451576104463d61041f565b903d5f602084013e5b565b61045961041a565b9061044f565b5f8061048b9361046d61041a565b508390602081019051915af490610482610436565b90919091610496565b90565b90565b151590565b906104aa906104a361041a565b5015610491565b5f146104b65750610521565b6104bf8261021f565b6104d16104cb5f610229565b91610223565b1480610506575b6104e0575090565b610502906104ec61002b565b918291639996b31560e01b8352600483016102db565b0390fd5b50803b61051b6105155f610229565b91610223565b146104d8565b61052a8161021f565b61053c6105365f610229565b91610223565b115f1461054b57805190602001fd5b61055361002b565b63d6bda27560e01b81528061056a6004820161021a565b0390fdfe6080604052600a6012565b6022565b5f90565b6018600e565b50601f60b5565b90565b5f8091368280378136915af43d5f803e5f14603b573d5ff35b3d5ffd5b90565b90565b5f1b90565b60596055605d92603f565b6045565b6042565b90565b60877f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc604a565b90565b5f1c90565b60018060a01b031690565b60a360a791608a565b608f565b90565b60b29054609a565b90565b60bb600e565b5060d05f60cb60c76060565b60d3565b0160aa565b90565b9056fea26469706673582212205eb798dd159504b7f6d02130d555b59a1ec25a1baabf5d9f6ba4d59dc167f73764736f6c63430008180033a2646970667358221220cfee9d50561c40b3d0415d613f8117711b20ab81e21890c0bb208c6b18708d8c64736f6c6343000818003360c0604052346200005e576200001e6200001862000145565b6200016b565b6200002862000064565b613804620003e98239608051818181612db201528181612e1e0152612fdc015260a0518181816127460152613505015261380490f35b6200006a565b60405190565b5f80fd5b601f801991011690565b634e487b7160e01b5f52604160045260245ffd5b9062000098906200006e565b810190811060018060401b03821117620000b157604052565b62000078565b90620000ce620000c662000064565b92836200008c565b565b5f80fd5b60018060a01b031690565b620000ea90620000d4565b90565b620000f890620000df565b90565b6200010681620000ed565b036200010e57565b5f80fd5b905051906200012182620000fb565b565b906020828203126200013f576200013c915f0162000112565b90565b620000d0565b6200016862003bed803803806200015c81620000b7565b92833981019062000123565b90565b6200017562000184565b60a05262000182620002ee565b565b6200018e620001d1565b565b90565b620001ac620001a6620001b292620000d4565b62000190565b620000d4565b90565b620001c09062000193565b90565b620001ce90620001b5565b90565b620001dc30620001c3565b608052565b60401c90565b60ff1690565b620001fc6200020291620001e1565b620001e7565b90565b620002119054620001ed565b90565b5f0190565b5f1c90565b60018060401b031690565b620002386200023e9162000219565b6200021e565b90565b6200024d905462000229565b90565b60018060401b031690565b5f1b90565b906200027360018060401b03916200025b565b9181191691161790565b62000296620002906200029c9262000250565b62000190565b62000250565b90565b90565b90620002bc620002b6620002c4926200027d565b6200029f565b825462000260565b9055565b620002d39062000250565b9052565b9190620002ec905f60208501940190620002c8565b565b620002f8620003c4565b620003055f820162000205565b6200039d57620003175f820162000241565b620003336200032c60018060401b0362000250565b9162000250565b036200033d575b50565b62000352905f60018060401b039101620002a2565b60018060401b03620003937fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d2916200038962000064565b91829182620002d7565b0390a15f6200033a565b620003a762000064565b63f92ee8a960e01b815280620003c06004820162000214565b0390fd5b7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a009056fe60806040526004361015610015575b3661106057005b61001f5f3561016e565b806301ffc9a7146101695780631376c37e14610164578063150b7a021461015f578063211a47891461015a5780632e1a7d4d14610155578063436284211461015057806347e1da2a1461014b5780634f1ef2861461014657806352d1902d14610141578063599509061461013c5780635c51ffd1146101375780638799aeea146101325780638da5cb5b1461012d5780639165754414610128578063ad3cb1cc14610123578063b0d691fe1461011e578063b61d27f614610119578063bc197c8114610114578063c4d66de81461010f578063f23a6e611461010a5763fc7092660361000e5761102b565b610fef565b610f4c565b610f0d565b610e34565b610dad565b610d1f565b610bd8565b610ba3565b610b0c565b610a47565b6109ec565b610927565b6108c9565b610763565b6105f7565b6105c4565b610562565b610499565b61038d565b6101fa565b60e01c90565b60405190565b5f80fd5b5f80fd5b5f80fd5b63ffffffff60e01b1690565b61019b81610186565b036101a257565b5f80fd5b905035906101b382610192565b565b906020828203126101ce576101cb915f016101a6565b90565b61017e565b151590565b6101e1906101d3565b9052565b91906101f8905f602085019401906101d8565b565b3461022a576102266102156102103660046101b5565b611068565b61021d610174565b918291826101e5565b0390f35b61017a565b67ffffffffffffffff1690565b6102458161022f565b0361024c57565b5f80fd5b9050359061025d8261023c565b565b90565b61026b8161025f565b0361027257565b5f80fd5b9050359061028382610262565b565b60018060a01b031690565b61029990610285565b90565b6102a581610290565b036102ac57565b5f80fd5b905035906102bd8261029c565b565b62ffffff1690565b6102d0816102bf565b036102d757565b5f80fd5b905035906102e8826102c7565b565b91906101008382031261036657610303815f8501610250565b926103118260208301610276565b9261031f83604084016102b0565b9261032d81606085016102db565b9261033b8260808301610250565b9261036361034c8460a08501610250565b9361035a8160c08601610250565b9360e0016102b0565b90565b61017e565b6103749061025f565b9052565b919061038b905f6020850194019061036b565b565b346103c7576103c36103b26103a33660046102ea565b96959095949194939293611717565b6103ba610174565b91829182610378565b0390f35b61017a565b5f80fd5b5f80fd5b5f80fd5b909182601f830112156104125781359167ffffffffffffffff831161040d57602001926001830284011161040857565b6103d4565b6103d0565b6103cc565b906080828203126104725761042e815f84016102b0565b9261043c82602085016102b0565b9261044a8360408301610276565b92606082013567ffffffffffffffff811161046d5761046992016103d8565b9091565b610182565b61017e565b61048090610186565b9052565b9190610497905f60208501940190610477565b565b346104cd576104c96104b86104af366004610417565b93929092611948565b6104c0610174565b91829182610484565b0390f35b61017a565b90916101208284031261055d576104eb835f84016102b0565b926104f98160208501610276565b926105078260408301610276565b926105158360608401610276565b9261052381608085016102db565b926105318260a08301610250565b9261055a6105428460c08501610250565b936105508160e08601610250565b93610100016102b0565b90565b61017e565b3461059c576105986105876105783660046104d2565b97969096959195949294611a2b565b61058f610174565b91829182610378565b0390f35b61017a565b906020828203126105ba576105b7915f01610276565b90565b61017e565b5f0190565b346105f2576105dc6105d73660046105a1565b611d97565b6105e4610174565b806105ee816105bf565b0390f35b61017a565b61060a6106053660046105a1565b611dd4565b610612610174565b8061061c816105bf565b0390f35b909182601f8301121561065a5781359167ffffffffffffffff831161065557602001926020830284011161065057565b6103d4565b6103d0565b6103cc565b909182601f830112156106995781359167ffffffffffffffff831161069457602001926020830284011161068f57565b6103d4565b6103d0565b6103cc565b909182601f830112156106d85781359167ffffffffffffffff83116106d35760200192602083028401116106ce57565b6103d4565b6103d0565b6103cc565b9060608282031261075e575f82013567ffffffffffffffff81116107595781610707918401610620565b929093602082013567ffffffffffffffff8111610754578361072a91840161065f565b929093604082013567ffffffffffffffff811161074f5761074b920161069e565b9091565b610182565b610182565b610182565b61017e565b34610798576107826107763660046106dd565b94939093929192611fff565b61078a610174565b80610794816105bf565b0390f35b61017a565b5f80fd5b601f801991011690565b634e487b7160e01b5f52604160045260245ffd5b906107c9906107a1565b810190811067ffffffffffffffff8211176107e357604052565b6107ab565b906107fb6107f4610174565b92836107bf565b565b67ffffffffffffffff811161081b576108176020916107a1565b0190565b6107ab565b90825f939282370152565b9092919261084061083b826107fd565b6107e8565b9381855260208501908284011161085c5761085a92610820565b565b61079d565b9080601f8301121561087f5781602061087c9335910161082b565b90565b6103cc565b9190916040818403126108c45761089d835f83016102b0565b92602082013567ffffffffffffffff81116108bf576108bc9201610861565b90565b610182565b61017e565b6108dd6108d7366004610884565b90612206565b6108e5610174565b806108ef816105bf565b0390f35b5f9103126108fd57565b61017e565b90565b61090e90610902565b9052565b9190610925905f60208501940190610905565b565b34610957576109373660046108f3565b610953610942612286565b61094a610174565b91829182610912565b0390f35b61017a565b9091610120828403126109e757610975835f8401610250565b926109838160208501610276565b9261099182604083016102b0565b9261099f8360608401610276565b926109ad81608085016102db565b926109bb8260a08301610250565b926109e46109cc8460c08501610250565b936109da8160e08601610250565b93610100016102b0565b90565b61017e565b34610a2457610a0e6109ff36600461095c565b979690969591959492946125da565b610a16610174565b80610a20816105bf565b0390f35b61017a565b90602082820312610a4257610a3f915f016102b0565b90565b61017e565b34610a7757610a73610a62610a5d366004610a29565b6125ed565b610a6a610174565b918291826101e5565b0390f35b61017a565b909161012082840312610b0757610a95835f8401610276565b92610aa38160208501610276565b92610ab18260408301610276565b92610abf8360608401610276565b92610acd81608085016102db565b92610adb8260a08301610250565b92610b04610aec8460c08501610250565b93610afa8160e08601610250565b93610100016102b0565b90565b61017e565b610b29610b1a366004610a7c565b9796909695919594929461260a565b610b31610174565b80610b3b816105bf565b0390f35b1c90565b60018060a01b031690565b610b5e906008610b639302610b3f565b610b43565b90565b90610b719154610b4e565b90565b610b7e5f80610b66565b90565b610b8a90610290565b9052565b9190610ba1905f60208501940190610b81565b565b34610bd357610bb33660046108f3565b610bcf610bbe610b74565b610bc6610174565b91829182610b8e565b0390f35b61017a565b34610c0657610bf0610beb3660046105a1565b61272c565b610bf8610174565b80610c02816105bf565b0390f35b61017a565b67ffffffffffffffff8111610c2957610c256020916107a1565b0190565b6107ab565b90610c40610c3b83610c0b565b6107e8565b918252565b5f7f352e302e30000000000000000000000000000000000000000000000000000000910152565b610c766005610c2e565b90610c8360208301610c45565b565b610c8d610c6c565b90565b610c98610c85565b90565b610ca3610c90565b90565b5190565b60209181520190565b5f5b838110610cc5575050905f910152565b806020918301518185015201610cb5565b610cf5610cfe602093610d0393610cec81610ca6565b93848093610caa565b95869101610cb3565b6107a1565b0190565b610d1c9160208201915f818403910152610cd6565b90565b34610d4f57610d2f3660046108f3565b610d4b610d3a610c9b565b610d42610174565b91829182610d07565b0390f35b61017a565b90565b610d6b610d66610d7092610285565b610d54565b610285565b90565b610d7c90610d57565b90565b610d8890610d73565b90565b610d9490610d7f565b9052565b9190610dab905f60208501940190610d8b565b565b34610ddd57610dbd3660046108f3565b610dd9610dc861273b565b610dd0610174565b91829182610d98565b0390f35b61017a565b91606083830312610e2f57610df9825f85016102b0565b92610e078360208301610276565b92604082013567ffffffffffffffff8111610e2a57610e2692016103d8565b9091565b610182565b61017e565b34610e6657610e50610e47366004610de2565b92919091612768565b610e58610174565b80610e62816105bf565b0390f35b61017a565b9160a083830312610f0857610e82825f85016102b0565b92610e9083602083016102b0565b92604082013567ffffffffffffffff8111610f035781610eb191840161065f565b929093606082013567ffffffffffffffff8111610efe5783610ed491840161065f565b929093608082013567ffffffffffffffff8111610ef957610ef592016103d8565b9091565b610182565b610182565b610182565b61017e565b34610f4757610f43610f32610f23366004610e6b565b9695909594919493929361278a565b610f3a610174565b91829182610484565b0390f35b61017a565b34610f7a57610f64610f5f366004610a29565b612a8d565b610f6c610174565b80610f76816105bf565b0390f35b61017a565b91909160a081840312610fea57610f98835f83016102b0565b92610fa681602084016102b0565b92610fb48260408501610276565b92610fc28360608301610276565b92608082013567ffffffffffffffff8111610fe557610fe192016103d8565b9091565b610182565b61017e565b3461102657611022611011611005366004610f7f565b94939093929192612a98565b611019610174565b91829182610484565b0390f35b61017a565b3461105b5761103b3660046108f3565b611057611046612ab2565b61104e610174565b91829182610378565b0390f35b61017a565b5f80fd5b5f90565b611070611064565b508061108b611085630a85bd0160e11b610186565b91610186565b1480156110c1575b90811561109f575b5090565b90506110ba6110b46301ffc9a760e01b610186565b91610186565b145f61109b565b50806110dc6110d6630271189760e51b610186565b91610186565b14611093565b5f90565b6110f060406107e8565b90565b606090565b6111036101606107e8565b90565b5f90565b5f90565b5f90565b5f90565b5f90565b606090565b6111276110f8565b906020808080808080808080808c61113d611106565b81520161114861110a565b81520161115361110e565b81520161115e61110e565b81520161116961110e565b81520161117461110e565b81520161117f611112565b81520161118a611112565b815201611195611116565b8152016111a061111a565b8152016111ab61111a565b81525050565b6111b961111f565b90565b6111c46110e6565b90602080836111d16110f3565b8152016111dc6111b1565b81525050565b6111ea6111bc565b90565b6111f760406107e8565b90565b6112026111ed565b906020808361120f611116565b81520161121a611112565b81525050565b6112286111fa565b90565b906112359061025f565b9052565b9061124390610290565b9052565b90565b60ff1690565b61126461125f61126992611247565b610d54565b61124a565b90565b906112769061124a565b9052565b90611284906102bf565b9052565b906112929061022f565b9052565b6112a0905161022f565b90565b5f80fd5b60e01b90565b5f80fd5b905051906112be8261029c565b565b91906040838203126112fa576112f3906112da60406107e8565b936112e7825f83016112b1565b5f8601526020016112b1565b6020830152565b6112ad565b9060408282031261131857611315915f016112c0565b90565b61017e565b6113269061022f565b9052565b919061133d905f6020850194019061131d565b565b611347610174565b3d5f823e3d90fd5b6113599051610290565b90565b6113659061025f565b9052565b61137290610290565b9052565b906020806113989361138e5f8201515f86019061135c565b0151910190611369565b565b91906113ad905f60408501940190611376565b565b905051906113bc82610262565b565b906020828203126113d7576113d4915f016113af565b90565b61017e565b5190565b60209181520190565b60200190565b6113f89061124a565b9052565b6114059061022f565b9052565b5190565b60209181520190565b61143561143e6020936114439361142c81611409565b9384809361140d565b95869101610cb3565b6107a1565b0190565b6114df9160e06101008201926114635f8201515f8501906113fc565b611475602082015160208501906113fc565b611487604082015160408501906113fc565b611499606082015160608501906113fc565b6114ab608082015160808501906113fc565b6114bd60a082015160a08501906113fc565b6114cf60c082015160c08501906113fc565b01519060e0818403910152611416565b90565b61156a9160c061155960e083016114ff5f8601515f8601906113ef565b611511602086015160208601906113ef565b6115236040860151604086019061135c565b61153560608601516060860190611369565b61154760808601516080860190611369565b60a085015184820360a0860152611447565b9201519060c0818403910152611447565b90565b90611577916114e2565b90565b60200190565b9061159461158d836113dc565b80926113e0565b90816115a5602083028401946113e9565b925f915b8383106115b857505050505090565b909192939460206115da6115d48385600195038752895161156d565b9761157a565b93019301919392906115a9565b6115f0906102bf565b9052565b6116cb916101406116b961016083016116135f8601515f8601906113ef565b611625602086015160208601906115e7565b611637604086015160408601906113fc565b611649606086015160608601906113fc565b61165b608086015160808601906113fc565b61166d60a086015160a08601906113fc565b61167f60c086015160c0860190611369565b61169160e086015160e0860190611369565b6116a561010086015161010086019061135c565b610120850151848203610120860152611416565b92015190610140818403910152611416565b90565b6116fc9160206116eb604083015f8501518482035f860152611580565b9201519060208184039101526115f4565b90565b6117149160208201915f8184039101526116ce565b90565b91949296959390966117276110e2565b506117306111e2565b95611739611220565b98895f01906117479161122b565b886020019061175591611239565b60fe61176090611250565b86602001515f01906117719161126c565b8560200151602001906117839161127a565b84602001516040019061179591611288565b8360200151606001906117a791611288565b8260200151608001906117b991611288565b816020015160a001906117cb91611288565b6117d361273b565b6117dc90610d7f565b916342f1ec699282602001516060016117f490611296565b936117fd610174565b809561180982936112a7565b825260048201906118199161132a565b03815a93604094fa92831561193f576118c89461186761187a9361185b61184f60208099611888975f91611911575b500161134f565b60c08989015101611239565b60e08787015101611239565b61186f610174565b92839186830161139a565b8582018103825203826107bf565b6101408383015101526118a161189c61273b565b610d7f565b6118bd634be149526118b1610174565b958694859384936112a7565b8352600483016116ff565b03915afa90811561190c575f916118de575b5090565b6118ff915060203d8111611905575b6118f781836107bf565b8101906113be565b5f6118da565b503d6118ed565b61133f565b611932915060403d8111611938575b61192a81836107bf565b8101906112ff565b5f611848565b503d611920565b61133f565b5f90565b5050505050611955611944565b50630a85bd0160e11b90565b61196a90610d73565b90565b63ffffffff1690565b61198a61198561198f9261196d565b6112a7565b610186565b90565b909594926119dd946119cc6119d6926119c26080966119b860a088019c5f890190610b81565b6020870190610b81565b604085019061036b565b606083019061036b565b019061036b565b565b90565b6119f66119f16119fb926119df565b610d54565b61124a565b90565b90505190611a0b8261023c565b565b90602082820312611a2657611a23915f016119fe565b90565b61017e565b611a92600491611a83611b0d979995611ae5959c999c9b979b611a4c6110e2565b508c631d8c1afa92611a6a611a6030611961565b9691929394611976565b95611a73610174565b9889976020890190815201611992565b602082018103825203826107bf565b97611ad8611a9e6111e2565b97611ab3611aaa611220565b9a5f8c0161122b565b611acc611ac060ff6119e2565b5f60208c01510161126c565b6020808a01510161127a565b6040602088015101611288565b6020611af7611af261273b565b610d7f565b63750c67ba90611b05610174565b9586926112a7565b82528180611b1d600482016105bf565b03915afa908115611d0e57611b48611b5592611b62955f91611ce0575b506060602089015101611288565b6080602087015101611288565b60a0602085015101611288565b611bb06040611b77611b7261273b565b610d7f565b6342f1ec6990611ba5611b906060602089015101611296565b92611b99610174565b958694859384936112a7565b83526004830161132a565b03915afa938415611cdb57611c6495611bfa611c1694611bee611be26020809a611c24985f91611cad575b500161134f565b60c08a8a015101611239565b60e08888015101611239565b610120868601510152611c0b610174565b92839186830161139a565b8582018103825203826107bf565b610140838301510152611c3d611c3861273b565b610d7f565b611c59634be14952611c4d610174565b958694859384936112a7565b8352600483016116ff565b03915afa908115611ca8575f91611c7a575b5090565b611c9b915060203d8111611ca1575b611c9381836107bf565b8101906113be565b5f611c76565b503d611c89565b61133f565b611cce915060403d8111611cd4575b611cc681836107bf565b8101906112ff565b5f611bdb565b503d611cbc565b61133f565b611d01915060203d8111611d07575b611cf981836107bf565b810190611a0d565b5f611b3a565b503d611cef565b61133f565b611d2490611d1f612bee565b611d3d565b565b611d2f5f610c2e565b90565b611d3a611d26565b90565b80611d59611d53611d4d30611961565b3161025f565b9161025f565b11611d7457611d72903390611d6c611d32565b91612c88565b565b611d7c610174565b631e9acf1760e31b815280611d93600482016105bf565b0390fd5b611da090611d13565b565b5f910312611dac57565b61017e565b916020611dd2929493611dcb60408201965f83019061036b565b019061036b565b565b611de4611ddf61273b565b610d7f565b90639abe7903903492919291349193813b15611e65575f93611e1791611e22611e0b610174565b978896879586946112a7565b845260048401611db1565b03925af18015611e6057611e34575b50565b611e53905f3d8111611e59575b611e4b81836107bf565b810190611da2565b5f611e31565b503d611e41565b61133f565b6112a3565b5090565b5090565b5090565b90565b611e8d611e88611e9292611e76565b610d54565b61025f565b90565b5f7f77726f6e67206172726179206c656e6774687300000000000000000000000000910152565b611ec96013602092610caa565b611ed281611e95565b0190565b611eeb9060208101905f818303910152611ebc565b90565b15611ef557565b611efd610174565b62461bcd60e51b815280611f1360048201611ed6565b0390fd5b6001611f23910161025f565b90565b634e487b7160e01b5f52603260045260245ffd5b9190811015611f4a576020020190565b611f26565b35611f598161029c565b90565b9190811015611f6c576020020190565b611f26565b35611f7b81610262565b90565b5f80fd5b5f80fd5b5f80fd5b903590600160200381360303821215611fcc570180359067ffffffffffffffff8211611fc757602001916001820236038313611fc257565b611f86565b611f82565b611f7e565b90821015611fec576020611fe89202810190611f8a565b9091565b611f26565b611ffc91369161082b565b90565b91909295949561200d612d39565b612018838590611e6a565b61203461202e612029888b90611e6e565b61025f565b9161025f565b148061217f575b61204490611eee565b61204f828290611e72565b61206161205b5f611e79565b9161025f565b145f146120ec5750506120735f611e79565b5b8061209161208b612086858790611e6a565b61025f565b9161025f565b10156120e3576120de906120d96120b26120ad85878591611f3a565b611f4f565b5f6120d36120cd6120c58a8d8891611fd1565b919093611e79565b92611ff1565b91612c88565b611f17565b612074565b5050505090505b565b916120fa5f97949297611e79565b5b8061211861211261210d858790611e6a565b61025f565b9161025f565b10156121725761216d9061216861213961213485878591611f3a565b611f4f565b61214d6121488c898691611f5c565b611f71565b61216261215c8b8b8791611fd1565b90611ff1565b91612c88565b611f17565b6120fb565b50505050505090506120ea565b5061218b828290611e72565b61219d6121975f611e79565b9161025f565b1480156121aa575b61203b565b506120446121b9838390611e72565b6121d56121cf6121ca898c90611e6e565b61025f565b9161025f565b1490506121a5565b906121ef916121ea612da1565b6121f1565b565b90612204916121ff81612e4f565b612ebf565b565b90612210916121dd565b565b5f90565b61222790612222612fcb565b61227a565b90565b90565b5f1b90565b61224661224161224b9261222a565b61222d565b610902565b90565b6122777f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc612232565b90565b5061228361224e565b90565b612296612291612212565b612216565b90565b906122b298979695949392916122ad612bee565b6122f8565b565b156122bb57565b5f80fd5b634e487b7160e01b5f52601160045260245ffd5b6122e26122e89193929361025f565b9261025f565b82018092116122f357565b6122bf565b9097949692959193966123096111e2565b97612312611220565b958a875f01906123219161122b565b866020019061232f91611239565b60fe61233a90611250565b89602001515f019061234b9161126c565b88602001516020019061235d9161127a565b87602001516040019061236f91611288565b86602001516060019061238191611288565b85602001516080019061239391611288565b846020015160a001906123a591611288565b6123ad61273b565b6123b690610d7f565b906342f1ec699185602001516060016123ce90611296565b926123d7610174565b80946123e382936112a7565b825260048201906123f39161132a565b03815a93604094fa80156125d55761245193612430612423602061243d94612460975f916125a7575b500161134f565b60c060208a015101611239565b60e0602088015101611239565b612445610174565b9283916020830161139a565b602082018103825203826107bf565b610140602084015101526124a9602061247f61247a61273b565b610d7f565b634be149529061249e8692612492610174565b958694859384936112a7565b8352600483016116ff565b03915afa80156125a2576124d9915f91612574575b506124d26124cc849261025f565b9161025f565b10156122b4565b6124f86124ec6124e761273b565b610d7f565b936372afdea1926122d3565b9290929190803b1561256f576125215f9361252c95612515610174565b968795869485936112a7565b8352600483016116ff565b03925af1801561256a5761253e575b50565b61255d905f3d8111612563575b61255581836107bf565b810190611da2565b5f61253b565b503d61254b565b61133f565b6112a3565b612595915060203d811161259b575b61258d81836107bf565b8101906113be565b5f6124be565b503d612583565b61133f565b6125c8915060403d81116125ce575b6125c081836107bf565b8101906112ff565b5f61241c565b503d6125b6565b61133f565b906125eb9897969594939291612299565b565b612607906125f9611064565b50612602613030565b61307c565b90565b96949290979593916126448961263d61263761263261262b349487906122d3565b87906122d3565b61025f565b9161025f565b10156122b4565b806126576126515f611e79565b9161025f565b03612668575b505050505050505050565b61267c9833989091929394959697986130ae565b5f808080808080808061265d565b61269b90612696612bee565b61269d565b565b6126ad6126a861273b565b610d7f565b906339875d1a90823b15612727576126e4926126d95f80946126cd610174565b968795869485936112a7565b835260048301610378565b03925af18015612722576126f6575b50565b612715905f3d811161271b575b61270d81836107bf565b810190611da2565b5f6126f3565b503d612703565b61133f565b6112a3565b6127359061268a565b565b5f90565b612743612737565b507f000000000000000000000000000000000000000000000000000000000000000090565b612788936127829193929361277b612d39565b9392611ff1565b91612c88565b565b505050505050505061279a611944565b5063bc197c8160e01b90565b60401c90565b60ff1690565b6127be6127c3916127a6565b6127ac565b90565b6127d090546127b2565b90565b5f1c90565b67ffffffffffffffff1690565b6127f16127f6916127d3565b6127d8565b90565b61280390546127e5565b90565b61281a61281561281f92611e76565b610d54565b61022f565b90565b90565b61283961283461283e92612822565b610d54565b61022f565b90565b61284a90610d73565b90565b9061286067ffffffffffffffff9161222d565b9181191691161790565b61287e6128796128839261022f565b610d54565b61022f565b90565b90565b9061289e6128996128a59261286a565b612886565b825461284d565b9055565b60401b90565b906128c368ff0000000000000000916128a9565b9181191691161790565b6128d6906101d3565b90565b90565b906128f16128ec6128f8926128cd565b6128d9565b82546128af565b9055565b61290590612825565b9052565b919061291c905f602085019401906128fc565b565b612926613473565b9061293b6129355f84016127c6565b156101d3565b906129475f84016127f9565b8061295a6129545f612806565b9161022f565b1480612a7b575b9061297561296f6001612825565b9161022f565b1480612a53575b6129879091156101d3565b9081612a42575b50612a1f576129b7906129ac6129a46001612825565b5f8601612889565b82612a0d575b612a82565b6129bf575b50565b6129cc905f8091016128dc565b6001612a047fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d2916129fb610174565b91829182612909565b0390a15f6129bc565b612a1a60015f86016128dc565b6129b2565b612a27610174565b63f92ee8a960e01b815280612a3e600482016105bf565b0390fd5b612a4d9150156101d3565b5f61298e565b50612987612a6030612841565b3b612a73612a6d5f611e79565b9161025f565b14905061297c565b5082612961565b612a8b906134f9565b565b612a969061291e565b565b505050505050612aa6611944565b5063f23a6e6160e01b90565b612aba6110e2565b50612b026020612ad0612acb61273b565b610d7f565b63653e75ec90612af7612ae230611961565b92612aeb610174565b958694859384936112a7565b835260048301610b8e565b03915afa908115612b46575f91612b18575b5090565b612b39915060203d8111612b3f575b612b3181836107bf565b8101906113be565b5f612b14565b503d612b27565b61133f565b612b57612b5c916127d3565b610b43565b90565b612b699054612b4b565b90565b5f7f6f6e6c79206f776e657200000000000000000000000000000000000000000000910152565b612ba0600a602092610caa565b612ba981612b6c565b0190565b612bc29060208101905f818303910152612b93565b90565b15612bcc57565b612bd4610174565b62461bcd60e51b815280612bea60048201612bad565b0390fd5b33612c09612c03612bfe5f612b5f565b610290565b91610290565b148015612c1c575b612c1a90612bc5565b565b50612c1a33612c3b612c35612c3030611961565b610290565b91610290565b149050612c11565b90612c55612c50836107fd565b6107e8565b918252565b606090565b3d5f14612c7a57612c6f3d612c43565b903d5f602084013e5b565b612c82612c5a565b90612c78565b905f92839291602082019151925af1612ca9612ca2612c5f565b91156101d3565b612cb05750565b602081519101fd5b5f7f6163636f756e743a206e6f74204f776e6572206f7220456e747279506f696e74910152565b612ceb60208092610caa565b612cf481612cb8565b0190565b612d0d9060208101905f818303910152612cdf565b90565b15612d1757565b612d1f610174565b62461bcd60e51b815280612d3560048201612cf8565b0390fd5b33612d5b612d55612d50612d4b61273b565b610d7f565b610290565b91610290565b148015612d6e575b612d6c90612d10565b565b50612d6c33612d8d612d87612d825f612b5f565b610290565b91610290565b149050612d63565b612d9e90610d73565b90565b612daa30612d95565b612ddc612dd67f0000000000000000000000000000000000000000000000000000000000000000610290565b91610290565b148015612e0d575b612dea57565b612df2610174565b63703e46dd60e11b815280612e09600482016105bf565b0390fd5b50612e1661357c565b612e48612e427f0000000000000000000000000000000000000000000000000000000000000000610290565b91610290565b1415612de4565b50612e58612bee565b565b612e6390610d57565b90565b612e6f90612e5a565b90565b612e7b90610d73565b90565b612e8781610902565b03612e8e57565b5f80fd5b90505190612e9f82612e7e565b565b90602082820312612eba57612eb7915f01612e92565b90565b61017e565b9190612eed6020612ed7612ed286612e66565b612e72565b6352d1902d90612ee5610174565b9384926112a7565b82528180612efd600482016105bf565b03915afa80915f92612f9b575b50155f14612f45575050906001612f1f57505b565b612f4190612f2b610174565b918291634c9c8ce360e01b835260048301610b8e565b0390fd5b9283612f60612f5a612f5561224e565b610902565b91610902565b03612f7557612f709293506135a2565b612f1d565b612f9784612f81610174565b918291632a87526960e21b835260048301610912565b0390fd5b612fbd91925060203d8111612fc4575b612fb581836107bf565b810190612ea1565b905f612f0a565b503d612fab565b612fd430612d95565b6130066130007f0000000000000000000000000000000000000000000000000000000000000000610290565b91610290565b0361300d57565b613015610174565b63703e46dd60e11b81528061302c600482016105bf565b0390fd5b3361305261304c61304761304261273b565b610d7f565b610290565b91610290565b0361305957565b613061610174565b637324df4760e01b815280613078600482016105bf565b0390fd5b613084611064565b506130a061309a6130945f612b5f565b92610290565b91610290565b036130aa57600190565b5f90565b613109906130fa613189946004949c999b969a98979c8b631d8c1afa926130e16130d730611961565b9691929394611976565b956130ea610174565b9889976020890190815201611992565b602082018103825203826107bf565b916131616131156111e2565b98613154613121611220565b9661312e8b5f8a0161122b565b6131488c5f602061313f60ff6119e2565b9201510161126c565b6020808d01510161127a565b604060208b015101611288565b602061317361316e61273b565b610d7f565b63750c67ba90613181610174565b9485926112a7565b82528180613199600482016105bf565b03915afa801561346e5761322c956131c76131d4926131e1955f91613440575b50606060208d015101611288565b608060208b015101611288565b60a0602089015101611288565b60406131f36131ee61273b565b610d7f565b6342f1ec699061322161320c606060208c015101611296565b92613215610174565b978894859384936112a7565b83526004830161132a565b03915afa801561343b576132909461326561325860206132729461329f985f9161340d575b500161134f565b60c060208b015101611239565b60e0602089015101611239565b61012060208701510152613284610174565b9283916020830161139a565b602082018103825203826107bf565b610140602084015101526132e860206132be6132b961273b565b610d7f565b634be14952906132dd86926132d1610174565b958694859384936112a7565b8352600483016116ff565b03915afa801561340857613318915f916133da575b5061331161330b869261025f565b9161025f565b10156122b4565b61333f3461333861333261332d8786906122d3565b61025f565b9161025f565b10156122b4565b61335e61335261334d61273b565b610d7f565b936372afdea1926122d3565b9290929190803b156133d5576133875f936133929561337b610174565b968795869485936112a7565b8352600483016116ff565b03925af180156133d0576133a4575b50565b6133c3905f3d81116133c9575b6133bb81836107bf565b810190611da2565b5f6133a1565b503d6133b1565b61133f565b6112a3565b6133fb915060203d8111613401575b6133f381836107bf565b8101906113be565b5f6132fd565b503d6133e9565b61133f565b61342e915060403d8111613434575b61342681836107bf565b8101906112ff565b5f613251565b503d61341c565b61133f565b613461915060203d8111613467575b61345981836107bf565b810190611a0d565b5f6131b9565b503d61344f565b61133f565b7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a0090565b906134a860018060a01b039161222d565b9181191691161790565b6134bb90610d73565b90565b90565b906134d66134d16134dd926134b2565b6134be565b8254613497565b9055565b6134ea90610d57565b90565b6134f6906134e1565b90565b613503905f6134c1565b7f000000000000000000000000000000000000000000000000000000000000000061352d5f612b5f565b61356061355a7ff75ce79a4abcc8ed48f3b3544cd773dd667599027b50a42ff4bbf68f1a65e7b0936134ed565b916134b2565b91613569610174565b80613573816105bf565b0390a3565b5f90565b613584613578565b5061359f5f61359961359461224e565b61362b565b01612b5f565b90565b906135ac8261362e565b816135d77fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b916134b2565b906135e0610174565b806135ea816105bf565b0390a26135f681611409565b6136086136025f611e79565b9161025f565b115f1461361c57613618916136c7565b505b565b505061362661368a565b61361a565b90565b803b61364261363c5f611e79565b9161025f565b1461366457613662905f61365c61365761224e565b61362b565b016134c1565b565b61368690613670610174565b918291634c9c8ce360e01b835260048301610b8e565b0390fd5b3461369d6136975f611e79565b9161025f565b116136a457565b6136ac610174565b63b398979f60e01b8152806136c3600482016105bf565b0390fd5b5f806136f3936136d5612c5a565b508390602081019051915af4906136ea612c5f565b909190916136f6565b90565b9061370a90613703612c5a565b50156101d3565b5f146137165750613781565b61371f82611409565b61373161372b5f611e79565b9161025f565b1480613766575b613740575090565b6137629061374c610174565b918291639996b31560e01b835260048301610b8e565b0390fd5b50803b61377b6137755f611e79565b9161025f565b14613738565b61378a81611409565b61379c6137965f611e79565b9161025f565b115f146137ab57805190602001fd5b6137b3610174565b63d6bda27560e01b8152806137ca600482016105bf565b0390fdfea264697066735822122077bab73181a1ad2c85313654feea23de4226b29de1cfb181359c7e0d23bed28e64736f6c63430008180033",
}

// SimpleAccountFactoryABI is the input ABI used to generate the binding from.
// Deprecated: Use SimpleAccountFactoryMetaData.ABI instead.
var SimpleAccountFactoryABI = SimpleAccountFactoryMetaData.ABI

// SimpleAccountFactoryBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use SimpleAccountFactoryMetaData.Bin instead.
var SimpleAccountFactoryBin = SimpleAccountFactoryMetaData.Bin

// DeploySimpleAccountFactory deploys a new Ethereum contract, binding an instance of SimpleAccountFactory to it.
func DeploySimpleAccountFactory(auth *bind.TransactOpts, backend bind.ContractBackend, _entryPoint common.Address, _bundler common.Address) (common.Address, *types.Transaction, *SimpleAccountFactory, error) {
	parsed, err := SimpleAccountFactoryMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(SimpleAccountFactoryBin), backend, _entryPoint, _bundler)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &SimpleAccountFactory{SimpleAccountFactoryCaller: SimpleAccountFactoryCaller{contract: contract}, SimpleAccountFactoryTransactor: SimpleAccountFactoryTransactor{contract: contract}, SimpleAccountFactoryFilterer: SimpleAccountFactoryFilterer{contract: contract}}, nil
}

// SimpleAccountFactory is an auto generated Go binding around an Ethereum contract.
type SimpleAccountFactory struct {
	SimpleAccountFactoryCaller     // Read-only binding to the contract
	SimpleAccountFactoryTransactor // Write-only binding to the contract
	SimpleAccountFactoryFilterer   // Log filterer for contract events
}

// SimpleAccountFactoryCaller is an auto generated read-only Go binding around an Ethereum contract.
type SimpleAccountFactoryCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// SimpleAccountFactoryTransactor is an auto generated write-only Go binding around an Ethereum contract.
type SimpleAccountFactoryTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// SimpleAccountFactoryFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type SimpleAccountFactoryFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// SimpleAccountFactorySession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type SimpleAccountFactorySession struct {
	Contract     *SimpleAccountFactory // Generic contract binding to set the session for
	CallOpts     bind.CallOpts         // Call options to use throughout this session
	TransactOpts bind.TransactOpts     // Transaction auth options to use throughout this session
}

// SimpleAccountFactoryCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type SimpleAccountFactoryCallerSession struct {
	Contract *SimpleAccountFactoryCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts               // Call options to use throughout this session
}

// SimpleAccountFactoryTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type SimpleAccountFactoryTransactorSession struct {
	Contract     *SimpleAccountFactoryTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts               // Transaction auth options to use throughout this session
}

// SimpleAccountFactoryRaw is an auto generated low-level Go binding around an Ethereum contract.
type SimpleAccountFactoryRaw struct {
	Contract *SimpleAccountFactory // Generic contract binding to access the raw methods on
}

// SimpleAccountFactoryCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type SimpleAccountFactoryCallerRaw struct {
	Contract *SimpleAccountFactoryCaller // Generic read-only contract binding to access the raw methods on
}

// SimpleAccountFactoryTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type SimpleAccountFactoryTransactorRaw struct {
	Contract *SimpleAccountFactoryTransactor // Generic write-only contract binding to access the raw methods on
}

// NewSimpleAccountFactory creates a new instance of SimpleAccountFactory, bound to a specific deployed contract.
func NewSimpleAccountFactory(address common.Address, backend bind.ContractBackend) (*SimpleAccountFactory, error) {
	contract, err := bindSimpleAccountFactory(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &SimpleAccountFactory{SimpleAccountFactoryCaller: SimpleAccountFactoryCaller{contract: contract}, SimpleAccountFactoryTransactor: SimpleAccountFactoryTransactor{contract: contract}, SimpleAccountFactoryFilterer: SimpleAccountFactoryFilterer{contract: contract}}, nil
}

// NewSimpleAccountFactoryCaller creates a new read-only instance of SimpleAccountFactory, bound to a specific deployed contract.
func NewSimpleAccountFactoryCaller(address common.Address, caller bind.ContractCaller) (*SimpleAccountFactoryCaller, error) {
	contract, err := bindSimpleAccountFactory(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &SimpleAccountFactoryCaller{contract: contract}, nil
}

// NewSimpleAccountFactoryTransactor creates a new write-only instance of SimpleAccountFactory, bound to a specific deployed contract.
func NewSimpleAccountFactoryTransactor(address common.Address, transactor bind.ContractTransactor) (*SimpleAccountFactoryTransactor, error) {
	contract, err := bindSimpleAccountFactory(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &SimpleAccountFactoryTransactor{contract: contract}, nil
}

// NewSimpleAccountFactoryFilterer creates a new log filterer instance of SimpleAccountFactory, bound to a specific deployed contract.
func NewSimpleAccountFactoryFilterer(address common.Address, filterer bind.ContractFilterer) (*SimpleAccountFactoryFilterer, error) {
	contract, err := bindSimpleAccountFactory(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &SimpleAccountFactoryFilterer{contract: contract}, nil
}

// bindSimpleAccountFactory binds a generic wrapper to an already deployed contract.
func bindSimpleAccountFactory(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := SimpleAccountFactoryMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_SimpleAccountFactory *SimpleAccountFactoryRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _SimpleAccountFactory.Contract.SimpleAccountFactoryCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_SimpleAccountFactory *SimpleAccountFactoryRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _SimpleAccountFactory.Contract.SimpleAccountFactoryTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_SimpleAccountFactory *SimpleAccountFactoryRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _SimpleAccountFactory.Contract.SimpleAccountFactoryTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_SimpleAccountFactory *SimpleAccountFactoryCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _SimpleAccountFactory.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_SimpleAccountFactory *SimpleAccountFactoryTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _SimpleAccountFactory.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_SimpleAccountFactory *SimpleAccountFactoryTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _SimpleAccountFactory.Contract.contract.Transact(opts, method, params...)
}

// AccountImplementation is a free data retrieval call binding the contract method 0x11464fbe.
//
// Solidity: function accountImplementation() view returns(address)
func (_SimpleAccountFactory *SimpleAccountFactoryCaller) AccountImplementation(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _SimpleAccountFactory.contract.Call(opts, &out, "accountImplementation")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// AccountImplementation is a free data retrieval call binding the contract method 0x11464fbe.
//
// Solidity: function accountImplementation() view returns(address)
func (_SimpleAccountFactory *SimpleAccountFactorySession) AccountImplementation() (common.Address, error) {
	return _SimpleAccountFactory.Contract.AccountImplementation(&_SimpleAccountFactory.CallOpts)
}

// AccountImplementation is a free data retrieval call binding the contract method 0x11464fbe.
//
// Solidity: function accountImplementation() view returns(address)
func (_SimpleAccountFactory *SimpleAccountFactoryCallerSession) AccountImplementation() (common.Address, error) {
	return _SimpleAccountFactory.Contract.AccountImplementation(&_SimpleAccountFactory.CallOpts)
}

// GetAccountAddress is a free data retrieval call binding the contract method 0x0d253d76.
//
// Solidity: function getAccountAddress(address owner, uint256 userId) view returns(address)
func (_SimpleAccountFactory *SimpleAccountFactoryCaller) GetAccountAddress(opts *bind.CallOpts, owner common.Address, userId *big.Int) (common.Address, error) {
	var out []interface{}
	err := _SimpleAccountFactory.contract.Call(opts, &out, "getAccountAddress", owner, userId)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetAccountAddress is a free data retrieval call binding the contract method 0x0d253d76.
//
// Solidity: function getAccountAddress(address owner, uint256 userId) view returns(address)
func (_SimpleAccountFactory *SimpleAccountFactorySession) GetAccountAddress(owner common.Address, userId *big.Int) (common.Address, error) {
	return _SimpleAccountFactory.Contract.GetAccountAddress(&_SimpleAccountFactory.CallOpts, owner, userId)
}

// GetAccountAddress is a free data retrieval call binding the contract method 0x0d253d76.
//
// Solidity: function getAccountAddress(address owner, uint256 userId) view returns(address)
func (_SimpleAccountFactory *SimpleAccountFactoryCallerSession) GetAccountAddress(owner common.Address, userId *big.Int) (common.Address, error) {
	return _SimpleAccountFactory.Contract.GetAccountAddress(&_SimpleAccountFactory.CallOpts, owner, userId)
}

// GetUserAccountInfo is a free data retrieval call binding the contract method 0x0cc06221.
//
// Solidity: function getUserAccountInfo(address _owner) view returns((uint256,address))
func (_SimpleAccountFactory *SimpleAccountFactoryCaller) GetUserAccountInfo(opts *bind.CallOpts, _owner common.Address) (ZKVizingAccountFactoryUserZKVizingAccountInfo, error) {
	var out []interface{}
	err := _SimpleAccountFactory.contract.Call(opts, &out, "getUserAccountInfo", _owner)

	if err != nil {
		return *new(ZKVizingAccountFactoryUserZKVizingAccountInfo), err
	}

	out0 := *abi.ConvertType(out[0], new(ZKVizingAccountFactoryUserZKVizingAccountInfo)).(*ZKVizingAccountFactoryUserZKVizingAccountInfo)

	return out0, err

}

// GetUserAccountInfo is a free data retrieval call binding the contract method 0x0cc06221.
//
// Solidity: function getUserAccountInfo(address _owner) view returns((uint256,address))
func (_SimpleAccountFactory *SimpleAccountFactorySession) GetUserAccountInfo(_owner common.Address) (ZKVizingAccountFactoryUserZKVizingAccountInfo, error) {
	return _SimpleAccountFactory.Contract.GetUserAccountInfo(&_SimpleAccountFactory.CallOpts, _owner)
}

// GetUserAccountInfo is a free data retrieval call binding the contract method 0x0cc06221.
//
// Solidity: function getUserAccountInfo(address _owner) view returns((uint256,address))
func (_SimpleAccountFactory *SimpleAccountFactoryCallerSession) GetUserAccountInfo(_owner common.Address) (ZKVizingAccountFactoryUserZKVizingAccountInfo, error) {
	return _SimpleAccountFactory.Contract.GetUserAccountInfo(&_SimpleAccountFactory.CallOpts, _owner)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_SimpleAccountFactory *SimpleAccountFactoryCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _SimpleAccountFactory.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_SimpleAccountFactory *SimpleAccountFactorySession) Owner() (common.Address, error) {
	return _SimpleAccountFactory.Contract.Owner(&_SimpleAccountFactory.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_SimpleAccountFactory *SimpleAccountFactoryCallerSession) Owner() (common.Address, error) {
	return _SimpleAccountFactory.Contract.Owner(&_SimpleAccountFactory.CallOpts)
}

// CreateAccount is a paid mutator transaction binding the contract method 0x5fbfb9cf.
//
// Solidity: function createAccount(address owner, uint256 userId) returns(address ret)
func (_SimpleAccountFactory *SimpleAccountFactoryTransactor) CreateAccount(opts *bind.TransactOpts, owner common.Address, userId *big.Int) (*types.Transaction, error) {
	return _SimpleAccountFactory.contract.Transact(opts, "createAccount", owner, userId)
}

// CreateAccount is a paid mutator transaction binding the contract method 0x5fbfb9cf.
//
// Solidity: function createAccount(address owner, uint256 userId) returns(address ret)
func (_SimpleAccountFactory *SimpleAccountFactorySession) CreateAccount(owner common.Address, userId *big.Int) (*types.Transaction, error) {
	return _SimpleAccountFactory.Contract.CreateAccount(&_SimpleAccountFactory.TransactOpts, owner, userId)
}

// CreateAccount is a paid mutator transaction binding the contract method 0x5fbfb9cf.
//
// Solidity: function createAccount(address owner, uint256 userId) returns(address ret)
func (_SimpleAccountFactory *SimpleAccountFactoryTransactorSession) CreateAccount(owner common.Address, userId *big.Int) (*types.Transaction, error) {
	return _SimpleAccountFactory.Contract.CreateAccount(&_SimpleAccountFactory.TransactOpts, owner, userId)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_SimpleAccountFactory *SimpleAccountFactoryTransactor) RenounceOwnership(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _SimpleAccountFactory.contract.Transact(opts, "renounceOwnership")
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_SimpleAccountFactory *SimpleAccountFactorySession) RenounceOwnership() (*types.Transaction, error) {
	return _SimpleAccountFactory.Contract.RenounceOwnership(&_SimpleAccountFactory.TransactOpts)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_SimpleAccountFactory *SimpleAccountFactoryTransactorSession) RenounceOwnership() (*types.Transaction, error) {
	return _SimpleAccountFactory.Contract.RenounceOwnership(&_SimpleAccountFactory.TransactOpts)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_SimpleAccountFactory *SimpleAccountFactoryTransactor) TransferOwnership(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _SimpleAccountFactory.contract.Transact(opts, "transferOwnership", newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_SimpleAccountFactory *SimpleAccountFactorySession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _SimpleAccountFactory.Contract.TransferOwnership(&_SimpleAccountFactory.TransactOpts, newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_SimpleAccountFactory *SimpleAccountFactoryTransactorSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _SimpleAccountFactory.Contract.TransferOwnership(&_SimpleAccountFactory.TransactOpts, newOwner)
}

// UpdateBundler is a paid mutator transaction binding the contract method 0xc7217f7f.
//
// Solidity: function updateBundler(address _bundler) returns()
func (_SimpleAccountFactory *SimpleAccountFactoryTransactor) UpdateBundler(opts *bind.TransactOpts, _bundler common.Address) (*types.Transaction, error) {
	return _SimpleAccountFactory.contract.Transact(opts, "updateBundler", _bundler)
}

// UpdateBundler is a paid mutator transaction binding the contract method 0xc7217f7f.
//
// Solidity: function updateBundler(address _bundler) returns()
func (_SimpleAccountFactory *SimpleAccountFactorySession) UpdateBundler(_bundler common.Address) (*types.Transaction, error) {
	return _SimpleAccountFactory.Contract.UpdateBundler(&_SimpleAccountFactory.TransactOpts, _bundler)
}

// UpdateBundler is a paid mutator transaction binding the contract method 0xc7217f7f.
//
// Solidity: function updateBundler(address _bundler) returns()
func (_SimpleAccountFactory *SimpleAccountFactoryTransactorSession) UpdateBundler(_bundler common.Address) (*types.Transaction, error) {
	return _SimpleAccountFactory.Contract.UpdateBundler(&_SimpleAccountFactory.TransactOpts, _bundler)
}

// SimpleAccountFactoryAccountCreatedIterator is returned from FilterAccountCreated and is used to iterate over the raw logs and unpacked data for AccountCreated events raised by the SimpleAccountFactory contract.
type SimpleAccountFactoryAccountCreatedIterator struct {
	Event *SimpleAccountFactoryAccountCreated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *SimpleAccountFactoryAccountCreatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(SimpleAccountFactoryAccountCreated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(SimpleAccountFactoryAccountCreated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *SimpleAccountFactoryAccountCreatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *SimpleAccountFactoryAccountCreatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// SimpleAccountFactoryAccountCreated represents a AccountCreated event raised by the SimpleAccountFactory contract.
type SimpleAccountFactoryAccountCreated struct {
	Account common.Address
	Owner   common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterAccountCreated is a free log retrieval operation binding the contract event 0xac631f3001b55ea1509cf3d7e74898f85392a61a76e8149181ae1259622dabc8.
//
// Solidity: event AccountCreated(address indexed account, address owner)
func (_SimpleAccountFactory *SimpleAccountFactoryFilterer) FilterAccountCreated(opts *bind.FilterOpts, account []common.Address) (*SimpleAccountFactoryAccountCreatedIterator, error) {

	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}

	logs, sub, err := _SimpleAccountFactory.contract.FilterLogs(opts, "AccountCreated", accountRule)
	if err != nil {
		return nil, err
	}
	return &SimpleAccountFactoryAccountCreatedIterator{contract: _SimpleAccountFactory.contract, event: "AccountCreated", logs: logs, sub: sub}, nil
}

// WatchAccountCreated is a free log subscription operation binding the contract event 0xac631f3001b55ea1509cf3d7e74898f85392a61a76e8149181ae1259622dabc8.
//
// Solidity: event AccountCreated(address indexed account, address owner)
func (_SimpleAccountFactory *SimpleAccountFactoryFilterer) WatchAccountCreated(opts *bind.WatchOpts, sink chan<- *SimpleAccountFactoryAccountCreated, account []common.Address) (event.Subscription, error) {

	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}

	logs, sub, err := _SimpleAccountFactory.contract.WatchLogs(opts, "AccountCreated", accountRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(SimpleAccountFactoryAccountCreated)
				if err := _SimpleAccountFactory.contract.UnpackLog(event, "AccountCreated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseAccountCreated is a log parse operation binding the contract event 0xac631f3001b55ea1509cf3d7e74898f85392a61a76e8149181ae1259622dabc8.
//
// Solidity: event AccountCreated(address indexed account, address owner)
func (_SimpleAccountFactory *SimpleAccountFactoryFilterer) ParseAccountCreated(log types.Log) (*SimpleAccountFactoryAccountCreated, error) {
	event := new(SimpleAccountFactoryAccountCreated)
	if err := _SimpleAccountFactory.contract.UnpackLog(event, "AccountCreated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// SimpleAccountFactoryOwnershipTransferredIterator is returned from FilterOwnershipTransferred and is used to iterate over the raw logs and unpacked data for OwnershipTransferred events raised by the SimpleAccountFactory contract.
type SimpleAccountFactoryOwnershipTransferredIterator struct {
	Event *SimpleAccountFactoryOwnershipTransferred // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *SimpleAccountFactoryOwnershipTransferredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(SimpleAccountFactoryOwnershipTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(SimpleAccountFactoryOwnershipTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *SimpleAccountFactoryOwnershipTransferredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *SimpleAccountFactoryOwnershipTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// SimpleAccountFactoryOwnershipTransferred represents a OwnershipTransferred event raised by the SimpleAccountFactory contract.
type SimpleAccountFactoryOwnershipTransferred struct {
	PreviousOwner common.Address
	NewOwner      common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterOwnershipTransferred is a free log retrieval operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_SimpleAccountFactory *SimpleAccountFactoryFilterer) FilterOwnershipTransferred(opts *bind.FilterOpts, previousOwner []common.Address, newOwner []common.Address) (*SimpleAccountFactoryOwnershipTransferredIterator, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _SimpleAccountFactory.contract.FilterLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return &SimpleAccountFactoryOwnershipTransferredIterator{contract: _SimpleAccountFactory.contract, event: "OwnershipTransferred", logs: logs, sub: sub}, nil
}

// WatchOwnershipTransferred is a free log subscription operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_SimpleAccountFactory *SimpleAccountFactoryFilterer) WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *SimpleAccountFactoryOwnershipTransferred, previousOwner []common.Address, newOwner []common.Address) (event.Subscription, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _SimpleAccountFactory.contract.WatchLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(SimpleAccountFactoryOwnershipTransferred)
				if err := _SimpleAccountFactory.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOwnershipTransferred is a log parse operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_SimpleAccountFactory *SimpleAccountFactoryFilterer) ParseOwnershipTransferred(log types.Log) (*SimpleAccountFactoryOwnershipTransferred, error) {
	event := new(SimpleAccountFactoryOwnershipTransferred)
	if err := _SimpleAccountFactory.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
