// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package SimpleAccountFactory

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
	_ = abi.ConvertType
)

// ZKVizingAccountFactoryUserZKVizingAccountInfo is an auto generated low-level Go binding around an user-defined struct.
type ZKVizingAccountFactoryUserZKVizingAccountInfo struct {
	UserId          *big.Int
	State           [1]byte
	ZkVizingAccount common.Address
}

// SimpleAccountFactoryMetaData contains all meta data concerning the SimpleAccountFactory contract.
var SimpleAccountFactoryMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"contractIEntryPoint\",\"name\":\"_entryPoint\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"AccountCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"UserId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"accountImplementation\",\"outputs\":[{\"internalType\":\"contractZKVizingAccount\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"createAccount\",\"outputs\":[{\"internalType\":\"contractZKVizingAccount\",\"name\":\"ret\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_userId\",\"type\":\"uint256\"}],\"name\":\"getAccountAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"getUserAccountInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"userId\",\"type\":\"uint256\"},{\"internalType\":\"bytes1\",\"name\":\"state\",\"type\":\"bytes1\"},{\"internalType\":\"address\",\"name\":\"zkVizingAccount\",\"type\":\"address\"}],\"internalType\":\"structZKVizingAccountFactory.UserZKVizingAccountInfo\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_bundler\",\"type\":\"address\"}],\"name\":\"updateBundler\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
	Bin: "0x60a060405234801562000010575f80fd5b50604051620051c6380380620051c6833981810160405281019062000036919062000273565b335f73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603620000aa575f6040517f1e4fbdf7000000000000000000000000000000000000000000000000000000008152600401620000a19190620002b4565b60405180910390fd5b620000bb816200012c60201b60201c565b5080604051620000cb90620001ed565b620000d7919062000336565b604051809103905ff080158015620000f1573d5f803e3d5ffd5b5073ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff16815250505062000351565b5f805f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050815f806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b6137c38062001a0383390190565b5f80fd5b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f6200022a82620001ff565b9050919050565b5f6200023d826200021e565b9050919050565b6200024f8162000231565b81146200025a575f80fd5b50565b5f815190506200026d8162000244565b92915050565b5f602082840312156200028b576200028a620001fb565b5b5f6200029a848285016200025d565b91505092915050565b620002ae816200021e565b82525050565b5f602082019050620002c95f830184620002a3565b92915050565b5f819050919050565b5f620002f8620002f2620002ec84620001ff565b620002cf565b620001ff565b9050919050565b5f6200030b82620002d8565b9050919050565b5f6200031e82620002ff565b9050919050565b620003308162000312565b82525050565b5f6020820190506200034b5f83018462000325565b92915050565b60805161168b620003785f395f818161033e015281816104100152610588015261168b5ff3fe608060405234801562000010575f80fd5b50600436106200009e575f3560e01c8063715018a6116200006d578063715018a614620001525780638da5cb5b146200015e5780639859387b1462000180578063c7217f7f14620001b6578063f2fde38b14620001d6576200009e565b8063026c3bfe14620000a25780630cc0622114620000c45780630d253d7614620000fa57806311464fbe1462000130575b5f80fd5b620000ac620001f6565b604051620000bb919062000af2565b60405180910390f35b620000e26004803603810190620000dc919062000b72565b620001fc565b604051620000f1919062000c46565b60405180910390f35b62000118600480360381019062000112919062000c90565b6200030e565b60405162000127919062000ce6565b60405180910390f35b6200013a6200040e565b60405162000149919062000d68565b60405180910390f35b6200015c62000432565b005b6200016862000449565b60405162000177919062000ce6565b60405180910390f35b6200019e600480360381019062000198919062000b72565b62000470565b604051620001ad919062000d68565b60405180910390f35b620001d46004803603810190620001ce919062000b72565b620007ee565b005b620001f46004803603810190620001ee919062000b72565b6200083b565b005b60015481565b6200020662000a74565b60035f8373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f206040518060600160405290815f8201548152602001600182015f9054906101000a900460f81b7effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff191681526020016001820160019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815250509050919050565b5f62000406825f1b60405180602001620003289062000aca565b6020820181038252601f19601f820116604052507f00000000000000000000000000000000000000000000000000000000000000008660405160240162000370919062000ce6565b60405160208183030381529060405263c4d66de860e01b6020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050604051602001620003c892919062000e17565b604051602081830303815290604052604051602001620003ea92919062000e89565b60405160208183030381529060405280519060200120620008c6565b905092915050565b7f000000000000000000000000000000000000000000000000000000000000000081565b6200043c620008dc565b620004475f6200096c565b565b5f805f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b5f60025f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614620004ca575f80fd5b600160f81b60035f8473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f206001015f9054906101000a900460f81b7effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff19160362000581576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620005789062000f0e565b60405180910390fd5b6001545f1b7f000000000000000000000000000000000000000000000000000000000000000083604051602401620005ba919062000ce6565b60405160208183030381529060405263c4d66de860e01b6020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506040516200060d9062000aca565b6200061a92919062000e17565b8190604051809103905ff590508015801562000638573d5f803e3d5ffd5b5090505f8190505f73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff160362000677575f80fd5b60405180606001604052806001548152602001600160f81b7effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff191681526020018273ffffffffffffffffffffffffffffffffffffffff1681525060035f8573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f820151815f01556020820151816001015f6101000a81548160ff021916908360f81c021790555060408201518160010160016101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555090505060015f815480929190620007939062000f5b565b91905055508073ffffffffffffffffffffffffffffffffffffffff167fac631f3001b55ea1509cf3d7e74898f85392a61a76e8149181ae1259622dabc884604051620007e0919062000ce6565b60405180910390a250919050565b620007f8620008dc565b8060025f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b62000845620008dc565b5f73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603620008b8575f6040517f1e4fbdf7000000000000000000000000000000000000000000000000000000008152600401620008af919062000ce6565b60405180910390fd5b620008c3816200096c565b50565b5f620008d483833062000a2d565b905092915050565b620008e662000a6d565b73ffffffffffffffffffffffffffffffffffffffff166200090662000449565b73ffffffffffffffffffffffffffffffffffffffff16146200096a576200092c62000a6d565b6040517f118cdaa700000000000000000000000000000000000000000000000000000000815260040162000961919062000ce6565b60405180910390fd5b565b5f805f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050815f806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b5f604051836040820152846020820152828152600b810160ff815373ffffffffffffffffffffffffffffffffffffffff6055822016925050509392505050565b5f33905090565b60405180606001604052805f81526020015f7effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff191681526020015f73ffffffffffffffffffffffffffffffffffffffff1681525090565b6106ae8062000fa883390190565b5f819050919050565b62000aec8162000ad8565b82525050565b5f60208201905062000b075f83018462000ae1565b92915050565b5f80fd5b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f62000b3c8262000b11565b9050919050565b62000b4e8162000b30565b811462000b59575f80fd5b50565b5f8135905062000b6c8162000b43565b92915050565b5f6020828403121562000b8a5762000b8962000b0d565b5b5f62000b998482850162000b5c565b91505092915050565b62000bad8162000ad8565b82525050565b5f7fff0000000000000000000000000000000000000000000000000000000000000082169050919050565b62000be98162000bb3565b82525050565b62000bfa8162000b30565b82525050565b606082015f82015162000c165f85018262000ba2565b50602082015162000c2b602085018262000bde565b50604082015162000c40604085018262000bef565b50505050565b5f60608201905062000c5b5f83018462000c00565b92915050565b62000c6c8162000ad8565b811462000c77575f80fd5b50565b5f8135905062000c8a8162000c61565b92915050565b5f806040838503121562000ca95762000ca862000b0d565b5b5f62000cb88582860162000b5c565b925050602062000ccb8582860162000c7a565b9150509250929050565b62000ce08162000b30565b82525050565b5f60208201905062000cfb5f83018462000cd5565b92915050565b5f819050919050565b5f62000d2a62000d2462000d1e8462000b11565b62000d01565b62000b11565b9050919050565b5f62000d3d8262000d0a565b9050919050565b5f62000d508262000d31565b9050919050565b62000d628162000d44565b82525050565b5f60208201905062000d7d5f83018462000d57565b92915050565b5f81519050919050565b5f82825260208201905092915050565b5f5b8381101562000dbc57808201518184015260208101905062000d9f565b5f8484015250505050565b5f601f19601f8301169050919050565b5f62000de38262000d83565b62000def818562000d8d565b935062000e0181856020860162000d9d565b62000e0c8162000dc7565b840191505092915050565b5f60408201905062000e2c5f83018562000cd5565b818103602083015262000e40818462000dd7565b90509392505050565b5f81905092915050565b5f62000e5f8262000d83565b62000e6b818562000e49565b935062000e7d81856020860162000d9d565b80840191505092915050565b5f62000e96828562000e53565b915062000ea4828462000e53565b91508190509392505050565b5f82825260208201905092915050565b7f416c7265616479206372656174650000000000000000000000000000000000005f82015250565b5f62000ef6600e8362000eb0565b915062000f038262000ec0565b602082019050919050565b5f6020820190508181035f83015262000f278162000ee8565b9050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffd5b5f62000f678262000ad8565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff820362000f9c5762000f9b62000f2e565b5b60018201905091905056fe60806040526040516106ae3803806106ae833981810160405281019061002591906104f2565b610035828261003c60201b60201c565b50506105ce565b61004b826100c060201b60201c565b8173ffffffffffffffffffffffffffffffffffffffff167fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b60405160405180910390a25f815111156100ad576100a7828261018f60201b60201c565b506100bc565b6100bb61021560201b60201c565b5b5050565b5f8173ffffffffffffffffffffffffffffffffffffffff163b0361011b57806040517f4c9c8ce3000000000000000000000000000000000000000000000000000000008152600401610112919061055b565b60405180910390fd5b8061014d7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc5f1b61025160201b60201c565b5f015f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60605f808473ffffffffffffffffffffffffffffffffffffffff16846040516101b891906105b8565b5f60405180830381855af49150503d805f81146101f0576040519150601f19603f3d011682016040523d82523d5f602084013e6101f5565b606091505b509150915061020b85838361025a60201b60201c565b9250505092915050565b5f34111561024f576040517fb398979f00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b565b5f819050919050565b60608261027557610270826102ed60201b60201c565b6102e5565b5f825114801561029b57505f8473ffffffffffffffffffffffffffffffffffffffff163b145b156102dd57836040517f9996b3150000000000000000000000000000000000000000000000000000000081526004016102d4919061055b565b60405180910390fd5b8190506102e6565b5b9392505050565b5f815111156102ff5780518082602001fd5b6040517fd6bda27500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5f604051905090565b5f80fd5b5f80fd5b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f61036b82610342565b9050919050565b61037b81610361565b8114610385575f80fd5b50565b5f8151905061039681610372565b92915050565b5f80fd5b5f80fd5b5f601f19601f8301169050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b6103ea826103a4565b810181811067ffffffffffffffff82111715610409576104086103b4565b5b80604052505050565b5f61041b610331565b905061042782826103e1565b919050565b5f67ffffffffffffffff821115610446576104456103b4565b5b61044f826103a4565b9050602081019050919050565b5f5b8381101561047957808201518184015260208101905061045e565b5f8484015250505050565b5f6104966104918461042c565b610412565b9050828152602081018484840111156104b2576104b16103a0565b5b6104bd84828561045c565b509392505050565b5f82601f8301126104d9576104d861039c565b5b81516104e9848260208601610484565b91505092915050565b5f80604083850312156105085761050761033a565b5b5f61051585828601610388565b925050602083015167ffffffffffffffff8111156105365761053561033e565b5b610542858286016104c5565b9150509250929050565b61055581610361565b82525050565b5f60208201905061056e5f83018461054c565b92915050565b5f81519050919050565b5f81905092915050565b5f61059282610574565b61059c818561057e565b93506105ac81856020860161045c565b80840191505092915050565b5f6105c38284610588565b915081905092915050565b60d4806105da5f395ff3fe6080604052600a600c565b005b60186014601a565b6026565b565b5f60216044565b905090565b365f80375f80365f845af43d5f803e805f81146040573d5ff35b3d5ffd5b5f606e7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc5f1b6095565b5f015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b5f81905091905056fea26469706673582212200a7777ab88f80ef738f4a6f4034876585cff205c0166d8cdc68d641985a957f664736f6c63430008180033a26469706673582212204d45eeae2db232dc3b4013cd9f27f68e5d7052ecde2677a8b216a6c9528c138464736f6c6343000818003360c06040523073ffffffffffffffffffffffffffffffffffffffff1660809073ffffffffffffffffffffffffffffffffffffffff1681525034801562000043575f80fd5b50604051620037c3380380620037c3833981810160405281019062000069919062000257565b8073ffffffffffffffffffffffffffffffffffffffff1660a08173ffffffffffffffffffffffffffffffffffffffff1681525050620000ad620000b460201b60201c565b50620002c6565b5f620000c5620001b860201b60201c565b9050805f0160089054906101000a900460ff161562000110576040517ff92ee8a900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b67ffffffffffffffff8016815f015f9054906101000a900467ffffffffffffffff1667ffffffffffffffff1614620001b55767ffffffffffffffff815f015f6101000a81548167ffffffffffffffff021916908367ffffffffffffffff1602179055507fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d267ffffffffffffffff604051620001ac9190620002ab565b60405180910390a15b50565b5f7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00905090565b5f80fd5b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f6200020e82620001e3565b9050919050565b5f620002218262000202565b9050919050565b620002338162000215565b81146200023e575f80fd5b50565b5f81519050620002518162000228565b92915050565b5f602082840312156200026f576200026e620001df565b5b5f6200027e8482850162000241565b91505092915050565b5f67ffffffffffffffff82169050919050565b620002a58162000287565b82525050565b5f602082019050620002c05f8301846200029a565b92915050565b60805160a0516134c6620002fd5f395f8181610cfe015261198601525f8181611578015281816115cd015261178701526134c65ff3fe608060405260043610610122575f3560e01c8063916575441161009f578063bc197c8111610063578063bc197c81146103a5578063c4d66de8146103e1578063f23a6e6114610409578063fa28b48114610445578063fc7092661461046157610129565b806391657544146102d95780639ea1e81014610301578063ad3cb1cc14610329578063b0d691fe14610353578063b61d27f61461037d57610129565b80634f1ef286116100e65780634f1ef2861461021157806352d1902d1461022d5780635c51ffd1146102575780638799aeea146102935780638da5cb5b146102af57610129565b806301ffc9a71461012d578063150b7a02146101695780632e1a7d4d146101a557806343628421146101cd57806347e1da2a146101e957610129565b3661012957005b5f80fd5b348015610138575f80fd5b50610153600480360381019061014e9190611f76565b61048b565b6040516101609190611fbb565b60405180910390f35b348015610174575f80fd5b5061018f600480360381019061018a91906120c2565b6105c4565b60405161019c9190612155565b60405180910390f35b3480156101b0575f80fd5b506101cb60048036038101906101c6919061216e565b6105d8565b005b6101e760048036038101906101e2919061216e565b610636565b005b3480156101f4575f80fd5b5061020f600480360381019061020a9190612298565b6106aa565b005b61022b60048036038101906102269190612480565b6108af565b005b348015610238575f80fd5b506102416108ce565b60405161024e91906124f2565b60405180910390f35b348015610262575f80fd5b5061027d6004803603810190610278919061250b565b6108ff565b60405161028a9190611fbb565b60405180910390f35b6102ad60048036038101906102a891906125ab565b610918565b005b3480156102ba575f80fd5b506102c36109c3565b6040516102d0919061267e565b60405180910390f35b3480156102e4575f80fd5b506102ff60048036038101906102fa919061216e565b6109e6565b005b34801561030c575f80fd5b5061032760048036038101906103229190612697565b610a5e565b005b348015610334575f80fd5b5061033d610cc2565b60405161034a91906127ea565b60405180910390f35b34801561035e575f80fd5b50610367610cfb565b6040516103749190612865565b60405180910390f35b348015610388575f80fd5b506103a3600480360381019061039e919061287e565b610d22565b005b3480156103b0575f80fd5b506103cb60048036038101906103c691906128ef565b610d7e565b6040516103d89190612155565b60405180910390f35b3480156103ec575f80fd5b506104076004803603810190610402919061250b565b610d95565b005b348015610414575f80fd5b5061042f600480360381019061042a91906129c6565b610f16565b60405161043c9190612155565b60405180910390f35b61045f600480360381019061045a9190612a5c565b610f2b565b005b34801561046c575f80fd5b506104756112e0565b6040516104829190612b1c565b60405180910390f35b5f7f150b7a02000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916148061055557507f4e2312e0000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b806105bd57507f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b9050919050565b5f63150b7a0260e01b905095945050505050565b6105e0611365565b4781111561061a576040517ff4d678b800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b610633338260405180602001604052805f81525061142a565b50565b61063e610cfb565b73ffffffffffffffffffffffffffffffffffffffff16639abe79033434846040518463ffffffff1660e01b8152600401610679929190612b35565b5f604051808303818588803b158015610690575f80fd5b505af11580156106a2573d5f803e3d5ffd5b505050505050565b6106b26114aa565b81819050868690501480156106d957505f8484905014806106d857508181905084849050145b5b610718576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161070f90612ba6565b60405180910390fd5b5f84849050036107da575f5b868690508110156107d4576107c787878381811061074557610744612bc4565b5b905060200201602081019061075a919061250b565b5f85858581811061076e5761076d612bc4565b5b90506020028101906107809190612bfd565b8080601f0160208091040260200160405190810160405280939291908181526020018383808284375f81840152601f19601f8201169050808301925050505050505061142a565b8080600101915050610724565b506108a7565b5f5b868690508110156108a5576108988787838181106107fd576107fc612bc4565b5b9050602002016020810190610812919061250b565b86868481811061082557610824612bc4565b5b9050602002013585858581811061083f5761083e612bc4565b5b90506020028101906108519190612bfd565b8080601f0160208091040260200160405190810160405280939291908181526020018383808284375f81840152601f19601f8201169050808301925050505050505061142a565b80806001019150506107dc565b505b505050505050565b6108b7611576565b6108c08261165c565b6108ca8282611667565b5050565b5f6108d7611785565b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc5f1b905090565b5f61090861180c565b61091182611883565b9050919050565b85886109249190612c8c565b34101561092f575f80fd5b5f87146109b8573073ffffffffffffffffffffffffffffffffffffffff1663fa28b481878961095e9190612c8c565b8b8a8a8a8a8a8a8a6040518a63ffffffff1660e01b8152600401610989989796959493929190612cdd565b5f604051808303818588803b1580156109a0575f80fd5b505af11580156109b2573d5f803e3d5ffd5b50505050505b505050505050505050565b5f8054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6109ee611365565b6109f6610cfb565b73ffffffffffffffffffffffffffffffffffffffff166339875d1a826040518263ffffffff1660e01b8152600401610a2e9190612b1c565b5f604051808303815f87803b158015610a45575f80fd5b505af1158015610a57573d5f803e3d5ffd5b5050505050565b610a66611365565b610a6e611d0e565b610a76611d34565b89815f01818152505088816020019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff168152505060fe82602001515f019060ff16908160ff16815250508682602001516020019062ffffff16908162ffffff16815250508582602001516040019067ffffffffffffffff16908167ffffffffffffffff16815250508a82602001516060019067ffffffffffffffff16908167ffffffffffffffff16815250508482602001516080019067ffffffffffffffff16908167ffffffffffffffff168152505083826020015160a0019067ffffffffffffffff16908167ffffffffffffffff1681525050610b7f610cfb565b73ffffffffffffffffffffffffffffffffffffffff166342f1ec698360200151606001516040518263ffffffff1660e01b8152600401610bbf9190612d59565b6040805180830381865afa158015610bd9573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610bfd9190612dd7565b60200151826020015160c0019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff168152505082826020015160e0019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff168152505087826020015161010001818152505080604051602001610c989190612e4d565b60405160208183030381529060405282602001516101600181905250505050505050505050505050565b6040518060400160405280600581526020017f352e302e3000000000000000000000000000000000000000000000000000000081525081565b5f7f0000000000000000000000000000000000000000000000000000000000000000905090565b610d2a6114aa565b610d78848484848080601f0160208091040260200160405190810160405280939291908181526020018383808284375f81840152601f19601f8201169050808301925050505050505061142a565b50505050565b5f63bc197c8160e01b905098975050505050505050565b5f610d9e6118e8565b90505f815f0160089054906101000a900460ff161590505f825f015f9054906101000a900467ffffffffffffffff1690505f808267ffffffffffffffff16148015610de65750825b90505f60018367ffffffffffffffff16148015610e1957505f3073ffffffffffffffffffffffffffffffffffffffff163b145b905081158015610e27575080155b15610e5e576040517ff92ee8a900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001855f015f6101000a81548167ffffffffffffffff021916908367ffffffffffffffff1602179055508315610eab576001855f0160086101000a81548160ff0219169083151502179055505b610eb48661190f565b8315610f0e575f855f0160086101000a81548160ff0219169083151502179055507fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d26001604051610f059190612e9f565b60405180910390a15b505050505050565b5f63f23a6e6160e01b90509695505050505050565b8587610f379190612c8c565b341015610f42575f80fd5b5f610f4b610cfb565b73ffffffffffffffffffffffffffffffffffffffff1663bb8ce526308a8c604051602401610f7b93929190612eb8565b604051602081830303815290604052915060e01b6020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505090508787610fcb9190612c8c565b9650610fd5611d0e565b610fdd611d34565b89815f01818152505060ff82602001515f019060ff16908160ff16815250508782602001516020019062ffffff16908162ffffff16815250508682602001516040019067ffffffffffffffff16908167ffffffffffffffff1681525050611042610cfb565b73ffffffffffffffffffffffffffffffffffffffff1663750c67ba6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561108a573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906110ae9190612f01565b82602001516060019067ffffffffffffffff16908167ffffffffffffffff16815250508582602001516080019067ffffffffffffffff16908167ffffffffffffffff168152505084826020015160a0019067ffffffffffffffff16908167ffffffffffffffff1681525050611121610cfb565b73ffffffffffffffffffffffffffffffffffffffff166342f1ec698360200151606001516040518263ffffffff1660e01b81526004016111619190612d59565b6040805180830381865afa15801561117b573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061119f9190612dd7565b60200151826020015160c0019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff168152505083826020015160e0019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250508882602001516101000181815250508282602001516101400181905250806040516020016112489190612e4d565b6040516020818303038152906040528260200151610160018190525061126c610cfb565b73ffffffffffffffffffffffffffffffffffffffff166385b3d56a34846040518363ffffffff1660e01b81526004016112a59190613254565b5f604051808303818588803b1580156112bc575f80fd5b505af11580156112ce573d5f803e3d5ffd5b50505050505050505050505050505050565b5f6112e9610cfb565b73ffffffffffffffffffffffffffffffffffffffff1663653e75ec306040518263ffffffff1660e01b8152600401611321919061267e565b602060405180830381865afa15801561133c573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906113609190613288565b905090565b5f8054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614806113e957503073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b611428576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161141f906132fd565b60405180910390fd5b565b5f808473ffffffffffffffffffffffffffffffffffffffff1684846040516114529190613355565b5f6040518083038185875af1925050503d805f811461148c576040519150601f19603f3d011682016040523d82523d5f602084013e611491565b606091505b5091509150816114a357805160208201fd5b5050505050565b6114b2610cfb565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16148061153557505f8054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b611574576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161156b906133b5565b60405180910390fd5b565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163073ffffffffffffffffffffffffffffffffffffffff16148061162357507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1661160a6119ea565b73ffffffffffffffffffffffffffffffffffffffff1614155b1561165a576040517fe07c8dba00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b565b611664611365565b50565b8173ffffffffffffffffffffffffffffffffffffffff166352d1902d6040518163ffffffff1660e01b8152600401602060405180830381865afa9250505080156116cf57506040513d601f19601f820116820180604052508101906116cc91906133fd565b60015b61171057816040517f4c9c8ce3000000000000000000000000000000000000000000000000000000008152600401611707919061267e565b60405180910390fd5b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc5f1b811461177657806040517faa1d49a400000000000000000000000000000000000000000000000000000000815260040161176d91906124f2565b60405180910390fd5b6117808383611a3d565b505050565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163073ffffffffffffffffffffffffffffffffffffffff161461180a576040517fe07c8dba00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b565b611814610cfb565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614611881576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161187890613472565b60405180910390fd5b565b5f8173ffffffffffffffffffffffffffffffffffffffff165f8054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16146118de575f90506118e3565b600190505b919050565b5f7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00905090565b805f806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505f8054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff167ff75ce79a4abcc8ed48f3b3544cd773dd667599027b50a42ff4bbf68f1a65e7b060405160405180910390a350565b5f611a167f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc5f1b611aaf565b5f015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b611a4682611ab8565b8173ffffffffffffffffffffffffffffffffffffffff167fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b60405160405180910390a25f81511115611aa257611a9c8282611b81565b50611aab565b611aaa611c01565b5b5050565b5f819050919050565b5f8173ffffffffffffffffffffffffffffffffffffffff163b03611b1357806040517f4c9c8ce3000000000000000000000000000000000000000000000000000000008152600401611b0a919061267e565b60405180910390fd5b80611b3f7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc5f1b611aaf565b5f015f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60605f808473ffffffffffffffffffffffffffffffffffffffff1684604051611baa9190613355565b5f60405180830381855af49150503d805f8114611be2576040519150601f19603f3d011682016040523d82523d5f602084013e611be7565b606091505b5091509150611bf7858383611c3d565b9250505092915050565b5f341115611c3b576040517fb398979f00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b565b606082611c5257611c4d82611cca565b611cc2565b5f8251148015611c7857505f8473ffffffffffffffffffffffffffffffffffffffff163b145b15611cba57836040517f9996b315000000000000000000000000000000000000000000000000000000008152600401611cb1919061267e565b60405180910390fd5b819050611cc3565b5b9392505050565b5f81511115611cdc5780518082602001fd5b6040517fd6bda27500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6040518060400160405280611d21611d62565b8152602001611d2e611dd8565b81525090565b60405180604001604052805f81526020015f73ffffffffffffffffffffffffffffffffffffffff1681525090565b6040518060e001604052805f60ff1681526020015f60ff1681526020015f81526020015f73ffffffffffffffffffffffffffffffffffffffff1681526020015f73ffffffffffffffffffffffffffffffffffffffff168152602001611dc5611e8c565b8152602001611dd2611e8c565b81525090565b6040518061018001604052805f60ff1681526020015f62ffffff1681526020015f67ffffffffffffffff1681526020015f67ffffffffffffffff1681526020015f67ffffffffffffffff1681526020015f67ffffffffffffffff1681526020015f73ffffffffffffffffffffffffffffffffffffffff1681526020015f73ffffffffffffffffffffffffffffffffffffffff1681526020015f81526020016060815260200160608152602001606081525090565b6040518061010001604052805f67ffffffffffffffff1681526020015f67ffffffffffffffff1681526020015f67ffffffffffffffff1681526020015f67ffffffffffffffff1681526020015f67ffffffffffffffff1681526020015f67ffffffffffffffff1681526020015f67ffffffffffffffff168152602001606081525090565b5f604051905090565b5f80fd5b5f80fd5b5f7fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b611f5581611f21565b8114611f5f575f80fd5b50565b5f81359050611f7081611f4c565b92915050565b5f60208284031215611f8b57611f8a611f19565b5b5f611f9884828501611f62565b91505092915050565b5f8115159050919050565b611fb581611fa1565b82525050565b5f602082019050611fce5f830184611fac565b92915050565b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f611ffd82611fd4565b9050919050565b61200d81611ff3565b8114612017575f80fd5b50565b5f8135905061202881612004565b92915050565b5f819050919050565b6120408161202e565b811461204a575f80fd5b50565b5f8135905061205b81612037565b92915050565b5f80fd5b5f80fd5b5f80fd5b5f8083601f84011261208257612081612061565b5b8235905067ffffffffffffffff81111561209f5761209e612065565b5b6020830191508360018202830111156120bb576120ba612069565b5b9250929050565b5f805f805f608086880312156120db576120da611f19565b5b5f6120e88882890161201a565b95505060206120f98882890161201a565b945050604061210a8882890161204d565b935050606086013567ffffffffffffffff81111561212b5761212a611f1d565b5b6121378882890161206d565b92509250509295509295909350565b61214f81611f21565b82525050565b5f6020820190506121685f830184612146565b92915050565b5f6020828403121561218357612182611f19565b5b5f6121908482850161204d565b91505092915050565b5f8083601f8401126121ae576121ad612061565b5b8235905067ffffffffffffffff8111156121cb576121ca612065565b5b6020830191508360208202830111156121e7576121e6612069565b5b9250929050565b5f8083601f84011261220357612202612061565b5b8235905067ffffffffffffffff8111156122205761221f612065565b5b60208301915083602082028301111561223c5761223b612069565b5b9250929050565b5f8083601f84011261225857612257612061565b5b8235905067ffffffffffffffff81111561227557612274612065565b5b60208301915083602082028301111561229157612290612069565b5b9250929050565b5f805f805f80606087890312156122b2576122b1611f19565b5b5f87013567ffffffffffffffff8111156122cf576122ce611f1d565b5b6122db89828a01612199565b9650965050602087013567ffffffffffffffff8111156122fe576122fd611f1d565b5b61230a89828a016121ee565b9450945050604087013567ffffffffffffffff81111561232d5761232c611f1d565b5b61233989828a01612243565b92509250509295509295509295565b5f80fd5b5f601f19601f8301169050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b6123928261234c565b810181811067ffffffffffffffff821117156123b1576123b061235c565b5b80604052505050565b5f6123c3611f10565b90506123cf8282612389565b919050565b5f67ffffffffffffffff8211156123ee576123ed61235c565b5b6123f78261234c565b9050602081019050919050565b828183375f83830152505050565b5f61242461241f846123d4565b6123ba565b9050828152602081018484840111156124405761243f612348565b5b61244b848285612404565b509392505050565b5f82601f83011261246757612466612061565b5b8135612477848260208601612412565b91505092915050565b5f806040838503121561249657612495611f19565b5b5f6124a38582860161201a565b925050602083013567ffffffffffffffff8111156124c4576124c3611f1d565b5b6124d085828601612453565b9150509250929050565b5f819050919050565b6124ec816124da565b82525050565b5f6020820190506125055f8301846124e3565b92915050565b5f602082840312156125205761251f611f19565b5b5f61252d8482850161201a565b91505092915050565b5f62ffffff82169050919050565b61254d81612536565b8114612557575f80fd5b50565b5f8135905061256881612544565b92915050565b5f67ffffffffffffffff82169050919050565b61258a8161256e565b8114612594575f80fd5b50565b5f813590506125a581612581565b92915050565b5f805f805f805f805f6101208a8c0312156125c9576125c8611f19565b5b5f6125d68c828d0161204d565b99505060206125e78c828d0161204d565b98505060406125f88c828d0161204d565b97505060606126098c828d0161204d565b965050608061261a8c828d0161255a565b95505060a061262b8c828d01612597565b94505060c061263c8c828d01612597565b93505060e061264d8c828d01612597565b92505061010061265f8c828d0161201a565b9150509295985092959850929598565b61267881611ff3565b82525050565b5f6020820190506126915f83018461266f565b92915050565b5f805f805f805f805f806101408b8d0312156126b6576126b5611f19565b5b5f6126c38d828e0161204d565b9a505060206126d48d828e01612597565b99505060406126e58d828e0161204d565b98505060606126f68d828e0161201a565b97505060806127078d828e0161204d565b96505060a06127188d828e0161255a565b95505060c06127298d828e01612597565b94505060e061273a8d828e01612597565b93505061010061274c8d828e01612597565b92505061012061275e8d828e0161201a565b9150509295989b9194979a5092959850565b5f81519050919050565b5f82825260208201905092915050565b5f5b838110156127a757808201518184015260208101905061278c565b5f8484015250505050565b5f6127bc82612770565b6127c6818561277a565b93506127d681856020860161278a565b6127df8161234c565b840191505092915050565b5f6020820190508181035f83015261280281846127b2565b905092915050565b5f819050919050565b5f61282d61282861282384611fd4565b61280a565b611fd4565b9050919050565b5f61283e82612813565b9050919050565b5f61284f82612834565b9050919050565b61285f81612845565b82525050565b5f6020820190506128785f830184612856565b92915050565b5f805f806060858703121561289657612895611f19565b5b5f6128a38782880161201a565b94505060206128b48782880161204d565b935050604085013567ffffffffffffffff8111156128d5576128d4611f1d565b5b6128e18782880161206d565b925092505092959194509250565b5f805f805f805f8060a0898b03121561290b5761290a611f19565b5b5f6129188b828c0161201a565b98505060206129298b828c0161201a565b975050604089013567ffffffffffffffff81111561294a57612949611f1d565b5b6129568b828c016121ee565b9650965050606089013567ffffffffffffffff81111561297957612978611f1d565b5b6129858b828c016121ee565b9450945050608089013567ffffffffffffffff8111156129a8576129a7611f1d565b5b6129b48b828c0161206d565b92509250509295985092959890939650565b5f805f805f8060a087890312156129e0576129df611f19565b5b5f6129ed89828a0161201a565b96505060206129fe89828a0161201a565b9550506040612a0f89828a0161204d565b9450506060612a2089828a0161204d565b935050608087013567ffffffffffffffff811115612a4157612a40611f1d565b5b612a4d89828a0161206d565b92509250509295509295509295565b5f805f805f805f80610100898b031215612a7957612a78611f19565b5b5f612a868b828c0161204d565b9850506020612a978b828c0161204d565b9750506040612aa88b828c0161204d565b9650506060612ab98b828c0161255a565b9550506080612aca8b828c01612597565b94505060a0612adb8b828c01612597565b93505060c0612aec8b828c01612597565b92505060e0612afd8b828c0161201a565b9150509295985092959890939650565b612b168161202e565b82525050565b5f602082019050612b2f5f830184612b0d565b92915050565b5f604082019050612b485f830185612b0d565b612b556020830184612b0d565b9392505050565b7f77726f6e67206172726179206c656e67746873000000000000000000000000005f82015250565b5f612b9060138361277a565b9150612b9b82612b5c565b602082019050919050565b5f6020820190508181035f830152612bbd81612b84565b9050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52603260045260245ffd5b5f80fd5b5f80fd5b5f80fd5b5f8083356001602003843603038112612c1957612c18612bf1565b5b80840192508235915067ffffffffffffffff821115612c3b57612c3a612bf5565b5b602083019250600182023603831315612c5757612c56612bf9565b5b509250929050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffd5b5f612c968261202e565b9150612ca18361202e565b9250828201905080821115612cb957612cb8612c5f565b5b92915050565b612cc881612536565b82525050565b612cd78161256e565b82525050565b5f61010082019050612cf15f83018b612b0d565b612cfe602083018a612b0d565b612d0b6040830189612b0d565b612d186060830188612cbf565b612d256080830187612cce565b612d3260a0830186612cce565b612d3f60c0830185612cce565b612d4c60e083018461266f565b9998505050505050505050565b5f602082019050612d6c5f830184612cce565b92915050565b5f80fd5b5f81519050612d8481612004565b92915050565b5f60408284031215612d9f57612d9e612d72565b5b612da960406123ba565b90505f612db884828501612d76565b5f830152506020612dcb84828501612d76565b60208301525092915050565b5f60408284031215612dec57612deb611f19565b5b5f612df984828501612d8a565b91505092915050565b612e0b8161202e565b82525050565b612e1a81611ff3565b82525050565b604082015f820151612e345f850182612e02565b506020820151612e476020850182612e11565b50505050565b5f604082019050612e605f830184612e20565b92915050565b5f819050919050565b5f612e89612e84612e7f84612e66565b61280a565b61256e565b9050919050565b612e9981612e6f565b82525050565b5f602082019050612eb25f830184612e90565b92915050565b5f606082019050612ecb5f83018661266f565b612ed86020830185612b0d565b612ee56040830184612b0d565b949350505050565b5f81519050612efb81612581565b92915050565b5f60208284031215612f1657612f15611f19565b5b5f612f2384828501612eed565b91505092915050565b5f60ff82169050919050565b612f4181612f2c565b82525050565b612f508161256e565b82525050565b5f81519050919050565b5f82825260208201905092915050565b5f612f7a82612f56565b612f848185612f60565b9350612f9481856020860161278a565b612f9d8161234c565b840191505092915050565b5f61010083015f830151612fbe5f860182612f47565b506020830151612fd16020860182612f47565b506040830151612fe46040860182612f47565b506060830151612ff76060860182612f47565b50608083015161300a6080860182612f47565b5060a083015161301d60a0860182612f47565b5060c083015161303060c0860182612f47565b5060e083015184820360e08601526130488282612f70565b9150508091505092915050565b5f60e083015f83015161306a5f860182612f38565b50602083015161307d6020860182612f38565b5060408301516130906040860182612e02565b5060608301516130a36060860182612e11565b5060808301516130b66080860182612e11565b5060a083015184820360a08601526130ce8282612fa8565b91505060c083015184820360c08601526130e88282612fa8565b9150508091505092915050565b6130fe81612536565b82525050565b5f61018083015f83015161311a5f860182612f38565b50602083015161312d60208601826130f5565b5060408301516131406040860182612f47565b5060608301516131536060860182612f47565b5060808301516131666080860182612f47565b5060a083015161317960a0860182612f47565b5060c083015161318c60c0860182612e11565b5060e083015161319f60e0860182612e11565b506101008301516131b4610100860182612e02565b506101208301518482036101208601526131ce8282612f70565b9150506101408301518482036101408601526131ea8282612f70565b9150506101608301518482036101608601526132068282612f70565b9150508091505092915050565b5f604083015f8301518482035f86015261322d8282613055565b915050602083015184820360208601526132478282613104565b9150508091505092915050565b5f6020820190508181035f83015261326c8184613213565b905092915050565b5f8151905061328281612037565b92915050565b5f6020828403121561329d5761329c611f19565b5b5f6132aa84828501613274565b91505092915050565b7f6f6e6c79206f776e6572000000000000000000000000000000000000000000005f82015250565b5f6132e7600a8361277a565b91506132f2826132b3565b602082019050919050565b5f6020820190508181035f830152613314816132db565b9050919050565b5f81905092915050565b5f61332f82612f56565b613339818561331b565b935061334981856020860161278a565b80840191505092915050565b5f6133608284613325565b915081905092915050565b7f6163636f756e743a206e6f74204f776e6572206f7220456e747279506f696e745f82015250565b5f61339f60208361277a565b91506133aa8261336b565b602082019050919050565b5f6020820190508181035f8301526133cc81613393565b9050919050565b6133dc816124da565b81146133e6575f80fd5b50565b5f815190506133f7816133d3565b92915050565b5f6020828403121561341257613411611f19565b5b5f61341f848285016133e9565b91505092915050565b7f6163636f756e743a206e6f742066726f6d20456e747279506f696e74000000005f82015250565b5f61345c601c8361277a565b915061346782613428565b602082019050919050565b5f6020820190508181035f83015261348981613450565b905091905056fea2646970667358221220c60418460b603a68fcfc35aa5574802b24a0c82c4b5331232cf44d2d986d7f0e64736f6c63430008180033",
}

// SimpleAccountFactoryABI is the input ABI used to generate the binding from.
// Deprecated: Use SimpleAccountFactoryMetaData.ABI instead.
var SimpleAccountFactoryABI = SimpleAccountFactoryMetaData.ABI

// SimpleAccountFactoryBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use SimpleAccountFactoryMetaData.Bin instead.
var SimpleAccountFactoryBin = SimpleAccountFactoryMetaData.Bin

// DeploySimpleAccountFactory deploys a new Ethereum contract, binding an instance of SimpleAccountFactory to it.
func DeploySimpleAccountFactory(auth *bind.TransactOpts, backend bind.ContractBackend, _entryPoint common.Address) (common.Address, *types.Transaction, *SimpleAccountFactory, error) {
	parsed, err := SimpleAccountFactoryMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(SimpleAccountFactoryBin), backend, _entryPoint)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &SimpleAccountFactory{SimpleAccountFactoryCaller: SimpleAccountFactoryCaller{contract: contract}, SimpleAccountFactoryTransactor: SimpleAccountFactoryTransactor{contract: contract}, SimpleAccountFactoryFilterer: SimpleAccountFactoryFilterer{contract: contract}}, nil
}

// SimpleAccountFactory is an auto generated Go binding around an Ethereum contract.
type SimpleAccountFactory struct {
	SimpleAccountFactoryCaller     // Read-only binding to the contract
	SimpleAccountFactoryTransactor // Write-only binding to the contract
	SimpleAccountFactoryFilterer   // Log filterer for contract events
}

// SimpleAccountFactoryCaller is an auto generated read-only Go binding around an Ethereum contract.
type SimpleAccountFactoryCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// SimpleAccountFactoryTransactor is an auto generated write-only Go binding around an Ethereum contract.
type SimpleAccountFactoryTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// SimpleAccountFactoryFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type SimpleAccountFactoryFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// SimpleAccountFactorySession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type SimpleAccountFactorySession struct {
	Contract     *SimpleAccountFactory // Generic contract binding to set the session for
	CallOpts     bind.CallOpts         // Call options to use throughout this session
	TransactOpts bind.TransactOpts     // Transaction auth options to use throughout this session
}

// SimpleAccountFactoryCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type SimpleAccountFactoryCallerSession struct {
	Contract *SimpleAccountFactoryCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts               // Call options to use throughout this session
}

// SimpleAccountFactoryTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type SimpleAccountFactoryTransactorSession struct {
	Contract     *SimpleAccountFactoryTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts               // Transaction auth options to use throughout this session
}

// SimpleAccountFactoryRaw is an auto generated low-level Go binding around an Ethereum contract.
type SimpleAccountFactoryRaw struct {
	Contract *SimpleAccountFactory // Generic contract binding to access the raw methods on
}

// SimpleAccountFactoryCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type SimpleAccountFactoryCallerRaw struct {
	Contract *SimpleAccountFactoryCaller // Generic read-only contract binding to access the raw methods on
}

// SimpleAccountFactoryTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type SimpleAccountFactoryTransactorRaw struct {
	Contract *SimpleAccountFactoryTransactor // Generic write-only contract binding to access the raw methods on
}

// NewSimpleAccountFactory creates a new instance of SimpleAccountFactory, bound to a specific deployed contract.
func NewSimpleAccountFactory(address common.Address, backend bind.ContractBackend) (*SimpleAccountFactory, error) {
	contract, err := bindSimpleAccountFactory(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &SimpleAccountFactory{SimpleAccountFactoryCaller: SimpleAccountFactoryCaller{contract: contract}, SimpleAccountFactoryTransactor: SimpleAccountFactoryTransactor{contract: contract}, SimpleAccountFactoryFilterer: SimpleAccountFactoryFilterer{contract: contract}}, nil
}

// NewSimpleAccountFactoryCaller creates a new read-only instance of SimpleAccountFactory, bound to a specific deployed contract.
func NewSimpleAccountFactoryCaller(address common.Address, caller bind.ContractCaller) (*SimpleAccountFactoryCaller, error) {
	contract, err := bindSimpleAccountFactory(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &SimpleAccountFactoryCaller{contract: contract}, nil
}

// NewSimpleAccountFactoryTransactor creates a new write-only instance of SimpleAccountFactory, bound to a specific deployed contract.
func NewSimpleAccountFactoryTransactor(address common.Address, transactor bind.ContractTransactor) (*SimpleAccountFactoryTransactor, error) {
	contract, err := bindSimpleAccountFactory(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &SimpleAccountFactoryTransactor{contract: contract}, nil
}

// NewSimpleAccountFactoryFilterer creates a new log filterer instance of SimpleAccountFactory, bound to a specific deployed contract.
func NewSimpleAccountFactoryFilterer(address common.Address, filterer bind.ContractFilterer) (*SimpleAccountFactoryFilterer, error) {
	contract, err := bindSimpleAccountFactory(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &SimpleAccountFactoryFilterer{contract: contract}, nil
}

// bindSimpleAccountFactory binds a generic wrapper to an already deployed contract.
func bindSimpleAccountFactory(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := SimpleAccountFactoryMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_SimpleAccountFactory *SimpleAccountFactoryRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _SimpleAccountFactory.Contract.SimpleAccountFactoryCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_SimpleAccountFactory *SimpleAccountFactoryRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _SimpleAccountFactory.Contract.SimpleAccountFactoryTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_SimpleAccountFactory *SimpleAccountFactoryRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _SimpleAccountFactory.Contract.SimpleAccountFactoryTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_SimpleAccountFactory *SimpleAccountFactoryCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _SimpleAccountFactory.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_SimpleAccountFactory *SimpleAccountFactoryTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _SimpleAccountFactory.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_SimpleAccountFactory *SimpleAccountFactoryTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _SimpleAccountFactory.Contract.contract.Transact(opts, method, params...)
}

// UserId is a free data retrieval call binding the contract method 0x026c3bfe.
//
// Solidity: function UserId() view returns(uint256)
func (_SimpleAccountFactory *SimpleAccountFactoryCaller) UserId(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _SimpleAccountFactory.contract.Call(opts, &out, "UserId")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// UserId is a free data retrieval call binding the contract method 0x026c3bfe.
//
// Solidity: function UserId() view returns(uint256)
func (_SimpleAccountFactory *SimpleAccountFactorySession) UserId() (*big.Int, error) {
	return _SimpleAccountFactory.Contract.UserId(&_SimpleAccountFactory.CallOpts)
}

// UserId is a free data retrieval call binding the contract method 0x026c3bfe.
//
// Solidity: function UserId() view returns(uint256)
func (_SimpleAccountFactory *SimpleAccountFactoryCallerSession) UserId() (*big.Int, error) {
	return _SimpleAccountFactory.Contract.UserId(&_SimpleAccountFactory.CallOpts)
}

// AccountImplementation is a free data retrieval call binding the contract method 0x11464fbe.
//
// Solidity: function accountImplementation() view returns(address)
func (_SimpleAccountFactory *SimpleAccountFactoryCaller) AccountImplementation(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _SimpleAccountFactory.contract.Call(opts, &out, "accountImplementation")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// AccountImplementation is a free data retrieval call binding the contract method 0x11464fbe.
//
// Solidity: function accountImplementation() view returns(address)
func (_SimpleAccountFactory *SimpleAccountFactorySession) AccountImplementation() (common.Address, error) {
	return _SimpleAccountFactory.Contract.AccountImplementation(&_SimpleAccountFactory.CallOpts)
}

// AccountImplementation is a free data retrieval call binding the contract method 0x11464fbe.
//
// Solidity: function accountImplementation() view returns(address)
func (_SimpleAccountFactory *SimpleAccountFactoryCallerSession) AccountImplementation() (common.Address, error) {
	return _SimpleAccountFactory.Contract.AccountImplementation(&_SimpleAccountFactory.CallOpts)
}

// GetAccountAddress is a free data retrieval call binding the contract method 0x0d253d76.
//
// Solidity: function getAccountAddress(address owner, uint256 _userId) view returns(address)
func (_SimpleAccountFactory *SimpleAccountFactoryCaller) GetAccountAddress(opts *bind.CallOpts, owner common.Address, _userId *big.Int) (common.Address, error) {
	var out []interface{}
	err := _SimpleAccountFactory.contract.Call(opts, &out, "getAccountAddress", owner, _userId)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetAccountAddress is a free data retrieval call binding the contract method 0x0d253d76.
//
// Solidity: function getAccountAddress(address owner, uint256 _userId) view returns(address)
func (_SimpleAccountFactory *SimpleAccountFactorySession) GetAccountAddress(owner common.Address, _userId *big.Int) (common.Address, error) {
	return _SimpleAccountFactory.Contract.GetAccountAddress(&_SimpleAccountFactory.CallOpts, owner, _userId)
}

// GetAccountAddress is a free data retrieval call binding the contract method 0x0d253d76.
//
// Solidity: function getAccountAddress(address owner, uint256 _userId) view returns(address)
func (_SimpleAccountFactory *SimpleAccountFactoryCallerSession) GetAccountAddress(owner common.Address, _userId *big.Int) (common.Address, error) {
	return _SimpleAccountFactory.Contract.GetAccountAddress(&_SimpleAccountFactory.CallOpts, owner, _userId)
}

// GetUserAccountInfo is a free data retrieval call binding the contract method 0x0cc06221.
//
// Solidity: function getUserAccountInfo(address _owner) view returns((uint256,bytes1,address))
func (_SimpleAccountFactory *SimpleAccountFactoryCaller) GetUserAccountInfo(opts *bind.CallOpts, _owner common.Address) (ZKVizingAccountFactoryUserZKVizingAccountInfo, error) {
	var out []interface{}
	err := _SimpleAccountFactory.contract.Call(opts, &out, "getUserAccountInfo", _owner)

	if err != nil {
		return *new(ZKVizingAccountFactoryUserZKVizingAccountInfo), err
	}

	out0 := *abi.ConvertType(out[0], new(ZKVizingAccountFactoryUserZKVizingAccountInfo)).(*ZKVizingAccountFactoryUserZKVizingAccountInfo)

	return out0, err

}

// GetUserAccountInfo is a free data retrieval call binding the contract method 0x0cc06221.
//
// Solidity: function getUserAccountInfo(address _owner) view returns((uint256,bytes1,address))
func (_SimpleAccountFactory *SimpleAccountFactorySession) GetUserAccountInfo(_owner common.Address) (ZKVizingAccountFactoryUserZKVizingAccountInfo, error) {
	return _SimpleAccountFactory.Contract.GetUserAccountInfo(&_SimpleAccountFactory.CallOpts, _owner)
}

// GetUserAccountInfo is a free data retrieval call binding the contract method 0x0cc06221.
//
// Solidity: function getUserAccountInfo(address _owner) view returns((uint256,bytes1,address))
func (_SimpleAccountFactory *SimpleAccountFactoryCallerSession) GetUserAccountInfo(_owner common.Address) (ZKVizingAccountFactoryUserZKVizingAccountInfo, error) {
	return _SimpleAccountFactory.Contract.GetUserAccountInfo(&_SimpleAccountFactory.CallOpts, _owner)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_SimpleAccountFactory *SimpleAccountFactoryCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _SimpleAccountFactory.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_SimpleAccountFactory *SimpleAccountFactorySession) Owner() (common.Address, error) {
	return _SimpleAccountFactory.Contract.Owner(&_SimpleAccountFactory.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_SimpleAccountFactory *SimpleAccountFactoryCallerSession) Owner() (common.Address, error) {
	return _SimpleAccountFactory.Contract.Owner(&_SimpleAccountFactory.CallOpts)
}

// CreateAccount is a paid mutator transaction binding the contract method 0x9859387b.
//
// Solidity: function createAccount(address owner) returns(address ret)
func (_SimpleAccountFactory *SimpleAccountFactoryTransactor) CreateAccount(opts *bind.TransactOpts, owner common.Address) (*types.Transaction, error) {
	return _SimpleAccountFactory.contract.Transact(opts, "createAccount", owner)
}

// CreateAccount is a paid mutator transaction binding the contract method 0x9859387b.
//
// Solidity: function createAccount(address owner) returns(address ret)
func (_SimpleAccountFactory *SimpleAccountFactorySession) CreateAccount(owner common.Address) (*types.Transaction, error) {
	return _SimpleAccountFactory.Contract.CreateAccount(&_SimpleAccountFactory.TransactOpts, owner)
}

// CreateAccount is a paid mutator transaction binding the contract method 0x9859387b.
//
// Solidity: function createAccount(address owner) returns(address ret)
func (_SimpleAccountFactory *SimpleAccountFactoryTransactorSession) CreateAccount(owner common.Address) (*types.Transaction, error) {
	return _SimpleAccountFactory.Contract.CreateAccount(&_SimpleAccountFactory.TransactOpts, owner)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_SimpleAccountFactory *SimpleAccountFactoryTransactor) RenounceOwnership(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _SimpleAccountFactory.contract.Transact(opts, "renounceOwnership")
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_SimpleAccountFactory *SimpleAccountFactorySession) RenounceOwnership() (*types.Transaction, error) {
	return _SimpleAccountFactory.Contract.RenounceOwnership(&_SimpleAccountFactory.TransactOpts)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_SimpleAccountFactory *SimpleAccountFactoryTransactorSession) RenounceOwnership() (*types.Transaction, error) {
	return _SimpleAccountFactory.Contract.RenounceOwnership(&_SimpleAccountFactory.TransactOpts)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_SimpleAccountFactory *SimpleAccountFactoryTransactor) TransferOwnership(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _SimpleAccountFactory.contract.Transact(opts, "transferOwnership", newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_SimpleAccountFactory *SimpleAccountFactorySession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _SimpleAccountFactory.Contract.TransferOwnership(&_SimpleAccountFactory.TransactOpts, newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_SimpleAccountFactory *SimpleAccountFactoryTransactorSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _SimpleAccountFactory.Contract.TransferOwnership(&_SimpleAccountFactory.TransactOpts, newOwner)
}

// UpdateBundler is a paid mutator transaction binding the contract method 0xc7217f7f.
//
// Solidity: function updateBundler(address _bundler) returns()
func (_SimpleAccountFactory *SimpleAccountFactoryTransactor) UpdateBundler(opts *bind.TransactOpts, _bundler common.Address) (*types.Transaction, error) {
	return _SimpleAccountFactory.contract.Transact(opts, "updateBundler", _bundler)
}

// UpdateBundler is a paid mutator transaction binding the contract method 0xc7217f7f.
//
// Solidity: function updateBundler(address _bundler) returns()
func (_SimpleAccountFactory *SimpleAccountFactorySession) UpdateBundler(_bundler common.Address) (*types.Transaction, error) {
	return _SimpleAccountFactory.Contract.UpdateBundler(&_SimpleAccountFactory.TransactOpts, _bundler)
}

// UpdateBundler is a paid mutator transaction binding the contract method 0xc7217f7f.
//
// Solidity: function updateBundler(address _bundler) returns()
func (_SimpleAccountFactory *SimpleAccountFactoryTransactorSession) UpdateBundler(_bundler common.Address) (*types.Transaction, error) {
	return _SimpleAccountFactory.Contract.UpdateBundler(&_SimpleAccountFactory.TransactOpts, _bundler)
}

// SimpleAccountFactoryAccountCreatedIterator is returned from FilterAccountCreated and is used to iterate over the raw logs and unpacked data for AccountCreated events raised by the SimpleAccountFactory contract.
type SimpleAccountFactoryAccountCreatedIterator struct {
	Event *SimpleAccountFactoryAccountCreated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *SimpleAccountFactoryAccountCreatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(SimpleAccountFactoryAccountCreated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(SimpleAccountFactoryAccountCreated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *SimpleAccountFactoryAccountCreatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *SimpleAccountFactoryAccountCreatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// SimpleAccountFactoryAccountCreated represents a AccountCreated event raised by the SimpleAccountFactory contract.
type SimpleAccountFactoryAccountCreated struct {
	Account common.Address
	Owner   common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterAccountCreated is a free log retrieval operation binding the contract event 0xac631f3001b55ea1509cf3d7e74898f85392a61a76e8149181ae1259622dabc8.
//
// Solidity: event AccountCreated(address indexed account, address owner)
func (_SimpleAccountFactory *SimpleAccountFactoryFilterer) FilterAccountCreated(opts *bind.FilterOpts, account []common.Address) (*SimpleAccountFactoryAccountCreatedIterator, error) {

	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}

	logs, sub, err := _SimpleAccountFactory.contract.FilterLogs(opts, "AccountCreated", accountRule)
	if err != nil {
		return nil, err
	}
	return &SimpleAccountFactoryAccountCreatedIterator{contract: _SimpleAccountFactory.contract, event: "AccountCreated", logs: logs, sub: sub}, nil
}

// WatchAccountCreated is a free log subscription operation binding the contract event 0xac631f3001b55ea1509cf3d7e74898f85392a61a76e8149181ae1259622dabc8.
//
// Solidity: event AccountCreated(address indexed account, address owner)
func (_SimpleAccountFactory *SimpleAccountFactoryFilterer) WatchAccountCreated(opts *bind.WatchOpts, sink chan<- *SimpleAccountFactoryAccountCreated, account []common.Address) (event.Subscription, error) {

	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}

	logs, sub, err := _SimpleAccountFactory.contract.WatchLogs(opts, "AccountCreated", accountRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(SimpleAccountFactoryAccountCreated)
				if err := _SimpleAccountFactory.contract.UnpackLog(event, "AccountCreated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseAccountCreated is a log parse operation binding the contract event 0xac631f3001b55ea1509cf3d7e74898f85392a61a76e8149181ae1259622dabc8.
//
// Solidity: event AccountCreated(address indexed account, address owner)
func (_SimpleAccountFactory *SimpleAccountFactoryFilterer) ParseAccountCreated(log types.Log) (*SimpleAccountFactoryAccountCreated, error) {
	event := new(SimpleAccountFactoryAccountCreated)
	if err := _SimpleAccountFactory.contract.UnpackLog(event, "AccountCreated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// SimpleAccountFactoryOwnershipTransferredIterator is returned from FilterOwnershipTransferred and is used to iterate over the raw logs and unpacked data for OwnershipTransferred events raised by the SimpleAccountFactory contract.
type SimpleAccountFactoryOwnershipTransferredIterator struct {
	Event *SimpleAccountFactoryOwnershipTransferred // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *SimpleAccountFactoryOwnershipTransferredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(SimpleAccountFactoryOwnershipTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(SimpleAccountFactoryOwnershipTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *SimpleAccountFactoryOwnershipTransferredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *SimpleAccountFactoryOwnershipTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// SimpleAccountFactoryOwnershipTransferred represents a OwnershipTransferred event raised by the SimpleAccountFactory contract.
type SimpleAccountFactoryOwnershipTransferred struct {
	PreviousOwner common.Address
	NewOwner      common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterOwnershipTransferred is a free log retrieval operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_SimpleAccountFactory *SimpleAccountFactoryFilterer) FilterOwnershipTransferred(opts *bind.FilterOpts, previousOwner []common.Address, newOwner []common.Address) (*SimpleAccountFactoryOwnershipTransferredIterator, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _SimpleAccountFactory.contract.FilterLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return &SimpleAccountFactoryOwnershipTransferredIterator{contract: _SimpleAccountFactory.contract, event: "OwnershipTransferred", logs: logs, sub: sub}, nil
}

// WatchOwnershipTransferred is a free log subscription operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_SimpleAccountFactory *SimpleAccountFactoryFilterer) WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *SimpleAccountFactoryOwnershipTransferred, previousOwner []common.Address, newOwner []common.Address) (event.Subscription, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _SimpleAccountFactory.contract.WatchLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(SimpleAccountFactoryOwnershipTransferred)
				if err := _SimpleAccountFactory.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOwnershipTransferred is a log parse operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_SimpleAccountFactory *SimpleAccountFactoryFilterer) ParseOwnershipTransferred(log types.Log) (*SimpleAccountFactoryOwnershipTransferred, error) {
	event := new(SimpleAccountFactoryOwnershipTransferred)
	if err := _SimpleAccountFactory.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
