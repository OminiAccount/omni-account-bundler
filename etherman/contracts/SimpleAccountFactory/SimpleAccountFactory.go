// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package SimpleAccountFactory

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
	_ = abi.ConvertType
)

// ZKVizingAccountFactoryUserZKVizingAccountInfo is an auto generated low-level Go binding around an user-defined struct.
type ZKVizingAccountFactoryUserZKVizingAccountInfo struct {
	UserId          *big.Int
	State           [1]byte
	ZkVizingAccount common.Address
}

// SimpleAccountFactoryMetaData contains all meta data concerning the SimpleAccountFactory contract.
var SimpleAccountFactoryMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"contractIEntryPoint\",\"name\":\"_entryPoint\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"AccountCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"accountImplementation\",\"outputs\":[{\"internalType\":\"contractZKVizingAccount\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"userId\",\"type\":\"uint256\"}],\"name\":\"createAccount\",\"outputs\":[{\"internalType\":\"contractZKVizingAccount\",\"name\":\"ret\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"userId\",\"type\":\"uint256\"}],\"name\":\"getAccountAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"getUserAccountInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"userId\",\"type\":\"uint256\"},{\"internalType\":\"bytes1\",\"name\":\"state\",\"type\":\"bytes1\"},{\"internalType\":\"address\",\"name\":\"zkVizingAccount\",\"type\":\"address\"}],\"internalType\":\"structZKVizingAccountFactory.UserZKVizingAccountInfo\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_bundler\",\"type\":\"address\"}],\"name\":\"updateBundler\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
	Bin: "0x60a0604052346200004e576200001e6200001862000135565b620001d4565b6200002862000054565b61181f620003f582396080518181816102c6015281816108a00152610d18015261181f90f35b6200005a565b60405190565b5f80fd5b601f801991011690565b634e487b7160e01b5f52604160045260245ffd5b9062000088906200005e565b810190811060018060401b03821117620000a157604052565b62000068565b90620000be620000b662000054565b92836200007c565b565b5f80fd5b60018060a01b031690565b620000da90620000c4565b90565b620000e890620000cf565b90565b620000f681620000dd565b03620000fe57565b5f80fd5b905051906200011182620000eb565b565b906020828203126200012f576200012c915f0162000102565b90565b620000c0565b6200015862005145803803806200014c81620000a7565b92833981019062000113565b90565b90565b62000177620001716200017d92620000c4565b6200015b565b620000c4565b90565b6200018b906200015e565b90565b620001999062000180565b90565b620001a7906200018e565b9052565b9190620001c0905f602085019401906200019c565b565b620001cc62000054565b3d5f823e3d90fd5b620001df336200028c565b620001e962000054565b90613531820182811060018060401b038211176200022d578291620002179161353162001c148539620001ab565b03905ff080156200022757608052565b620001c2565b62000068565b90565b6200024f62000249620002559262000233565b6200015b565b620000c4565b90565b620002639062000236565b90565b6200027190620000cf565b9052565b91906200028a905f6020850194019062000266565b565b80620002ad620002a6620002a05f62000258565b620000cf565b91620000cf565b14620002c057620002be9062000389565b565b620002f0620002cf5f62000258565b620002d962000054565b918291631e4fbdf760e01b83526004830162000275565b0390fd5b5f1c90565b60018060a01b031690565b620003136200031991620002f4565b620002f9565b90565b62000328905462000304565b90565b5f1b90565b906200034360018060a01b03916200032b565b9181191691161790565b620003589062000180565b90565b90565b90620003786200037262000380926200034d565b6200035b565b825462000330565b9055565b5f0190565b620003945f6200031c565b620003a0825f6200035e565b90620003d8620003d17f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0936200034d565b916200034d565b91620003e362000054565b80620003ef8162000384565b0390a356fe6080604052600436101562000015575b620004c9565b620000215f35620000b0565b80630cc0622114620000aa5780630d253d7614620000a457806311464fbe146200009e5780635fbfb9cf1462000098578063715018a614620000925780638da5cb5b146200008c578063c7217f7f14620000865763f2fde38b036200000f576200048c565b6200044f565b62000410565b620003d3565b6200038e565b6200034f565b62000273565b620001b3565b60e01c90565b60405190565b5f80fd5b5f80fd5b60018060a01b031690565b620000da90620000c4565b90565b620000e881620000cf565b03620000f057565b5f80fd5b905035906200010382620000dd565b565b9060208282031262000121576200011e915f01620000f4565b90565b620000c0565b90565b620001359062000127565b9052565b60ff60f81b1690565b6200014d9062000139565b9052565b6200015c90620000cf565b9052565b906040806200019a936200017b5f8201515f8601906200012a565b6200018f6020820151602086019062000142565b015191019062000151565b565b9190620001b1905f6060850194019062000160565b565b34620001ec57620001e8620001d4620001ce36600462000105565b62000705565b620001de620000b6565b918291826200019c565b0390f35b620000bc565b620001fd8162000127565b036200020557565b5f80fd5b905035906200021882620001f2565b565b91906040838203126200024757806200023a62000244925f8601620000f4565b9360200162000209565b90565b620000c0565b6200025890620000cf565b9052565b919062000271905f602085019401906200024d565b565b34620002ad57620002a9620002956200028e3660046200021a565b9062000850565b6200029f620000b6565b918291826200025c565b0390f35b620000bc565b5f910312620002be57565b620000c0565b7f000000000000000000000000000000000000000000000000000000000000000090565b90565b62000304620002fe6200030a92620000c4565b620002e8565b620000c4565b90565b6200031890620002eb565b90565b62000326906200030d565b90565b62000334906200031b565b9052565b91906200034d905f6020850194019062000329565b565b34620003885762000362366004620002b3565b6200038462000370620002c4565b6200037a620000b6565b9182918262000338565b0390f35b620000bc565b34620003c857620003c4620003b0620003a93660046200021a565b9062000ebb565b620003ba620000b6565b9182918262000338565b0390f35b620000bc565b5f0190565b346200040a57620003e6366004620002b3565b620003f062000f01565b620003fa620000b6565b806200040681620003ce565b0390f35b620000bc565b34620004495762000423366004620002b3565b620004456200043162000f0d565b6200043b620000b6565b918291826200025c565b0390f35b620000bc565b3462000486576200046c6200046636600462000105565b62000f8f565b62000476620000b6565b806200048281620003ce565b0390f35b620000bc565b34620004c357620004a9620004a336600462000105565b6200101b565b620004b3620000b6565b80620004bf81620003ce565b0390f35b620000bc565b5f80fd5b601f801991011690565b634e487b7160e01b5f52604160045260245ffd5b90620004f790620004cd565b810190811067ffffffffffffffff8211176200051257604052565b620004d7565b906200052f62000527620000b6565b9283620004eb565b565b6200053d606062000518565b90565b5f90565b5f90565b5f90565b6200055662000531565b9060208080846200056662000540565b8152016200057362000544565b8152016200058062000548565b81525050565b620005906200054c565b90565b6200059e90620002eb565b90565b620005ac9062000593565b90565b90620005bb90620005a1565b5f5260205260405f2090565b5f1c90565b90565b620005de620005e491620005c7565b620005cc565b90565b620005f39054620005cf565b90565b90620006029062000127565b9052565b60f81b90565b620006179062000606565b90565b620006296200062f91620005c7565b6200060c565b90565b6200063e90546200061a565b90565b906200064d9062000139565b9052565b60081c90565b60018060a01b031690565b62000671620006779162000651565b62000657565b90565b62000686905462000662565b90565b906200069590620000cf565b9052565b90620006f5620006eb6001620006ae62000531565b94620006c9620006c05f8301620005e7565b5f8801620005f6565b620006e4620006da83830162000632565b6020880162000641565b016200067a565b6040840162000689565b565b620007029062000699565b90565b6200072162000727916200071862000586565b506002620005af565b620006f7565b90565b5f90565b90565b5f1b90565b6200074f62000749620007559262000127565b62000731565b6200072e565b90565b620007639062000593565b90565b5190565b60209181520190565b5f5b83811062000786575050905f910152565b80602091830151818501520162000775565b620007bd620007c7602093620007cd93620007b38162000766565b938480936200076a565b9586910162000773565b620004cd565b0190565b91620007f892620007ea60408201935f8301906200024d565b602081840391015262000798565b90565b905090565b6200082b6200082192602092620008178162000766565b94858093620007fb565b9384910162000773565b0190565b620008409062000847939262000800565b9062000800565b90565b60200190565b620008ea62000950620008726200096e946200086b6200072a565b5062000736565b926200092561067b91620008896020840162000518565b928084526200116f6020850139620008fa620008c57f000000000000000000000000000000000000000000000000000000000000000062000758565b91620008d0620000b6565b96879160046020840163189acdbd60e31b8152016200025c565b60208201810382520386620004eb565b6200091562000908620000b6565b95869260208401620007d1565b60208201810382520384620004eb565b6200094062000933620000b6565b938492602084016200082f565b60208201810382520382620004eb565b620009666200095f8262000766565b916200084a565b209062001036565b90565b5f90565b620009846200098a91620005c7565b62000657565b90565b62000999905462000975565b90565b15620009a457565b5f80fd5b90620009e29291620009dc33620009d5620009ce620009c860016200098d565b620000cf565b91620000cf565b146200099c565b62000cc1565b90565b90565b62000a01620009fb62000a0792620009e5565b62000606565b62000139565b90565b60209181520190565b5f7f416c726561647920637265617465000000000000000000000000000000000000910152565b62000a49600e60209262000a0a565b62000a548162000a13565b0190565b62000a6f9060208101905f81830391015262000a3a565b90565b1562000a7a57565b62000a84620000b6565b62461bcd60e51b81528062000a9c6004820162000a58565b0390fd5b62000aaa620000b6565b3d5f823e3d90fd5b62000abd906200030d565b90565b62000acb90620002eb565b90565b62000ad99062000ac0565b90565b90565b62000af862000af262000afe9262000adc565b620002e8565b620000c4565b90565b62000b0c9062000adf565b90565b62000b1b606062000518565b90565b62000b2a905162000127565b90565b9062000b3b5f199162000731565b9181191691161790565b62000b5e62000b5862000b649262000127565b620002e8565b62000127565b90565b90565b9062000b8462000b7e62000b8c9262000b45565b62000b67565b825462000b2d565b9055565b62000b9c905162000139565b90565b9062000bad60ff9162000731565b9181191691161790565b62000bc29062000139565b90565b60f81c90565b62000bd69062000bc5565b90565b9062000bf362000bed62000bfb9262000bb7565b62000bcb565b825462000b9f565b9055565b62000c0b9051620000cf565b90565b60081b90565b9062000c29610100600160a81b039162000c0e565b9181191691161790565b90565b9062000c5062000c4a62000c5892620005a1565b62000c33565b825462000c14565b9055565b9062000caa6040600162000cb19462000c855f820162000c7e5f880162000b1e565b9062000b6a565b62000ca182820162000c9a6020880162000b90565b9062000bd9565b01920162000bff565b9062000c36565b565b9062000cbf9162000c5c565b565b9291925062000d0362000ce4600162000cdd60028590620005af565b0162000632565b62000cfb62000cf46001620009e8565b9162000139565b141562000a72565b62000d0e8362000736565b62000d6662000d3d7f000000000000000000000000000000000000000000000000000000000000000062000758565b62000d768462000d4c620000b6565b93849160046020840163189acdbd60e31b8152016200025c565b60208201810382520383620004eb565b62000d80620000b6565b9161067b83019083821067ffffffffffffffff83111762000eb557839262000db19261067b6200116f8639620007d1565b03905ff5801562000eaf5762000dcb62000dd19162000ab2565b62000ace565b9262000e6562000de18562000758565b9162000e0f8362000e0762000e0062000dfa5f62000b01565b620000cf565b91620000cf565b14156200099c565b62000e51600162000e4762000e3d869262000e3762000e2d62000b0f565b965f8801620005f6565b620009e8565b6020850162000641565b6040830162000689565b62000e5f60028590620005af565b62000cb3565b62000eaa62000e957fac631f3001b55ea1509cf3d7e74898f85392a61a76e8149181ae1259622dabc892620005a1565b9262000ea0620000b6565b918291826200025c565b0390a2565b62000aa0565b620004d7565b9062000ed19162000ecb62000971565b620009a8565b90565b62000ede6200105d565b62000ee862000eea565b565b62000eff62000ef95f62000b01565b620010c1565b565b62000f0b62000ed4565b565b62000f176200072a565b5062000f235f6200098d565b90565b62000f3b9062000f356200105d565b62000f80565b565b9062000f5060018060a01b039162000731565b9181191691161790565b9062000f7462000f6e62000f7c92620005a1565b62000c33565b825462000f3d565b9055565b62000f8d90600162000f5a565b565b62000f9a9062000f26565b565b62000fb19062000fab6200105d565b62000fb3565b565b8062000fd462000fcd62000fc75f62000b01565b620000cf565b91620000cf565b1462000fe75762000fe590620010c1565b565b6200101762000ff65f62000b01565b62001000620000b6565b918291631e4fbdf760e01b8352600483016200025c565b0390fd5b620010269062000f9c565b565b620010339062000593565b90565b906200105a91620010466200072a565b5090620010533062001028565b916200112c565b90565b6200106762000f0d565b620010866200107f620010796200115f565b620000cf565b91620000cf565b036200108e57565b620010bd6200109c6200115f565b620010a6620000b6565b91829163118cdaa760e01b8352600483016200025c565b0390fd5b620010cc5f6200098d565b620010d8825f62000f5a565b9062001110620011097f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e093620005a1565b91620005a1565b916200111b620000b6565b806200112781620003ce565b0390a3565b91600b926200113a6200072a565b50604051926040840152602083015281520160ff8153605560018060a01b0391201690565b620011696200072a565b50339056fe608060405261001561000f6101b5565b906101d7565b61001d61002b565b61010c61056f823961010c90f35b60405190565b601f801991011690565b634e487b7160e01b5f52604160045260245ffd5b9061005990610031565b810190811060018060401b0382111761007157604052565b61003b565b9061008961008261002b565b928361004f565b565b5f80fd5b5f80fd5b60018060a01b031690565b6100a790610093565b90565b6100b38161009e565b036100ba57565b5f80fd5b905051906100cb826100aa565b565b5f80fd5b5f80fd5b60018060401b0381116100f1576100ed602091610031565b0190565b61003b565b5f5b838110610108575050905f910152565b8060209183015181850152016100f8565b9092919261012e610129826100d5565b610076565b9381855260208501908284011161014a57610148926100f6565b565b6100d1565b9080601f8301121561016d5781602061016a93519101610119565b90565b6100cd565b9190916040818403126101b05761018b835f83016100be565b92602082015160018060401b0381116101ab576101a8920161014f565b90565b61008f565b61008b565b6101d361067b803803806101c881610076565b928339810190610172565b9091565b906101e191610245565b565b90565b6101fa6101f56101ff92610093565b6101e3565b610093565b90565b61020b906101e6565b90565b61021790610202565b90565b5f0190565b5190565b90565b90565b61023d61023861024292610226565b6101e3565b610223565b90565b9061024f82610381565b8161027a7fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b9161020e565b9061028361002b565b8061028d8161021a565b0390a26102998161021f565b6102ab6102a55f610229565b91610223565b115f146102bf576102bb9161045f565b505b565b50506102c96103dd565b6102bd565b6102d79061009e565b9052565b91906102ee905f602085019401906102ce565b565b90565b90565b5f1b90565b61030f61030a610314926102f0565b6102f6565b6102f3565b90565b6103407f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc6102fb565b90565b9061035460018060a01b03916102f6565b9181191691161790565b90565b9061037661037161037d9261020e565b61035e565b8254610343565b9055565b803b61039561038f5f610229565b91610223565b146103b7576103b5905f6103af6103aa610317565b61048e565b01610361565b565b6103d9906103c361002b565b918291634c9c8ce360e01b8352600483016102db565b0390fd5b346103f06103ea5f610229565b91610223565b116103f757565b6103ff61002b565b63b398979f60e01b8152806104166004820161021a565b0390fd5b606090565b9061043161042c836100d5565b610076565b918252565b3d5f14610451576104463d61041f565b903d5f602084013e5b565b61045961041a565b9061044f565b5f8061048b9361046d61041a565b508390602081019051915af490610482610436565b90919091610496565b90565b90565b151590565b906104aa906104a361041a565b5015610491565b5f146104b65750610521565b6104bf8261021f565b6104d16104cb5f610229565b91610223565b1480610506575b6104e0575090565b610502906104ec61002b565b918291639996b31560e01b8352600483016102db565b0390fd5b50803b61051b6105155f610229565b91610223565b146104d8565b61052a8161021f565b61053c6105365f610229565b91610223565b115f1461054b57805190602001fd5b61055361002b565b63d6bda27560e01b81528061056a6004820161021a565b0390fdfe6080604052600a6012565b6022565b5f90565b6018600e565b50601f60b5565b90565b5f8091368280378136915af43d5f803e5f14603b573d5ff35b3d5ffd5b90565b90565b5f1b90565b60596055605d92603f565b6045565b6042565b90565b60877f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc604a565b90565b5f1c90565b60018060a01b031690565b60a360a791608a565b608f565b90565b60b29054609a565b90565b60bb600e565b5060d05f60cb60c76060565b60d3565b0160aa565b90565b9056fea26469706673582212205eb798dd159504b7f6d02130d555b59a1ec25a1baabf5d9f6ba4d59dc167f73764736f6c63430008180033a264697066735822122093a922472b4bc4f6a624c2573579d183e8b88bc823b958f55f10adb8e676782664736f6c6343000818003360c0604052346200005e576200001e6200001862000145565b6200016b565b6200002862000064565b613148620003e98239608051818181612abb01528181612b270152612ce5015260a051818181611cf70152612e49015261314890f35b6200006a565b60405190565b5f80fd5b601f801991011690565b634e487b7160e01b5f52604160045260245ffd5b9062000098906200006e565b810190811060018060401b03821117620000b157604052565b62000078565b90620000ce620000c662000064565b92836200008c565b565b5f80fd5b60018060a01b031690565b620000ea90620000d4565b90565b620000f890620000df565b90565b6200010681620000ed565b036200010e57565b5f80fd5b905051906200012182620000fb565b565b906020828203126200013f576200013c915f0162000112565b90565b620000d0565b6200016862003531803803806200015c81620000b7565b92833981019062000123565b90565b6200017562000184565b60a05262000182620002ee565b565b6200018e620001d1565b565b90565b620001ac620001a6620001b292620000d4565b62000190565b620000d4565b90565b620001c09062000193565b90565b620001ce90620001b5565b90565b620001dc30620001c3565b608052565b60401c90565b60ff1690565b620001fc6200020291620001e1565b620001e7565b90565b620002119054620001ed565b90565b5f0190565b5f1c90565b60018060401b031690565b620002386200023e9162000219565b6200021e565b90565b6200024d905462000229565b90565b60018060401b031690565b5f1b90565b906200027360018060401b03916200025b565b9181191691161790565b62000296620002906200029c9262000250565b62000190565b62000250565b90565b90565b90620002bc620002b6620002c4926200027d565b6200029f565b825462000260565b9055565b620002d39062000250565b9052565b9190620002ec905f60208501940190620002c8565b565b620002f8620003c4565b620003055f820162000205565b6200039d57620003175f820162000241565b620003336200032c60018060401b0362000250565b9162000250565b036200033d575b50565b62000352905f60018060401b039101620002a2565b60018060401b03620003937fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d2916200038962000064565b91829182620002d7565b0390a15f6200033a565b620003a762000064565b63f92ee8a960e01b815280620003c06004820162000214565b0390fd5b7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a009056fe60806040526004361015610015575b36610f7557005b61001f5f3561015e565b806301ffc9a714610159578063150b7a02146101545780632e1a7d4d1461014f578063436284211461014a57806347e1da2a146101455780634f1ef2861461014057806352d1902d1461013b57806359950906146101365780635c51ffd1146101315780638799aeea1461012c5780638da5cb5b146101275780639165754414610122578063ad3cb1cc1461011d578063b0d691fe14610118578063b61d27f614610113578063bc197c811461010e578063c4d66de814610109578063f23a6e6114610104578063fa28b481146100ff5763fc7092660361000e57610f40565b610eeb565b610e2e565b610d8b565b610d4c565b610c73565b610bec565b610b5e565b610a17565b6109e2565b61094b565b610886565b61082b565b61070b565b6106ad565b610547565b6103db565b6103a8565b61034c565b6101ea565b60e01c90565b60405190565b5f80fd5b5f80fd5b5f80fd5b63ffffffff60e01b1690565b61018b81610176565b0361019257565b5f80fd5b905035906101a382610182565b565b906020828203126101be576101bb915f01610196565b90565b61016e565b151590565b6101d1906101c3565b9052565b91906101e8905f602085019401906101c8565b565b3461021a576102166102056102003660046101a5565b610f7d565b61020d610164565b918291826101d5565b0390f35b61016a565b60018060a01b031690565b6102339061021f565b90565b61023f8161022a565b0361024657565b5f80fd5b9050359061025782610236565b565b90565b61026581610259565b0361026c57565b5f80fd5b9050359061027d8261025c565b565b5f80fd5b5f80fd5b5f80fd5b909182601f830112156102c55781359167ffffffffffffffff83116102c05760200192600183028401116102bb57565b610287565b610283565b61027f565b90608082820312610325576102e1815f840161024a565b926102ef826020850161024a565b926102fd8360408301610270565b92606082013567ffffffffffffffff81116103205761031c920161028b565b9091565b610172565b61016e565b61033390610176565b9052565b919061034a905f6020850194019061032a565b565b346103805761037c61036b6103623660046102ca565b93929092610ffb565b610373610164565b91829182610337565b0390f35b61016a565b9060208282031261039e5761039b915f01610270565b90565b61016e565b5f0190565b346103d6576103c06103bb366004610385565b6110a4565b6103c8610164565b806103d2816103a3565b0390f35b61016a565b6103ee6103e9366004610385565b6110fb565b6103f6610164565b80610400816103a3565b0390f35b909182601f8301121561043e5781359167ffffffffffffffff831161043957602001926020830284011161043457565b610287565b610283565b61027f565b909182601f8301121561047d5781359167ffffffffffffffff831161047857602001926020830284011161047357565b610287565b610283565b61027f565b909182601f830112156104bc5781359167ffffffffffffffff83116104b75760200192602083028401116104b257565b610287565b610283565b61027f565b90606082820312610542575f82013567ffffffffffffffff811161053d57816104eb918401610404565b929093602082013567ffffffffffffffff8111610538578361050e918401610443565b929093604082013567ffffffffffffffff81116105335761052f9201610482565b9091565b610172565b610172565b610172565b61016e565b3461057c5761056661055a3660046104c1565b94939093929192611326565b61056e610164565b80610578816103a3565b0390f35b61016a565b5f80fd5b601f801991011690565b634e487b7160e01b5f52604160045260245ffd5b906105ad90610585565b810190811067ffffffffffffffff8211176105c757604052565b61058f565b906105df6105d8610164565b92836105a3565b565b67ffffffffffffffff81116105ff576105fb602091610585565b0190565b61058f565b90825f939282370152565b9092919261062461061f826105e1565b6105cc565b938185526020850190828401116106405761063e92610604565b565b610581565b9080601f83011215610663578160206106609335910161060f565b90565b61027f565b9190916040818403126106a857610681835f830161024a565b92602082013567ffffffffffffffff81116106a3576106a09201610645565b90565b610172565b61016e565b6106c16106bb366004610668565b9061152d565b6106c9610164565b806106d3816103a3565b0390f35b5f9103126106e157565b61016e565b90565b6106f2906106e6565b9052565b9190610709905f602085019401906106e9565b565b3461073b5761071b3660046106d7565b6107376107266115ad565b61072e610164565b918291826106f6565b0390f35b61016a565b67ffffffffffffffff1690565b61075681610740565b0361075d57565b5f80fd5b9050359061076e8261074d565b565b62ffffff1690565b61078181610770565b0361078857565b5f80fd5b9050359061079982610778565b565b909161012082840312610826576107b4835f8401610761565b926107c28160208501610270565b926107d0826040830161024a565b926107de8360608401610270565b926107ec816080850161078c565b926107fa8260a08301610761565b9261082361080b8460c08501610761565b936108198160e08601610761565b936101000161024a565b90565b61016e565b346108635761084d61083e36600461079b565b97969096959195949294611a46565b610855610164565b8061085f816103a3565b0390f35b61016a565b906020828203126108815761087e915f0161024a565b90565b61016e565b346108b6576108b26108a161089c366004610868565b611a59565b6108a9610164565b918291826101d5565b0390f35b61016a565b909161012082840312610946576108d4835f8401610270565b926108e28160208501610270565b926108f08260408301610270565b926108fe8360608401610270565b9261090c816080850161078c565b9261091a8260a08301610761565b9261094361092b8460c08501610761565b936109398160e08601610761565b936101000161024a565b90565b61016e565b6109686109593660046108bb565b97969096959195949294611b3f565b610970610164565b8061097a816103a3565b0390f35b1c90565b60018060a01b031690565b61099d9060086109a2930261097e565b610982565b90565b906109b0915461098d565b90565b6109bd5f806109a5565b90565b6109c99061022a565b9052565b91906109e0905f602085019401906109c0565b565b34610a12576109f23660046106d7565b610a0e6109fd6109b3565b610a05610164565b918291826109cd565b0390f35b61016a565b34610a4557610a2f610a2a366004610385565b611cdd565b610a37610164565b80610a41816103a3565b0390f35b61016a565b67ffffffffffffffff8111610a6857610a64602091610585565b0190565b61058f565b90610a7f610a7a83610a4a565b6105cc565b918252565b5f7f352e302e30000000000000000000000000000000000000000000000000000000910152565b610ab56005610a6d565b90610ac260208301610a84565b565b610acc610aab565b90565b610ad7610ac4565b90565b610ae2610acf565b90565b5190565b60209181520190565b5f5b838110610b04575050905f910152565b806020918301518185015201610af4565b610b34610b3d602093610b4293610b2b81610ae5565b93848093610ae9565b95869101610af2565b610585565b0190565b610b5b9160208201915f818403910152610b15565b90565b34610b8e57610b6e3660046106d7565b610b8a610b79610ada565b610b81610164565b91829182610b46565b0390f35b61016a565b90565b610baa610ba5610baf9261021f565b610b93565b61021f565b90565b610bbb90610b96565b90565b610bc790610bb2565b90565b610bd390610bbe565b9052565b9190610bea905f60208501940190610bca565b565b34610c1c57610bfc3660046106d7565b610c18610c07611cec565b610c0f610164565b91829182610bd7565b0390f35b61016a565b91606083830312610c6e57610c38825f850161024a565b92610c468360208301610270565b92604082013567ffffffffffffffff8111610c6957610c65920161028b565b9091565b610172565b61016e565b34610ca557610c8f610c86366004610c21565b92919091611d19565b610c97610164565b80610ca1816103a3565b0390f35b61016a565b9160a083830312610d4757610cc1825f850161024a565b92610ccf836020830161024a565b92604082013567ffffffffffffffff8111610d425781610cf0918401610443565b929093606082013567ffffffffffffffff8111610d3d5783610d13918401610443565b929093608082013567ffffffffffffffff8111610d3857610d34920161028b565b9091565b610172565b610172565b610172565b61016e565b34610d8657610d82610d71610d62366004610caa565b96959095949194939293611d3b565b610d79610164565b91829182610337565b0390f35b61016a565b34610db957610da3610d9e366004610868565b61203e565b610dab610164565b80610db5816103a3565b0390f35b61016a565b91909160a081840312610e2957610dd7835f830161024a565b92610de5816020840161024a565b92610df38260408501610270565b92610e018360608301610270565b92608082013567ffffffffffffffff8111610e2457610e20920161028b565b9091565b610172565b61016e565b34610e6557610e61610e50610e44366004610dbe565b94939093929192612049565b610e58610164565b91829182610337565b0390f35b61016a565b919061010083820312610ee657610e83815f8501610270565b92610e918260208301610270565b92610e9f8360408401610270565b92610ead816060850161078c565b92610ebb8260808301610761565b92610ee3610ecc8460a08501610761565b93610eda8160c08601610761565b9360e00161024a565b90565b61016e565b610f08610ef9366004610e6a565b96959095949194939293612458565b610f10610164565b80610f1a816103a3565b0390f35b610f2790610259565b9052565b9190610f3e905f60208501940190610f1e565b565b34610f7057610f503660046106d7565b610f6c610f5b6127bb565b610f63610164565b91829182610f2b565b0390f35b61016a565b5f80fd5b5f90565b610f85610f79565b5080610fa0610f9a630a85bd0160e11b610176565b91610176565b148015610fd6575b908115610fb4575b5090565b9050610fcf610fc96301ffc9a760e01b610176565b91610176565b145f610fb0565b5080610ff1610feb630271189760e51b610176565b91610176565b14610fa8565b5f90565b5050505050611008610ff7565b50630a85bd0160e11b90565b611025906110206128f7565b61104a565b565b61103090610bb2565b90565b61103c5f610a6d565b90565b611047611033565b90565b8061106661106061105a30611027565b31610259565b91610259565b116110815761107f90339061107961103f565b91612991565b565b611089610164565b631e9acf1760e31b8152806110a0600482016103a3565b0390fd5b6110ad90611014565b565b5f80fd5b60e01b90565b5f9103126110c357565b61016e565b9160206110e99294936110e260408201965f830190610f1e565b0190610f1e565b565b6110f3610164565b3d5f823e3d90fd5b61110b611106611cec565b610bbe565b90639abe7903903492919291349193813b1561118c575f9361113e91611149611132610164565b978896879586946110b3565b8452600484016110c8565b03925af180156111875761115b575b50565b61117a905f3d8111611180575b61117281836105a3565b8101906110b9565b5f611158565b503d611168565b6110eb565b6110af565b5090565b5090565b5090565b90565b6111b46111af6111b99261119d565b610b93565b610259565b90565b5f7f77726f6e67206172726179206c656e6774687300000000000000000000000000910152565b6111f06013602092610ae9565b6111f9816111bc565b0190565b6112129060208101905f8183039101526111e3565b90565b1561121c57565b611224610164565b62461bcd60e51b81528061123a600482016111fd565b0390fd5b600161124a9101610259565b90565b634e487b7160e01b5f52603260045260245ffd5b9190811015611271576020020190565b61124d565b3561128081610236565b90565b9190811015611293576020020190565b61124d565b356112a28161025c565b90565b5f80fd5b5f80fd5b5f80fd5b9035906001602003813603038212156112f3570180359067ffffffffffffffff82116112ee576020019160018202360383136112e957565b6112ad565b6112a9565b6112a5565b9082101561131357602061130f92028101906112b1565b9091565b61124d565b61132391369161060f565b90565b919092959495611334612a42565b61133f838590611191565b61135b611355611350888b90611195565b610259565b91610259565b14806114a6575b61136b90611215565b611376828290611199565b6113886113825f6111a0565b91610259565b145f1461141357505061139a5f6111a0565b5b806113b86113b26113ad858790611191565b610259565b91610259565b101561140a57611405906114006113d96113d485878591611261565b611276565b5f6113fa6113f46113ec8a8d88916112f8565b9190936111a0565b92611318565b91612991565b61123e565b61139b565b5050505090505b565b916114215f979492976111a0565b5b8061143f611439611434858790611191565b610259565b91610259565b1015611499576114949061148f61146061145b85878591611261565b611276565b61147461146f8c898691611283565b611298565b6114896114838b8b87916112f8565b90611318565b91612991565b61123e565b611422565b5050505050509050611411565b506114b2828290611199565b6114c46114be5f6111a0565b91610259565b1480156114d1575b611362565b5061136b6114e0838390611199565b6114fc6114f66114f1898c90611195565b610259565b91610259565b1490506114cc565b9061151691611511612aaa565b611518565b565b9061152b9161152681612b58565b612bc8565b565b9061153791611504565b565b5f90565b61154e90611549612cd4565b6115a1565b90565b90565b5f1b90565b61156d61156861157292611551565b611554565b6106e6565b90565b61159e7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc611559565b90565b506115aa611575565b90565b6115bd6115b8611539565b61153d565b90565b906115d998979695949392916115d46128f7565b611896565b565b6115e560406105cc565b90565b606090565b6115f86101806105cc565b90565b5f90565b5f90565b5f90565b5f90565b5f90565b606090565b61161c6115ed565b90602080808080808080808080808d6116336115fb565b81520161163e6115ff565b815201611649611603565b815201611654611603565b81520161165f611603565b81520161166a611603565b815201611675611607565b815201611680611607565b81520161168b61160b565b81520161169661160f565b8152016116a161160f565b8152016116ac61160f565b81525050565b6116ba611614565b90565b6116c56115db565b90602080836116d26115e8565b8152016116dd6116b2565b81525050565b6116eb6116bd565b90565b6116f860406105cc565b90565b6117036116ee565b906020808361171061160b565b81520161171b611607565b81525050565b6117296116fb565b90565b9061173690610259565b9052565b906117449061022a565b9052565b90565b60ff1690565b61176561176061176a92611748565b610b93565b61174b565b90565b906117779061174b565b9052565b9061178590610770565b9052565b9061179390610740565b9052565b6117a19051610740565b90565b5f80fd5b905051906117b582610236565b565b91906040838203126117f1576117ea906117d160406105cc565b936117de825f83016117a8565b5f8601526020016117a8565b6020830152565b6117a4565b9060408282031261180f5761180c915f016117b7565b90565b61016e565b61181d90610740565b9052565b9190611834905f60208501940190611814565b565b611840905161022a565b90565b61184c90610259565b9052565b6118599061022a565b9052565b9060208061187f936118755f8201515f860190611843565b0151910190611850565b565b9190611894905f6040850194019061185d565b565b919490959296936118a56116e3565b956118ae611721565b97885f01906118bc9161172c565b87602001906118ca9161173a565b60fe6118d590611751565b86602001515f01906118e69161176d565b8560200151602001906118f89161177b565b84602001516040019061190a91611789565b83602001516060019061191c91611789565b82602001516080019061192e91611789565b816020015160a0019061194091611789565b611948611cec565b61195190610bbe565b936342f1ec6994826020015160600161196990611797565b95611972610164565b809761197e82936110b3565b8252600482019061198e91611821565b03815a93604094fa928315611a41576119ec610160956119df611a0d946119d36119c76020809a6119ff9d5f91611a13575b5001611836565b60c08a8a01510161173a565b60e0888801510161173a565b610100868601510161172c565b6119f4610164565b958691858301611881565b8482018103825203856105a3565b01510152565b611a34915060403d8111611a3a575b611a2c81836105a3565b8101906117f6565b5f6119c0565b503d611a22565b6110eb565b90611a5798979695949392916115c0565b565b611a7390611a65610f79565b50611a6e612d39565b612d85565b90565b634e487b7160e01b5f52601160045260245ffd5b611a99611a9f91939293610259565b92610259565b8201809211611aaa57565b611a76565b15611ab657565b5f80fd5b611ac390610770565b9052565b959391989796949290986101008701995f8801611ae391610f1e565b60208701611af091610f1e565b60408601611afd91610f1e565b60608501611b0a91611aba565b60808401611b1791611814565b60a08301611b2491611814565b60c08201611b3191611814565b60e001611b3d916109c0565b565b9297949390611b709097929697611b69611b63611b5e34938d90611a8a565b610259565b91610259565b1015611aaf565b85611b83611b7d5f6111a0565b91610259565b03611b93575b5050505050505050565b611b9c30611027565b9163fa28b48195611bae888b90611a8a565b939693949799929598919091873b15611c36575f99611bdf97611bea95611bd3610164565b9d8e9c8d9b8c9a6110b3565b8a5260048a01611ac7565b03925af18015611c3157611c05575b80808080808080611b89565b611c24905f3d8111611c2a575b611c1c81836105a3565b8101906110b9565b5f611bf9565b503d611c12565b6110eb565b6110af565b611c4c90611c476128f7565b611c4e565b565b611c5e611c59611cec565b610bbe565b906339875d1a90823b15611cd857611c9592611c8a5f8094611c7e610164565b968795869485936110b3565b835260048301610f2b565b03925af18015611cd357611ca7575b50565b611cc6905f3d8111611ccc575b611cbe81836105a3565b8101906110b9565b5f611ca4565b503d611cb4565b6110eb565b6110af565b611ce690611c3b565b565b5f90565b611cf4611ce8565b507f000000000000000000000000000000000000000000000000000000000000000090565b611d3993611d3391939293611d2c612a42565b9392611318565b91612991565b565b5050505050505050611d4b610ff7565b5063bc197c8160e01b90565b60401c90565b60ff1690565b611d6f611d7491611d57565b611d5d565b90565b611d819054611d63565b90565b5f1c90565b67ffffffffffffffff1690565b611da2611da791611d84565b611d89565b90565b611db49054611d96565b90565b611dcb611dc6611dd09261119d565b610b93565b610740565b90565b90565b611dea611de5611def92611dd3565b610b93565b610740565b90565b611dfb90610bb2565b90565b90611e1167ffffffffffffffff91611554565b9181191691161790565b611e2f611e2a611e3492610740565b610b93565b610740565b90565b90565b90611e4f611e4a611e5692611e1b565b611e37565b8254611dfe565b9055565b60401b90565b90611e7468ff000000000000000091611e5a565b9181191691161790565b611e87906101c3565b90565b90565b90611ea2611e9d611ea992611e7e565b611e8a565b8254611e60565b9055565b611eb690611dd6565b9052565b9190611ecd905f60208501940190611ead565b565b611ed7612db7565b90611eec611ee65f8401611d77565b156101c3565b90611ef85f8401611daa565b80611f0b611f055f611db7565b91610740565b148061202c575b90611f26611f206001611dd6565b91610740565b1480612004575b611f389091156101c3565b9081611ff3575b50611fd057611f6890611f5d611f556001611dd6565b5f8601611e3a565b82611fbe575b612033565b611f70575b50565b611f7d905f809101611e8d565b6001611fb57fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d291611fac610164565b91829182611eba565b0390a15f611f6d565b611fcb60015f8601611e8d565b611f63565b611fd8610164565b63f92ee8a960e01b815280611fef600482016103a3565b0390fd5b611ffe9150156101c3565b5f611f3f565b50611f3861201130611df2565b3b61202461201e5f6111a0565b91610259565b149050611f2d565b5082611f12565b61203c90612e3d565b565b61204790611ecf565b565b505050505050612057610ff7565b5063f23a6e6160e01b90565b63ffffffff1690565b61208061207b61208592612063565b6110b3565b610176565b90565b6040906120b16120b894969593966120a760608401985f8501906109c0565b6020830190610f1e565b0190610f1e565b565b90565b6120d16120cc6120d6926120ba565b610b93565b61174b565b90565b905051906120e68261074d565b565b90602082820312612101576120fe915f016120d9565b90565b61016e565b5190565b60209181520190565b60200190565b6121229061174b565b9052565b61212f90610740565b9052565b5190565b60209181520190565b61215f61216860209361216d9361215681612133565b93848093612137565b95869101610af2565b610585565b0190565b6122099160e061010082019261218d5f8201515f850190612126565b61219f60208201516020850190612126565b6121b160408201516040850190612126565b6121c360608201516060850190612126565b6121d560808201516080850190612126565b6121e760a082015160a0850190612126565b6121f960c082015160c0850190612126565b01519060e0818403910152612140565b90565b6122949160c061228360e083016122295f8601515f860190612119565b61223b60208601516020860190612119565b61224d60408601516040860190611843565b61225f60608601516060860190611850565b61227160808601516080860190611850565b60a085015184820360a0860152612171565b9201519060c0818403910152612171565b90565b906122a19161220c565b90565b60200190565b906122be6122b783612106565b809261210a565b90816122cf60208302840194612113565b925f915b8383106122e257505050505090565b909192939460206123046122fe83856001950387528951612297565b976122a4565b93019301919392906122d3565b61231a90610770565b9052565b61240c916101606123fa6123e661018084016123405f8701515f870190612119565b61235260208701516020870190612311565b61236460408701516040870190612126565b61237660608701516060870190612126565b61238860808701516080870190612126565b61239a60a087015160a0870190612126565b6123ac60c087015160c0870190611850565b6123be60e087015160e0870190611850565b6123d2610100870151610100870190611843565b610120860151858203610120870152612140565b610140850151848203610140860152612140565b92015190610160818403910152612140565b90565b61243d91602061242c604083015f8501518482035f8601526122aa565b92015190602081840391015261231e565b90565b6124559160208201915f81840391015261240f565b90565b946125376124e360046124db61255f96979b999a95989a6124968a61248f6124896124848d3494611a8a565b610259565b91610259565b1015611aaf565b6124cc63bb8ce5266124a730611027565b926124b38d919261206c565b936124bc610164565b9687956020870190815201612088565b602082018103825203826105a3565b958790611a8a565b9761252a6124ef6116e3565b9a6125046124fb611721565b995f8b0161172c565b61251e8c5f602061251560ff6120bd565b9201510161176d565b6020808d01510161177b565b604060208b015101611789565b6020612549612544611cec565b610bbe565b63750c67ba90612557610164565b9586926110b3565b8252818061256f600482016103a3565b03915afa9081156127855761259a6125a7926125b4955f91612757575b50606060208c015101611789565b608060208a015101611789565b60a0602088015101611789565b61260260406125c96125c4611cec565b610bbe565b6342f1ec69906125f76125e2606060208c015101611797565b926125eb610164565b958694859384936110b3565b835260048301611821565b03915afa9485156127525761264c6126879561263f61263260206126789a61265a975f91612724575b5001611836565b60c060208c01510161173a565b60e060208a01510161173a565b61010060208801510161172c565b6101406020860151015261266c610164565b92839160208301611881565b602082018103825203826105a3565b610160602083015101526126a161269c611cec565b610bbe565b90634e12a2ae349290929190803b1561271f576126d15f936126dc956126c5610164565b968795869485936110b3565b835260048301612440565b03925af1801561271a576126ee575b50565b61270d905f3d8111612713575b61270581836105a3565b8101906110b9565b5f6126eb565b503d6126fb565b6110eb565b6110af565b612745915060403d811161274b575b61273d81836105a3565b8101906117f6565b5f61262b565b503d612733565b6110eb565b612778915060203d811161277e575b61277081836105a3565b8101906120e8565b5f61258c565b503d612766565b6110eb565b5f90565b9050519061279b8261025c565b565b906020828203126127b6576127b3915f0161278e565b90565b61016e565b6127c361278a565b5061280b60206127d96127d4611cec565b610bbe565b63653e75ec906128006127eb30611027565b926127f4610164565b958694859384936110b3565b8352600483016109cd565b03915afa90811561284f575f91612821575b5090565b612842915060203d8111612848575b61283a81836105a3565b81019061279d565b5f61281d565b503d612830565b6110eb565b61286061286591611d84565b610982565b90565b6128729054612854565b90565b5f7f6f6e6c79206f776e657200000000000000000000000000000000000000000000910152565b6128a9600a602092610ae9565b6128b281612875565b0190565b6128cb9060208101905f81830391015261289c565b90565b156128d557565b6128dd610164565b62461bcd60e51b8152806128f3600482016128b6565b0390fd5b3361291261290c6129075f612868565b61022a565b9161022a565b148015612925575b612923906128ce565b565b506129233361294461293e61293930611027565b61022a565b9161022a565b14905061291a565b9061295e612959836105e1565b6105cc565b918252565b606090565b3d5f14612983576129783d61294c565b903d5f602084013e5b565b61298b612963565b90612981565b905f92839291602082019151925af16129b26129ab612968565b91156101c3565b6129b95750565b602081519101fd5b5f7f6163636f756e743a206e6f74204f776e6572206f7220456e747279506f696e74910152565b6129f460208092610ae9565b6129fd816129c1565b0190565b612a169060208101905f8183039101526129e8565b90565b15612a2057565b612a28610164565b62461bcd60e51b815280612a3e60048201612a01565b0390fd5b33612a64612a5e612a59612a54611cec565b610bbe565b61022a565b9161022a565b148015612a77575b612a7590612a19565b565b50612a7533612a96612a90612a8b5f612868565b61022a565b9161022a565b149050612a6c565b612aa790610bb2565b90565b612ab330612a9e565b612ae5612adf7f000000000000000000000000000000000000000000000000000000000000000061022a565b9161022a565b148015612b16575b612af357565b612afb610164565b63703e46dd60e11b815280612b12600482016103a3565b0390fd5b50612b1f612ec0565b612b51612b4b7f000000000000000000000000000000000000000000000000000000000000000061022a565b9161022a565b1415612aed565b50612b616128f7565b565b612b6c90610b96565b90565b612b7890612b63565b90565b612b8490610bb2565b90565b612b90816106e6565b03612b9757565b5f80fd5b90505190612ba882612b87565b565b90602082820312612bc357612bc0915f01612b9b565b90565b61016e565b9190612bf66020612be0612bdb86612b6f565b612b7b565b6352d1902d90612bee610164565b9384926110b3565b82528180612c06600482016103a3565b03915afa80915f92612ca4575b50155f14612c4e575050906001612c2857505b565b612c4a90612c34610164565b918291634c9c8ce360e01b8352600483016109cd565b0390fd5b9283612c69612c63612c5e611575565b6106e6565b916106e6565b03612c7e57612c79929350612ee6565b612c26565b612ca084612c8a610164565b918291632a87526960e21b8352600483016106f6565b0390fd5b612cc691925060203d8111612ccd575b612cbe81836105a3565b810190612baa565b905f612c13565b503d612cb4565b612cdd30612a9e565b612d0f612d097f000000000000000000000000000000000000000000000000000000000000000061022a565b9161022a565b03612d1657565b612d1e610164565b63703e46dd60e11b815280612d35600482016103a3565b0390fd5b33612d5b612d55612d50612d4b611cec565b610bbe565b61022a565b9161022a565b03612d6257565b612d6a610164565b637324df4760e01b815280612d81600482016103a3565b0390fd5b612d8d610f79565b50612da9612da3612d9d5f612868565b9261022a565b9161022a565b03612db357600190565b5f90565b7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a0090565b90612dec60018060a01b0391611554565b9181191691161790565b612dff90610bb2565b90565b90565b90612e1a612e15612e2192612df6565b612e02565b8254612ddb565b9055565b612e2e90610b96565b90565b612e3a90612e25565b90565b612e47905f612e05565b7f0000000000000000000000000000000000000000000000000000000000000000612e715f612868565b612ea4612e9e7ff75ce79a4abcc8ed48f3b3544cd773dd667599027b50a42ff4bbf68f1a65e7b093612e31565b91612df6565b91612ead610164565b80612eb7816103a3565b0390a3565b5f90565b612ec8612ebc565b50612ee35f612edd612ed8611575565b612f6f565b01612868565b90565b90612ef082612f72565b81612f1b7fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b91612df6565b90612f24610164565b80612f2e816103a3565b0390a2612f3a81612133565b612f4c612f465f6111a0565b91610259565b115f14612f6057612f5c9161300b565b505b565b5050612f6a612fce565b612f5e565b90565b803b612f86612f805f6111a0565b91610259565b14612fa857612fa6905f612fa0612f9b611575565b612f6f565b01612e05565b565b612fca90612fb4610164565b918291634c9c8ce360e01b8352600483016109cd565b0390fd5b34612fe1612fdb5f6111a0565b91610259565b11612fe857565b612ff0610164565b63b398979f60e01b815280613007600482016103a3565b0390fd5b5f8061303793613019612963565b508390602081019051915af49061302e612968565b9091909161303a565b90565b9061304e90613047612963565b50156101c3565b5f1461305a57506130c5565b61306382612133565b61307561306f5f6111a0565b91610259565b14806130aa575b613084575090565b6130a690613090610164565b918291639996b31560e01b8352600483016109cd565b0390fd5b50803b6130bf6130b95f6111a0565b91610259565b1461307c565b6130ce81612133565b6130e06130da5f6111a0565b91610259565b115f146130ef57805190602001fd5b6130f7610164565b63d6bda27560e01b81528061310e600482016103a3565b0390fdfea264697066735822122025c1fb3d794c836a351d2a1c42ba7e7431e59b29d60cfce471781448f5614ce664736f6c63430008180033",
}

// SimpleAccountFactoryABI is the input ABI used to generate the binding from.
// Deprecated: Use SimpleAccountFactoryMetaData.ABI instead.
var SimpleAccountFactoryABI = SimpleAccountFactoryMetaData.ABI

// SimpleAccountFactoryBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use SimpleAccountFactoryMetaData.Bin instead.
var SimpleAccountFactoryBin = SimpleAccountFactoryMetaData.Bin

// DeploySimpleAccountFactory deploys a new Ethereum contract, binding an instance of SimpleAccountFactory to it.
func DeploySimpleAccountFactory(auth *bind.TransactOpts, backend bind.ContractBackend, _entryPoint common.Address) (common.Address, *types.Transaction, *SimpleAccountFactory, error) {
	parsed, err := SimpleAccountFactoryMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(SimpleAccountFactoryBin), backend, _entryPoint)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &SimpleAccountFactory{SimpleAccountFactoryCaller: SimpleAccountFactoryCaller{contract: contract}, SimpleAccountFactoryTransactor: SimpleAccountFactoryTransactor{contract: contract}, SimpleAccountFactoryFilterer: SimpleAccountFactoryFilterer{contract: contract}}, nil
}

// SimpleAccountFactory is an auto generated Go binding around an Ethereum contract.
type SimpleAccountFactory struct {
	SimpleAccountFactoryCaller     // Read-only binding to the contract
	SimpleAccountFactoryTransactor // Write-only binding to the contract
	SimpleAccountFactoryFilterer   // Log filterer for contract events
}

// SimpleAccountFactoryCaller is an auto generated read-only Go binding around an Ethereum contract.
type SimpleAccountFactoryCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// SimpleAccountFactoryTransactor is an auto generated write-only Go binding around an Ethereum contract.
type SimpleAccountFactoryTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// SimpleAccountFactoryFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type SimpleAccountFactoryFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// SimpleAccountFactorySession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type SimpleAccountFactorySession struct {
	Contract     *SimpleAccountFactory // Generic contract binding to set the session for
	CallOpts     bind.CallOpts         // Call options to use throughout this session
	TransactOpts bind.TransactOpts     // Transaction auth options to use throughout this session
}

// SimpleAccountFactoryCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type SimpleAccountFactoryCallerSession struct {
	Contract *SimpleAccountFactoryCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts               // Call options to use throughout this session
}

// SimpleAccountFactoryTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type SimpleAccountFactoryTransactorSession struct {
	Contract     *SimpleAccountFactoryTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts               // Transaction auth options to use throughout this session
}

// SimpleAccountFactoryRaw is an auto generated low-level Go binding around an Ethereum contract.
type SimpleAccountFactoryRaw struct {
	Contract *SimpleAccountFactory // Generic contract binding to access the raw methods on
}

// SimpleAccountFactoryCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type SimpleAccountFactoryCallerRaw struct {
	Contract *SimpleAccountFactoryCaller // Generic read-only contract binding to access the raw methods on
}

// SimpleAccountFactoryTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type SimpleAccountFactoryTransactorRaw struct {
	Contract *SimpleAccountFactoryTransactor // Generic write-only contract binding to access the raw methods on
}

// NewSimpleAccountFactory creates a new instance of SimpleAccountFactory, bound to a specific deployed contract.
func NewSimpleAccountFactory(address common.Address, backend bind.ContractBackend) (*SimpleAccountFactory, error) {
	contract, err := bindSimpleAccountFactory(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &SimpleAccountFactory{SimpleAccountFactoryCaller: SimpleAccountFactoryCaller{contract: contract}, SimpleAccountFactoryTransactor: SimpleAccountFactoryTransactor{contract: contract}, SimpleAccountFactoryFilterer: SimpleAccountFactoryFilterer{contract: contract}}, nil
}

// NewSimpleAccountFactoryCaller creates a new read-only instance of SimpleAccountFactory, bound to a specific deployed contract.
func NewSimpleAccountFactoryCaller(address common.Address, caller bind.ContractCaller) (*SimpleAccountFactoryCaller, error) {
	contract, err := bindSimpleAccountFactory(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &SimpleAccountFactoryCaller{contract: contract}, nil
}

// NewSimpleAccountFactoryTransactor creates a new write-only instance of SimpleAccountFactory, bound to a specific deployed contract.
func NewSimpleAccountFactoryTransactor(address common.Address, transactor bind.ContractTransactor) (*SimpleAccountFactoryTransactor, error) {
	contract, err := bindSimpleAccountFactory(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &SimpleAccountFactoryTransactor{contract: contract}, nil
}

// NewSimpleAccountFactoryFilterer creates a new log filterer instance of SimpleAccountFactory, bound to a specific deployed contract.
func NewSimpleAccountFactoryFilterer(address common.Address, filterer bind.ContractFilterer) (*SimpleAccountFactoryFilterer, error) {
	contract, err := bindSimpleAccountFactory(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &SimpleAccountFactoryFilterer{contract: contract}, nil
}

// bindSimpleAccountFactory binds a generic wrapper to an already deployed contract.
func bindSimpleAccountFactory(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := SimpleAccountFactoryMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_SimpleAccountFactory *SimpleAccountFactoryRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _SimpleAccountFactory.Contract.SimpleAccountFactoryCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_SimpleAccountFactory *SimpleAccountFactoryRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _SimpleAccountFactory.Contract.SimpleAccountFactoryTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_SimpleAccountFactory *SimpleAccountFactoryRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _SimpleAccountFactory.Contract.SimpleAccountFactoryTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_SimpleAccountFactory *SimpleAccountFactoryCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _SimpleAccountFactory.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_SimpleAccountFactory *SimpleAccountFactoryTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _SimpleAccountFactory.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_SimpleAccountFactory *SimpleAccountFactoryTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _SimpleAccountFactory.Contract.contract.Transact(opts, method, params...)
}

// AccountImplementation is a free data retrieval call binding the contract method 0x11464fbe.
//
// Solidity: function accountImplementation() view returns(address)
func (_SimpleAccountFactory *SimpleAccountFactoryCaller) AccountImplementation(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _SimpleAccountFactory.contract.Call(opts, &out, "accountImplementation")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// AccountImplementation is a free data retrieval call binding the contract method 0x11464fbe.
//
// Solidity: function accountImplementation() view returns(address)
func (_SimpleAccountFactory *SimpleAccountFactorySession) AccountImplementation() (common.Address, error) {
	return _SimpleAccountFactory.Contract.AccountImplementation(&_SimpleAccountFactory.CallOpts)
}

// AccountImplementation is a free data retrieval call binding the contract method 0x11464fbe.
//
// Solidity: function accountImplementation() view returns(address)
func (_SimpleAccountFactory *SimpleAccountFactoryCallerSession) AccountImplementation() (common.Address, error) {
	return _SimpleAccountFactory.Contract.AccountImplementation(&_SimpleAccountFactory.CallOpts)
}

// GetAccountAddress is a free data retrieval call binding the contract method 0x0d253d76.
//
// Solidity: function getAccountAddress(address owner, uint256 userId) view returns(address)
func (_SimpleAccountFactory *SimpleAccountFactoryCaller) GetAccountAddress(opts *bind.CallOpts, owner common.Address, userId *big.Int) (common.Address, error) {
	var out []interface{}
	err := _SimpleAccountFactory.contract.Call(opts, &out, "getAccountAddress", owner, userId)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetAccountAddress is a free data retrieval call binding the contract method 0x0d253d76.
//
// Solidity: function getAccountAddress(address owner, uint256 userId) view returns(address)
func (_SimpleAccountFactory *SimpleAccountFactorySession) GetAccountAddress(owner common.Address, userId *big.Int) (common.Address, error) {
	return _SimpleAccountFactory.Contract.GetAccountAddress(&_SimpleAccountFactory.CallOpts, owner, userId)
}

// GetAccountAddress is a free data retrieval call binding the contract method 0x0d253d76.
//
// Solidity: function getAccountAddress(address owner, uint256 userId) view returns(address)
func (_SimpleAccountFactory *SimpleAccountFactoryCallerSession) GetAccountAddress(owner common.Address, userId *big.Int) (common.Address, error) {
	return _SimpleAccountFactory.Contract.GetAccountAddress(&_SimpleAccountFactory.CallOpts, owner, userId)
}

// GetUserAccountInfo is a free data retrieval call binding the contract method 0x0cc06221.
//
// Solidity: function getUserAccountInfo(address _owner) view returns((uint256,bytes1,address))
func (_SimpleAccountFactory *SimpleAccountFactoryCaller) GetUserAccountInfo(opts *bind.CallOpts, _owner common.Address) (ZKVizingAccountFactoryUserZKVizingAccountInfo, error) {
	var out []interface{}
	err := _SimpleAccountFactory.contract.Call(opts, &out, "getUserAccountInfo", _owner)

	if err != nil {
		return *new(ZKVizingAccountFactoryUserZKVizingAccountInfo), err
	}

	out0 := *abi.ConvertType(out[0], new(ZKVizingAccountFactoryUserZKVizingAccountInfo)).(*ZKVizingAccountFactoryUserZKVizingAccountInfo)

	return out0, err

}

// GetUserAccountInfo is a free data retrieval call binding the contract method 0x0cc06221.
//
// Solidity: function getUserAccountInfo(address _owner) view returns((uint256,bytes1,address))
func (_SimpleAccountFactory *SimpleAccountFactorySession) GetUserAccountInfo(_owner common.Address) (ZKVizingAccountFactoryUserZKVizingAccountInfo, error) {
	return _SimpleAccountFactory.Contract.GetUserAccountInfo(&_SimpleAccountFactory.CallOpts, _owner)
}

// GetUserAccountInfo is a free data retrieval call binding the contract method 0x0cc06221.
//
// Solidity: function getUserAccountInfo(address _owner) view returns((uint256,bytes1,address))
func (_SimpleAccountFactory *SimpleAccountFactoryCallerSession) GetUserAccountInfo(_owner common.Address) (ZKVizingAccountFactoryUserZKVizingAccountInfo, error) {
	return _SimpleAccountFactory.Contract.GetUserAccountInfo(&_SimpleAccountFactory.CallOpts, _owner)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_SimpleAccountFactory *SimpleAccountFactoryCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _SimpleAccountFactory.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_SimpleAccountFactory *SimpleAccountFactorySession) Owner() (common.Address, error) {
	return _SimpleAccountFactory.Contract.Owner(&_SimpleAccountFactory.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_SimpleAccountFactory *SimpleAccountFactoryCallerSession) Owner() (common.Address, error) {
	return _SimpleAccountFactory.Contract.Owner(&_SimpleAccountFactory.CallOpts)
}

// CreateAccount is a paid mutator transaction binding the contract method 0x5fbfb9cf.
//
// Solidity: function createAccount(address owner, uint256 userId) returns(address ret)
func (_SimpleAccountFactory *SimpleAccountFactoryTransactor) CreateAccount(opts *bind.TransactOpts, owner common.Address, userId *big.Int) (*types.Transaction, error) {
	return _SimpleAccountFactory.contract.Transact(opts, "createAccount", owner, userId)
}

// CreateAccount is a paid mutator transaction binding the contract method 0x5fbfb9cf.
//
// Solidity: function createAccount(address owner, uint256 userId) returns(address ret)
func (_SimpleAccountFactory *SimpleAccountFactorySession) CreateAccount(owner common.Address, userId *big.Int) (*types.Transaction, error) {
	return _SimpleAccountFactory.Contract.CreateAccount(&_SimpleAccountFactory.TransactOpts, owner, userId)
}

// CreateAccount is a paid mutator transaction binding the contract method 0x5fbfb9cf.
//
// Solidity: function createAccount(address owner, uint256 userId) returns(address ret)
func (_SimpleAccountFactory *SimpleAccountFactoryTransactorSession) CreateAccount(owner common.Address, userId *big.Int) (*types.Transaction, error) {
	return _SimpleAccountFactory.Contract.CreateAccount(&_SimpleAccountFactory.TransactOpts, owner, userId)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_SimpleAccountFactory *SimpleAccountFactoryTransactor) RenounceOwnership(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _SimpleAccountFactory.contract.Transact(opts, "renounceOwnership")
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_SimpleAccountFactory *SimpleAccountFactorySession) RenounceOwnership() (*types.Transaction, error) {
	return _SimpleAccountFactory.Contract.RenounceOwnership(&_SimpleAccountFactory.TransactOpts)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_SimpleAccountFactory *SimpleAccountFactoryTransactorSession) RenounceOwnership() (*types.Transaction, error) {
	return _SimpleAccountFactory.Contract.RenounceOwnership(&_SimpleAccountFactory.TransactOpts)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_SimpleAccountFactory *SimpleAccountFactoryTransactor) TransferOwnership(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _SimpleAccountFactory.contract.Transact(opts, "transferOwnership", newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_SimpleAccountFactory *SimpleAccountFactorySession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _SimpleAccountFactory.Contract.TransferOwnership(&_SimpleAccountFactory.TransactOpts, newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_SimpleAccountFactory *SimpleAccountFactoryTransactorSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _SimpleAccountFactory.Contract.TransferOwnership(&_SimpleAccountFactory.TransactOpts, newOwner)
}

// UpdateBundler is a paid mutator transaction binding the contract method 0xc7217f7f.
//
// Solidity: function updateBundler(address _bundler) returns()
func (_SimpleAccountFactory *SimpleAccountFactoryTransactor) UpdateBundler(opts *bind.TransactOpts, _bundler common.Address) (*types.Transaction, error) {
	return _SimpleAccountFactory.contract.Transact(opts, "updateBundler", _bundler)
}

// UpdateBundler is a paid mutator transaction binding the contract method 0xc7217f7f.
//
// Solidity: function updateBundler(address _bundler) returns()
func (_SimpleAccountFactory *SimpleAccountFactorySession) UpdateBundler(_bundler common.Address) (*types.Transaction, error) {
	return _SimpleAccountFactory.Contract.UpdateBundler(&_SimpleAccountFactory.TransactOpts, _bundler)
}

// UpdateBundler is a paid mutator transaction binding the contract method 0xc7217f7f.
//
// Solidity: function updateBundler(address _bundler) returns()
func (_SimpleAccountFactory *SimpleAccountFactoryTransactorSession) UpdateBundler(_bundler common.Address) (*types.Transaction, error) {
	return _SimpleAccountFactory.Contract.UpdateBundler(&_SimpleAccountFactory.TransactOpts, _bundler)
}

// SimpleAccountFactoryAccountCreatedIterator is returned from FilterAccountCreated and is used to iterate over the raw logs and unpacked data for AccountCreated events raised by the SimpleAccountFactory contract.
type SimpleAccountFactoryAccountCreatedIterator struct {
	Event *SimpleAccountFactoryAccountCreated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *SimpleAccountFactoryAccountCreatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(SimpleAccountFactoryAccountCreated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(SimpleAccountFactoryAccountCreated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *SimpleAccountFactoryAccountCreatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *SimpleAccountFactoryAccountCreatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// SimpleAccountFactoryAccountCreated represents a AccountCreated event raised by the SimpleAccountFactory contract.
type SimpleAccountFactoryAccountCreated struct {
	Account common.Address
	Owner   common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterAccountCreated is a free log retrieval operation binding the contract event 0xac631f3001b55ea1509cf3d7e74898f85392a61a76e8149181ae1259622dabc8.
//
// Solidity: event AccountCreated(address indexed account, address owner)
func (_SimpleAccountFactory *SimpleAccountFactoryFilterer) FilterAccountCreated(opts *bind.FilterOpts, account []common.Address) (*SimpleAccountFactoryAccountCreatedIterator, error) {

	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}

	logs, sub, err := _SimpleAccountFactory.contract.FilterLogs(opts, "AccountCreated", accountRule)
	if err != nil {
		return nil, err
	}
	return &SimpleAccountFactoryAccountCreatedIterator{contract: _SimpleAccountFactory.contract, event: "AccountCreated", logs: logs, sub: sub}, nil
}

// WatchAccountCreated is a free log subscription operation binding the contract event 0xac631f3001b55ea1509cf3d7e74898f85392a61a76e8149181ae1259622dabc8.
//
// Solidity: event AccountCreated(address indexed account, address owner)
func (_SimpleAccountFactory *SimpleAccountFactoryFilterer) WatchAccountCreated(opts *bind.WatchOpts, sink chan<- *SimpleAccountFactoryAccountCreated, account []common.Address) (event.Subscription, error) {

	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}

	logs, sub, err := _SimpleAccountFactory.contract.WatchLogs(opts, "AccountCreated", accountRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(SimpleAccountFactoryAccountCreated)
				if err := _SimpleAccountFactory.contract.UnpackLog(event, "AccountCreated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseAccountCreated is a log parse operation binding the contract event 0xac631f3001b55ea1509cf3d7e74898f85392a61a76e8149181ae1259622dabc8.
//
// Solidity: event AccountCreated(address indexed account, address owner)
func (_SimpleAccountFactory *SimpleAccountFactoryFilterer) ParseAccountCreated(log types.Log) (*SimpleAccountFactoryAccountCreated, error) {
	event := new(SimpleAccountFactoryAccountCreated)
	if err := _SimpleAccountFactory.contract.UnpackLog(event, "AccountCreated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// SimpleAccountFactoryOwnershipTransferredIterator is returned from FilterOwnershipTransferred and is used to iterate over the raw logs and unpacked data for OwnershipTransferred events raised by the SimpleAccountFactory contract.
type SimpleAccountFactoryOwnershipTransferredIterator struct {
	Event *SimpleAccountFactoryOwnershipTransferred // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *SimpleAccountFactoryOwnershipTransferredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(SimpleAccountFactoryOwnershipTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(SimpleAccountFactoryOwnershipTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *SimpleAccountFactoryOwnershipTransferredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *SimpleAccountFactoryOwnershipTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// SimpleAccountFactoryOwnershipTransferred represents a OwnershipTransferred event raised by the SimpleAccountFactory contract.
type SimpleAccountFactoryOwnershipTransferred struct {
	PreviousOwner common.Address
	NewOwner      common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterOwnershipTransferred is a free log retrieval operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_SimpleAccountFactory *SimpleAccountFactoryFilterer) FilterOwnershipTransferred(opts *bind.FilterOpts, previousOwner []common.Address, newOwner []common.Address) (*SimpleAccountFactoryOwnershipTransferredIterator, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _SimpleAccountFactory.contract.FilterLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return &SimpleAccountFactoryOwnershipTransferredIterator{contract: _SimpleAccountFactory.contract, event: "OwnershipTransferred", logs: logs, sub: sub}, nil
}

// WatchOwnershipTransferred is a free log subscription operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_SimpleAccountFactory *SimpleAccountFactoryFilterer) WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *SimpleAccountFactoryOwnershipTransferred, previousOwner []common.Address, newOwner []common.Address) (event.Subscription, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _SimpleAccountFactory.contract.WatchLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(SimpleAccountFactoryOwnershipTransferred)
				if err := _SimpleAccountFactory.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOwnershipTransferred is a log parse operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_SimpleAccountFactory *SimpleAccountFactoryFilterer) ParseOwnershipTransferred(log types.Log) (*SimpleAccountFactoryOwnershipTransferred, error) {
	event := new(SimpleAccountFactoryOwnershipTransferred)
	if err := _SimpleAccountFactory.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
