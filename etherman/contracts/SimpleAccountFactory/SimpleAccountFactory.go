// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package SimpleAccountFactory

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
	_ = abi.ConvertType
)

// SimpleAccountFactoryMetaData contains all meta data concerning the SimpleAccountFactory contract.
var SimpleAccountFactoryMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"contractIEntryPoint\",\"name\":\"_entryPoint\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"AccountCreated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"UserId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"accountImplementation\",\"outputs\":[{\"internalType\":\"contractZKVizingAccount\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"salt\",\"type\":\"uint256\"}],\"name\":\"createAccount\",\"outputs\":[{\"internalType\":\"contractZKVizingAccount\",\"name\":\"ret\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"salt\",\"type\":\"uint256\"}],\"name\":\"getAccountAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]",
	Bin: "0x60a060405234801562000010575f80fd5b50604051620036b2380380620036b283398181016040528101906200003691906200012c565b806040516200004590620000a6565b620000519190620001c3565b604051809103905ff0801580156200006b573d5f803e3d5ffd5b5073ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff168152505050620001de565b6126ff8062000fb383390190565b5f80fd5b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f620000e382620000b8565b9050919050565b5f620000f682620000d7565b9050919050565b6200010881620000ea565b811462000113575f80fd5b50565b5f815190506200012681620000fd565b92915050565b5f60208284031215620001445762000143620000b4565b5b5f620001538482850162000116565b91505092915050565b5f819050919050565b5f620001856200017f6200017984620000b8565b6200015c565b620000b8565b9050919050565b5f620001988262000165565b9050919050565b5f620001ab826200018c565b9050919050565b620001bd816200019f565b82525050565b5f602082019050620001d85f830184620001b2565b92915050565b608051610dae620002055f395f81816101390152818161020b01526102710152610dae5ff3fe608060405234801562000010575f80fd5b506004361062000050575f3560e01c8063026c3bfe14620000545780630d253d76146200007657806311464fbe14620000ac5780635fbfb9cf14620000ce575b5f80fd5b6200005e62000104565b6040516200006d9190620003fb565b60405180910390f35b6200009460048036038101906200008e9190620004aa565b62000109565b604051620000a3919062000500565b60405180910390f35b620000b662000209565b604051620000c5919062000582565b60405180910390f35b620000ec6004803603810190620000e69190620004aa565b6200022d565b604051620000fb919062000582565b60405180910390f35b5f5481565b5f62000201825f1b604051806020016200012390620003d3565b6020820181038252601f19601f820116604052507f0000000000000000000000000000000000000000000000000000000000000000866040516024016200016b919062000500565b60405160208183030381529060405263c4d66de860e01b6020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050604051602001620001c392919062000631565b604051602081830303815290604052604051602001620001e5929190620006a3565b604051602081830303815290604052805190602001206200037d565b905092915050565b7f000000000000000000000000000000000000000000000000000000000000000081565b5f806200023b848462000109565b90505f8173ffffffffffffffffffffffffffffffffffffffff163b90505f8111156200026c57819250505062000377565b835f1b7f000000000000000000000000000000000000000000000000000000000000000086604051602401620002a3919062000500565b60405160208183030381529060405263c4d66de860e01b6020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050604051620002f690620003d3565b6200030392919062000631565b8190604051809103905ff590508015801562000321573d5f803e3d5ffd5b5092508173ffffffffffffffffffffffffffffffffffffffff167fac631f3001b55ea1509cf3d7e74898f85392a61a76e8149181ae1259622dabc8866040516200036c919062000500565b60405180910390a250505b92915050565b5f6200038b83833062000393565b905092915050565b5f604051836040820152846020820152828152600b810160ff815373ffffffffffffffffffffffffffffffffffffffff6055822016925050509392505050565b6106ae80620006cb83390190565b5f819050919050565b620003f581620003e1565b82525050565b5f602082019050620004105f830184620003ea565b92915050565b5f80fd5b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f62000445826200041a565b9050919050565b620004578162000439565b811462000462575f80fd5b50565b5f8135905062000475816200044c565b92915050565b6200048681620003e1565b811462000491575f80fd5b50565b5f81359050620004a4816200047b565b92915050565b5f8060408385031215620004c357620004c262000416565b5b5f620004d28582860162000465565b9250506020620004e58582860162000494565b9150509250929050565b620004fa8162000439565b82525050565b5f602082019050620005155f830184620004ef565b92915050565b5f819050919050565b5f620005446200053e62000538846200041a565b6200051b565b6200041a565b9050919050565b5f620005578262000524565b9050919050565b5f6200056a826200054b565b9050919050565b6200057c816200055e565b82525050565b5f602082019050620005975f83018462000571565b92915050565b5f81519050919050565b5f82825260208201905092915050565b5f5b83811015620005d6578082015181840152602081019050620005b9565b5f8484015250505050565b5f601f19601f8301169050919050565b5f620005fd826200059d565b620006098185620005a7565b93506200061b818560208601620005b7565b6200062681620005e1565b840191505092915050565b5f604082019050620006465f830185620004ef565b81810360208301526200065a8184620005f1565b90509392505050565b5f81905092915050565b5f62000679826200059d565b62000685818562000663565b935062000697818560208601620005b7565b80840191505092915050565b5f620006b082856200066d565b9150620006be82846200066d565b9150819050939250505056fe60806040526040516106ae3803806106ae833981810160405281019061002591906104f2565b610035828261003c60201b60201c565b50506105ce565b61004b826100c060201b60201c565b8173ffffffffffffffffffffffffffffffffffffffff167fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b60405160405180910390a25f815111156100ad576100a7828261018f60201b60201c565b506100bc565b6100bb61021560201b60201c565b5b5050565b5f8173ffffffffffffffffffffffffffffffffffffffff163b0361011b57806040517f4c9c8ce3000000000000000000000000000000000000000000000000000000008152600401610112919061055b565b60405180910390fd5b8061014d7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc5f1b61025160201b60201c565b5f015f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60605f808473ffffffffffffffffffffffffffffffffffffffff16846040516101b891906105b8565b5f60405180830381855af49150503d805f81146101f0576040519150601f19603f3d011682016040523d82523d5f602084013e6101f5565b606091505b509150915061020b85838361025a60201b60201c565b9250505092915050565b5f34111561024f576040517fb398979f00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b565b5f819050919050565b60608261027557610270826102ed60201b60201c565b6102e5565b5f825114801561029b57505f8473ffffffffffffffffffffffffffffffffffffffff163b145b156102dd57836040517f9996b3150000000000000000000000000000000000000000000000000000000081526004016102d4919061055b565b60405180910390fd5b8190506102e6565b5b9392505050565b5f815111156102ff5780518082602001fd5b6040517fd6bda27500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5f604051905090565b5f80fd5b5f80fd5b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f61036b82610342565b9050919050565b61037b81610361565b8114610385575f80fd5b50565b5f8151905061039681610372565b92915050565b5f80fd5b5f80fd5b5f601f19601f8301169050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b6103ea826103a4565b810181811067ffffffffffffffff82111715610409576104086103b4565b5b80604052505050565b5f61041b610331565b905061042782826103e1565b919050565b5f67ffffffffffffffff821115610446576104456103b4565b5b61044f826103a4565b9050602081019050919050565b5f5b8381101561047957808201518184015260208101905061045e565b5f8484015250505050565b5f6104966104918461042c565b610412565b9050828152602081018484840111156104b2576104b16103a0565b5b6104bd84828561045c565b509392505050565b5f82601f8301126104d9576104d861039c565b5b81516104e9848260208601610484565b91505092915050565b5f80604083850312156105085761050761033a565b5b5f61051585828601610388565b925050602083015167ffffffffffffffff8111156105365761053561033e565b5b610542858286016104c5565b9150509250929050565b61055581610361565b82525050565b5f60208201905061056e5f83018461054c565b92915050565b5f81519050919050565b5f81905092915050565b5f61059282610574565b61059c818561057e565b93506105ac81856020860161045c565b80840191505092915050565b5f6105c38284610588565b915081905092915050565b60d4806105da5f395ff3fe6080604052600a600c565b005b60186014601a565b6026565b565b5f60216044565b905090565b365f80375f80365f845af43d5f803e805f81146040573d5ff35b3d5ffd5b5f606e7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc5f1b6095565b5f015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b5f81905091905056fea26469706673582212200a7777ab88f80ef738f4a6f4034876585cff205c0166d8cdc68d641985a957f664736f6c63430008180033a2646970667358221220a3cae4c56ff2ef3d56cd784e418c9d6147ff378690ba5ef955511c6db14bcfe864736f6c6343000818003360c06040523073ffffffffffffffffffffffffffffffffffffffff1660809073ffffffffffffffffffffffffffffffffffffffff1681525034801562000043575f80fd5b50604051620026ff380380620026ff833981810160405281019062000069919062000257565b8073ffffffffffffffffffffffffffffffffffffffff1660a08173ffffffffffffffffffffffffffffffffffffffff1681525050620000ad620000b460201b60201c565b50620002c6565b5f620000c5620001b860201b60201c565b9050805f0160089054906101000a900460ff161562000110576040517ff92ee8a900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b67ffffffffffffffff8016815f015f9054906101000a900467ffffffffffffffff1667ffffffffffffffff1614620001b55767ffffffffffffffff815f015f6101000a81548167ffffffffffffffff021916908367ffffffffffffffff1602179055507fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d267ffffffffffffffff604051620001ac9190620002ab565b60405180910390a15b50565b5f7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00905090565b5f80fd5b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f6200020e82620001e3565b9050919050565b5f620002218262000202565b9050919050565b620002338162000215565b81146200023e575f80fd5b50565b5f81519050620002518162000228565b92915050565b5f602082840312156200026f576200026e620001df565b5b5f6200027e8482850162000241565b91505092915050565b5f67ffffffffffffffff82169050919050565b620002a58162000287565b82525050565b5f602082019050620002c05f8301846200029a565b92915050565b60805160a051612402620002fd5f395f8181610a1c01526112ef01525f8181610ee101528181610f3601526110f001526124025ff3fe60806040526004361061010c575f3560e01c80639165754411610094578063b61d27f611610063578063b61d27f61461034b578063bc197c8114610373578063c4d66de8146103af578063f23a6e61146103d7578063fc7092661461041357610113565b806391657544146102a7578063ad3cb1cc146102cf578063afd94b8e146102f9578063b0d691fe1461032157610113565b806347e1da2a116100db57806347e1da2a146101d35780634f1ef286146101fb57806352d1902d146102175780635c51ffd1146102415780638da5cb5b1461027d57610113565b806301ffc9a714610117578063150b7a02146101535780632e1a7d4d1461018f57806343628421146101b757610113565b3661011357005b5f80fd5b348015610122575f80fd5b5061013d600480360381019061013891906116dd565b61043d565b60405161014a9190611722565b60405180910390f35b34801561015e575f80fd5b5061017960048036038101906101749190611829565b610576565b60405161018691906118bc565b60405180910390f35b34801561019a575f80fd5b506101b560048036038101906101b091906118d5565b61058a565b005b6101d160048036038101906101cc91906118d5565b6105e8565b005b3480156101de575f80fd5b506101f960048036038101906101f491906119ff565b61065c565b005b61021560048036038101906102109190611be7565b610861565b005b348015610222575f80fd5b5061022b610880565b6040516102389190611c59565b60405180910390f35b34801561024c575f80fd5b5061026760048036038101906102629190611c72565b6108b1565b6040516102749190611722565b60405180910390f35b348015610288575f80fd5b506102916108ca565b60405161029e9190611cac565b60405180910390f35b3480156102b2575f80fd5b506102cd60048036038101906102c891906118d5565b6108ed565b005b3480156102da575f80fd5b506102e3610965565b6040516102f09190611d3f565b60405180910390f35b348015610304575f80fd5b5061031f600480360381019061031a9190611d5f565b61099e565b005b34801561032c575f80fd5b50610335610a19565b6040516103429190611df8565b60405180910390f35b348015610356575f80fd5b50610371600480360381019061036c9190611e11565b610a40565b005b34801561037e575f80fd5b5061039960048036038101906103949190611e82565b610a9c565b6040516103a691906118bc565b60405180910390f35b3480156103ba575f80fd5b506103d560048036038101906103d09190611c72565b610ab3565b005b3480156103e2575f80fd5b506103fd60048036038101906103f89190611f59565b610c34565b60405161040a91906118bc565b60405180910390f35b34801561041e575f80fd5b50610427610c49565b6040516104349190611ffe565b60405180910390f35b5f7f150b7a02000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916148061050757507f4e2312e0000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b8061056f57507f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b9050919050565b5f63150b7a0260e01b905095945050505050565b610592610cce565b478111156105cc576040517ff4d678b800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6105e5338260405180602001604052805f815250610d93565b50565b6105f0610a19565b73ffffffffffffffffffffffffffffffffffffffff16639abe79033434846040518463ffffffff1660e01b815260040161062b929190612017565b5f604051808303818588803b158015610642575f80fd5b505af1158015610654573d5f803e3d5ffd5b505050505050565b610664610e13565b818190508686905014801561068b57505f84849050148061068a57508181905084849050145b5b6106ca576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106c190612088565b60405180910390fd5b5f848490500361078c575f5b86869050811015610786576107798787838181106106f7576106f66120a6565b5b905060200201602081019061070c9190611c72565b5f8585858181106107205761071f6120a6565b5b905060200281019061073291906120df565b8080601f0160208091040260200160405190810160405280939291908181526020018383808284375f81840152601f19601f82011690508083019250505050505050610d93565b80806001019150506106d6565b50610859565b5f5b868690508110156108575761084a8787838181106107af576107ae6120a6565b5b90506020020160208101906107c49190611c72565b8686848181106107d7576107d66120a6565b5b905060200201358585858181106107f1576107f06120a6565b5b905060200281019061080391906120df565b8080601f0160208091040260200160405190810160405280939291908181526020018383808284375f81840152601f19601f82011690508083019250505050505050610d93565b808060010191505061078e565b505b505050505050565b610869610edf565b61087282610fc5565b61087c8282610fd0565b5050565b5f6108896110ee565b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc5f1b905090565b5f6108ba611175565b6108c3826111ec565b9050919050565b5f8054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6108f5610cce565b6108fd610a19565b73ffffffffffffffffffffffffffffffffffffffff166339875d1a826040518263ffffffff1660e01b81526004016109359190611ffe565b5f604051808303815f87803b15801561094c575f80fd5b505af115801561095e573d5f803e3d5ffd5b5050505050565b6040518060400160405280600581526020017f352e302e3000000000000000000000000000000000000000000000000000000081525081565b6109a6610cce565b6109ae610a19565b73ffffffffffffffffffffffffffffffffffffffff1663654e8b2383836040518363ffffffff1660e01b81526004016109e8929190612017565b5f604051808303815f87803b1580156109ff575f80fd5b505af1158015610a11573d5f803e3d5ffd5b505050505050565b5f7f0000000000000000000000000000000000000000000000000000000000000000905090565b610a48610e13565b610a96848484848080601f0160208091040260200160405190810160405280939291908181526020018383808284375f81840152601f19601f82011690508083019250505050505050610d93565b50505050565b5f63bc197c8160e01b905098975050505050505050565b5f610abc611251565b90505f815f0160089054906101000a900460ff161590505f825f015f9054906101000a900467ffffffffffffffff1690505f808267ffffffffffffffff16148015610b045750825b90505f60018367ffffffffffffffff16148015610b3757505f3073ffffffffffffffffffffffffffffffffffffffff163b145b905081158015610b45575080155b15610b7c576040517ff92ee8a900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001855f015f6101000a81548167ffffffffffffffff021916908367ffffffffffffffff1602179055508315610bc9576001855f0160086101000a81548160ff0219169083151502179055505b610bd286611278565b8315610c2c575f855f0160086101000a81548160ff0219169083151502179055507fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d26001604051610c23919061218d565b60405180910390a15b505050505050565b5f63f23a6e6160e01b90509695505050505050565b5f610c52610a19565b73ffffffffffffffffffffffffffffffffffffffff1663653e75ec306040518263ffffffff1660e01b8152600401610c8a9190611cac565b602060405180830381865afa158015610ca5573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610cc991906121ba565b905090565b5f8054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161480610d5257503073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b610d91576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d889061222f565b60405180910390fd5b565b5f808473ffffffffffffffffffffffffffffffffffffffff168484604051610dbb9190612291565b5f6040518083038185875af1925050503d805f8114610df5576040519150601f19603f3d011682016040523d82523d5f602084013e610dfa565b606091505b509150915081610e0c57805160208201fd5b5050505050565b610e1b610a19565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161480610e9e57505f8054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b610edd576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ed4906122f1565b60405180910390fd5b565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163073ffffffffffffffffffffffffffffffffffffffff161480610f8c57507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16610f73611353565b73ffffffffffffffffffffffffffffffffffffffff1614155b15610fc3576040517fe07c8dba00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b565b610fcd610cce565b50565b8173ffffffffffffffffffffffffffffffffffffffff166352d1902d6040518163ffffffff1660e01b8152600401602060405180830381865afa92505050801561103857506040513d601f19601f820116820180604052508101906110359190612339565b60015b61107957816040517f4c9c8ce30000000000000000000000000000000000000000000000000000000081526004016110709190611cac565b60405180910390fd5b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc5f1b81146110df57806040517faa1d49a40000000000000000000000000000000000000000000000000000000081526004016110d69190611c59565b60405180910390fd5b6110e983836113a6565b505050565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163073ffffffffffffffffffffffffffffffffffffffff1614611173576040517fe07c8dba00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b565b61117d610a19565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146111ea576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111e1906123ae565b60405180910390fd5b565b5f8173ffffffffffffffffffffffffffffffffffffffff165f8054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614611247575f905061124c565b600190505b919050565b5f7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00905090565b805f806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505f8054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff167ff75ce79a4abcc8ed48f3b3544cd773dd667599027b50a42ff4bbf68f1a65e7b060405160405180910390a350565b5f61137f7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc5f1b611418565b5f015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6113af82611421565b8173ffffffffffffffffffffffffffffffffffffffff167fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b60405160405180910390a25f8151111561140b5761140582826114ea565b50611414565b61141361156a565b5b5050565b5f819050919050565b5f8173ffffffffffffffffffffffffffffffffffffffff163b0361147c57806040517f4c9c8ce30000000000000000000000000000000000000000000000000000000081526004016114739190611cac565b60405180910390fd5b806114a87f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc5f1b611418565b5f015f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60605f808473ffffffffffffffffffffffffffffffffffffffff16846040516115139190612291565b5f60405180830381855af49150503d805f811461154b576040519150601f19603f3d011682016040523d82523d5f602084013e611550565b606091505b50915091506115608583836115a6565b9250505092915050565b5f3411156115a4576040517fb398979f00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b565b6060826115bb576115b682611633565b61162b565b5f82511480156115e157505f8473ffffffffffffffffffffffffffffffffffffffff163b145b1561162357836040517f9996b31500000000000000000000000000000000000000000000000000000000815260040161161a9190611cac565b60405180910390fd5b81905061162c565b5b9392505050565b5f815111156116455780518082602001fd5b6040517fd6bda27500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5f604051905090565b5f80fd5b5f80fd5b5f7fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b6116bc81611688565b81146116c6575f80fd5b50565b5f813590506116d7816116b3565b92915050565b5f602082840312156116f2576116f1611680565b5b5f6116ff848285016116c9565b91505092915050565b5f8115159050919050565b61171c81611708565b82525050565b5f6020820190506117355f830184611713565b92915050565b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f6117648261173b565b9050919050565b6117748161175a565b811461177e575f80fd5b50565b5f8135905061178f8161176b565b92915050565b5f819050919050565b6117a781611795565b81146117b1575f80fd5b50565b5f813590506117c28161179e565b92915050565b5f80fd5b5f80fd5b5f80fd5b5f8083601f8401126117e9576117e86117c8565b5b8235905067ffffffffffffffff811115611806576118056117cc565b5b602083019150836001820283011115611822576118216117d0565b5b9250929050565b5f805f805f6080868803121561184257611841611680565b5b5f61184f88828901611781565b955050602061186088828901611781565b9450506040611871888289016117b4565b935050606086013567ffffffffffffffff81111561189257611891611684565b5b61189e888289016117d4565b92509250509295509295909350565b6118b681611688565b82525050565b5f6020820190506118cf5f8301846118ad565b92915050565b5f602082840312156118ea576118e9611680565b5b5f6118f7848285016117b4565b91505092915050565b5f8083601f840112611915576119146117c8565b5b8235905067ffffffffffffffff811115611932576119316117cc565b5b60208301915083602082028301111561194e5761194d6117d0565b5b9250929050565b5f8083601f84011261196a576119696117c8565b5b8235905067ffffffffffffffff811115611987576119866117cc565b5b6020830191508360208202830111156119a3576119a26117d0565b5b9250929050565b5f8083601f8401126119bf576119be6117c8565b5b8235905067ffffffffffffffff8111156119dc576119db6117cc565b5b6020830191508360208202830111156119f8576119f76117d0565b5b9250929050565b5f805f805f8060608789031215611a1957611a18611680565b5b5f87013567ffffffffffffffff811115611a3657611a35611684565b5b611a4289828a01611900565b9650965050602087013567ffffffffffffffff811115611a6557611a64611684565b5b611a7189828a01611955565b9450945050604087013567ffffffffffffffff811115611a9457611a93611684565b5b611aa089828a016119aa565b92509250509295509295509295565b5f80fd5b5f601f19601f8301169050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b611af982611ab3565b810181811067ffffffffffffffff82111715611b1857611b17611ac3565b5b80604052505050565b5f611b2a611677565b9050611b368282611af0565b919050565b5f67ffffffffffffffff821115611b5557611b54611ac3565b5b611b5e82611ab3565b9050602081019050919050565b828183375f83830152505050565b5f611b8b611b8684611b3b565b611b21565b905082815260208101848484011115611ba757611ba6611aaf565b5b611bb2848285611b6b565b509392505050565b5f82601f830112611bce57611bcd6117c8565b5b8135611bde848260208601611b79565b91505092915050565b5f8060408385031215611bfd57611bfc611680565b5b5f611c0a85828601611781565b925050602083013567ffffffffffffffff811115611c2b57611c2a611684565b5b611c3785828601611bba565b9150509250929050565b5f819050919050565b611c5381611c41565b82525050565b5f602082019050611c6c5f830184611c4a565b92915050565b5f60208284031215611c8757611c86611680565b5b5f611c9484828501611781565b91505092915050565b611ca68161175a565b82525050565b5f602082019050611cbf5f830184611c9d565b92915050565b5f81519050919050565b5f82825260208201905092915050565b5f5b83811015611cfc578082015181840152602081019050611ce1565b5f8484015250505050565b5f611d1182611cc5565b611d1b8185611ccf565b9350611d2b818560208601611cdf565b611d3481611ab3565b840191505092915050565b5f6020820190508181035f830152611d578184611d07565b905092915050565b5f8060408385031215611d7557611d74611680565b5b5f611d82858286016117b4565b9250506020611d93858286016117b4565b9150509250929050565b5f819050919050565b5f611dc0611dbb611db68461173b565b611d9d565b61173b565b9050919050565b5f611dd182611da6565b9050919050565b5f611de282611dc7565b9050919050565b611df281611dd8565b82525050565b5f602082019050611e0b5f830184611de9565b92915050565b5f805f8060608587031215611e2957611e28611680565b5b5f611e3687828801611781565b9450506020611e47878288016117b4565b935050604085013567ffffffffffffffff811115611e6857611e67611684565b5b611e74878288016117d4565b925092505092959194509250565b5f805f805f805f8060a0898b031215611e9e57611e9d611680565b5b5f611eab8b828c01611781565b9850506020611ebc8b828c01611781565b975050604089013567ffffffffffffffff811115611edd57611edc611684565b5b611ee98b828c01611955565b9650965050606089013567ffffffffffffffff811115611f0c57611f0b611684565b5b611f188b828c01611955565b9450945050608089013567ffffffffffffffff811115611f3b57611f3a611684565b5b611f478b828c016117d4565b92509250509295985092959890939650565b5f805f805f8060a08789031215611f7357611f72611680565b5b5f611f8089828a01611781565b9650506020611f9189828a01611781565b9550506040611fa289828a016117b4565b9450506060611fb389828a016117b4565b935050608087013567ffffffffffffffff811115611fd457611fd3611684565b5b611fe089828a016117d4565b92509250509295509295509295565b611ff881611795565b82525050565b5f6020820190506120115f830184611fef565b92915050565b5f60408201905061202a5f830185611fef565b6120376020830184611fef565b9392505050565b7f77726f6e67206172726179206c656e67746873000000000000000000000000005f82015250565b5f612072601383611ccf565b915061207d8261203e565b602082019050919050565b5f6020820190508181035f83015261209f81612066565b9050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52603260045260245ffd5b5f80fd5b5f80fd5b5f80fd5b5f80833560016020038436030381126120fb576120fa6120d3565b5b80840192508235915067ffffffffffffffff82111561211d5761211c6120d7565b5b602083019250600182023603831315612139576121386120db565b5b509250929050565b5f819050919050565b5f67ffffffffffffffff82169050919050565b5f61217761217261216d84612141565b611d9d565b61214a565b9050919050565b6121878161215d565b82525050565b5f6020820190506121a05f83018461217e565b92915050565b5f815190506121b48161179e565b92915050565b5f602082840312156121cf576121ce611680565b5b5f6121dc848285016121a6565b91505092915050565b7f6f6e6c79206f776e6572000000000000000000000000000000000000000000005f82015250565b5f612219600a83611ccf565b9150612224826121e5565b602082019050919050565b5f6020820190508181035f8301526122468161220d565b9050919050565b5f81519050919050565b5f81905092915050565b5f61226b8261224d565b6122758185612257565b9350612285818560208601611cdf565b80840191505092915050565b5f61229c8284612261565b915081905092915050565b7f6163636f756e743a206e6f74204f776e6572206f7220456e747279506f696e745f82015250565b5f6122db602083611ccf565b91506122e6826122a7565b602082019050919050565b5f6020820190508181035f830152612308816122cf565b9050919050565b61231881611c41565b8114612322575f80fd5b50565b5f815190506123338161230f565b92915050565b5f6020828403121561234e5761234d611680565b5b5f61235b84828501612325565b91505092915050565b7f6163636f756e743a206e6f742066726f6d20456e747279506f696e74000000005f82015250565b5f612398601c83611ccf565b91506123a382612364565b602082019050919050565b5f6020820190508181035f8301526123c58161238c565b905091905056fea26469706673582212202e699c3ff1ee9fde3d5f4498cfefb0258bd77f2212b071471f67ed3a717d69ee64736f6c63430008180033",
}

// SimpleAccountFactoryABI is the input ABI used to generate the binding from.
// Deprecated: Use SimpleAccountFactoryMetaData.ABI instead.
var SimpleAccountFactoryABI = SimpleAccountFactoryMetaData.ABI

// SimpleAccountFactoryBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use SimpleAccountFactoryMetaData.Bin instead.
var SimpleAccountFactoryBin = SimpleAccountFactoryMetaData.Bin

// DeploySimpleAccountFactory deploys a new Ethereum contract, binding an instance of SimpleAccountFactory to it.
func DeploySimpleAccountFactory(auth *bind.TransactOpts, backend bind.ContractBackend, _entryPoint common.Address) (common.Address, *types.Transaction, *SimpleAccountFactory, error) {
	parsed, err := SimpleAccountFactoryMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(SimpleAccountFactoryBin), backend, _entryPoint)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &SimpleAccountFactory{SimpleAccountFactoryCaller: SimpleAccountFactoryCaller{contract: contract}, SimpleAccountFactoryTransactor: SimpleAccountFactoryTransactor{contract: contract}, SimpleAccountFactoryFilterer: SimpleAccountFactoryFilterer{contract: contract}}, nil
}

// SimpleAccountFactory is an auto generated Go binding around an Ethereum contract.
type SimpleAccountFactory struct {
	SimpleAccountFactoryCaller     // Read-only binding to the contract
	SimpleAccountFactoryTransactor // Write-only binding to the contract
	SimpleAccountFactoryFilterer   // Log filterer for contract events
}

// SimpleAccountFactoryCaller is an auto generated read-only Go binding around an Ethereum contract.
type SimpleAccountFactoryCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// SimpleAccountFactoryTransactor is an auto generated write-only Go binding around an Ethereum contract.
type SimpleAccountFactoryTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// SimpleAccountFactoryFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type SimpleAccountFactoryFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// SimpleAccountFactorySession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type SimpleAccountFactorySession struct {
	Contract     *SimpleAccountFactory // Generic contract binding to set the session for
	CallOpts     bind.CallOpts         // Call options to use throughout this session
	TransactOpts bind.TransactOpts     // Transaction auth options to use throughout this session
}

// SimpleAccountFactoryCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type SimpleAccountFactoryCallerSession struct {
	Contract *SimpleAccountFactoryCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts               // Call options to use throughout this session
}

// SimpleAccountFactoryTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type SimpleAccountFactoryTransactorSession struct {
	Contract     *SimpleAccountFactoryTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts               // Transaction auth options to use throughout this session
}

// SimpleAccountFactoryRaw is an auto generated low-level Go binding around an Ethereum contract.
type SimpleAccountFactoryRaw struct {
	Contract *SimpleAccountFactory // Generic contract binding to access the raw methods on
}

// SimpleAccountFactoryCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type SimpleAccountFactoryCallerRaw struct {
	Contract *SimpleAccountFactoryCaller // Generic read-only contract binding to access the raw methods on
}

// SimpleAccountFactoryTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type SimpleAccountFactoryTransactorRaw struct {
	Contract *SimpleAccountFactoryTransactor // Generic write-only contract binding to access the raw methods on
}

// NewSimpleAccountFactory creates a new instance of SimpleAccountFactory, bound to a specific deployed contract.
func NewSimpleAccountFactory(address common.Address, backend bind.ContractBackend) (*SimpleAccountFactory, error) {
	contract, err := bindSimpleAccountFactory(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &SimpleAccountFactory{SimpleAccountFactoryCaller: SimpleAccountFactoryCaller{contract: contract}, SimpleAccountFactoryTransactor: SimpleAccountFactoryTransactor{contract: contract}, SimpleAccountFactoryFilterer: SimpleAccountFactoryFilterer{contract: contract}}, nil
}

// NewSimpleAccountFactoryCaller creates a new read-only instance of SimpleAccountFactory, bound to a specific deployed contract.
func NewSimpleAccountFactoryCaller(address common.Address, caller bind.ContractCaller) (*SimpleAccountFactoryCaller, error) {
	contract, err := bindSimpleAccountFactory(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &SimpleAccountFactoryCaller{contract: contract}, nil
}

// NewSimpleAccountFactoryTransactor creates a new write-only instance of SimpleAccountFactory, bound to a specific deployed contract.
func NewSimpleAccountFactoryTransactor(address common.Address, transactor bind.ContractTransactor) (*SimpleAccountFactoryTransactor, error) {
	contract, err := bindSimpleAccountFactory(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &SimpleAccountFactoryTransactor{contract: contract}, nil
}

// NewSimpleAccountFactoryFilterer creates a new log filterer instance of SimpleAccountFactory, bound to a specific deployed contract.
func NewSimpleAccountFactoryFilterer(address common.Address, filterer bind.ContractFilterer) (*SimpleAccountFactoryFilterer, error) {
	contract, err := bindSimpleAccountFactory(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &SimpleAccountFactoryFilterer{contract: contract}, nil
}

// bindSimpleAccountFactory binds a generic wrapper to an already deployed contract.
func bindSimpleAccountFactory(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := SimpleAccountFactoryMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_SimpleAccountFactory *SimpleAccountFactoryRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _SimpleAccountFactory.Contract.SimpleAccountFactoryCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_SimpleAccountFactory *SimpleAccountFactoryRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _SimpleAccountFactory.Contract.SimpleAccountFactoryTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_SimpleAccountFactory *SimpleAccountFactoryRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _SimpleAccountFactory.Contract.SimpleAccountFactoryTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_SimpleAccountFactory *SimpleAccountFactoryCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _SimpleAccountFactory.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_SimpleAccountFactory *SimpleAccountFactoryTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _SimpleAccountFactory.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_SimpleAccountFactory *SimpleAccountFactoryTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _SimpleAccountFactory.Contract.contract.Transact(opts, method, params...)
}

// UserId is a free data retrieval call binding the contract method 0x026c3bfe.
//
// Solidity: function UserId() view returns(uint256)
func (_SimpleAccountFactory *SimpleAccountFactoryCaller) UserId(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _SimpleAccountFactory.contract.Call(opts, &out, "UserId")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// UserId is a free data retrieval call binding the contract method 0x026c3bfe.
//
// Solidity: function UserId() view returns(uint256)
func (_SimpleAccountFactory *SimpleAccountFactorySession) UserId() (*big.Int, error) {
	return _SimpleAccountFactory.Contract.UserId(&_SimpleAccountFactory.CallOpts)
}

// UserId is a free data retrieval call binding the contract method 0x026c3bfe.
//
// Solidity: function UserId() view returns(uint256)
func (_SimpleAccountFactory *SimpleAccountFactoryCallerSession) UserId() (*big.Int, error) {
	return _SimpleAccountFactory.Contract.UserId(&_SimpleAccountFactory.CallOpts)
}

// AccountImplementation is a free data retrieval call binding the contract method 0x11464fbe.
//
// Solidity: function accountImplementation() view returns(address)
func (_SimpleAccountFactory *SimpleAccountFactoryCaller) AccountImplementation(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _SimpleAccountFactory.contract.Call(opts, &out, "accountImplementation")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// AccountImplementation is a free data retrieval call binding the contract method 0x11464fbe.
//
// Solidity: function accountImplementation() view returns(address)
func (_SimpleAccountFactory *SimpleAccountFactorySession) AccountImplementation() (common.Address, error) {
	return _SimpleAccountFactory.Contract.AccountImplementation(&_SimpleAccountFactory.CallOpts)
}

// AccountImplementation is a free data retrieval call binding the contract method 0x11464fbe.
//
// Solidity: function accountImplementation() view returns(address)
func (_SimpleAccountFactory *SimpleAccountFactoryCallerSession) AccountImplementation() (common.Address, error) {
	return _SimpleAccountFactory.Contract.AccountImplementation(&_SimpleAccountFactory.CallOpts)
}

// GetAccountAddress is a free data retrieval call binding the contract method 0x0d253d76.
//
// Solidity: function getAccountAddress(address owner, uint256 salt) view returns(address)
func (_SimpleAccountFactory *SimpleAccountFactoryCaller) GetAccountAddress(opts *bind.CallOpts, owner common.Address, salt *big.Int) (common.Address, error) {
	var out []interface{}
	err := _SimpleAccountFactory.contract.Call(opts, &out, "getAccountAddress", owner, salt)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetAccountAddress is a free data retrieval call binding the contract method 0x0d253d76.
//
// Solidity: function getAccountAddress(address owner, uint256 salt) view returns(address)
func (_SimpleAccountFactory *SimpleAccountFactorySession) GetAccountAddress(owner common.Address, salt *big.Int) (common.Address, error) {
	return _SimpleAccountFactory.Contract.GetAccountAddress(&_SimpleAccountFactory.CallOpts, owner, salt)
}

// GetAccountAddress is a free data retrieval call binding the contract method 0x0d253d76.
//
// Solidity: function getAccountAddress(address owner, uint256 salt) view returns(address)
func (_SimpleAccountFactory *SimpleAccountFactoryCallerSession) GetAccountAddress(owner common.Address, salt *big.Int) (common.Address, error) {
	return _SimpleAccountFactory.Contract.GetAccountAddress(&_SimpleAccountFactory.CallOpts, owner, salt)
}

// CreateAccount is a paid mutator transaction binding the contract method 0x5fbfb9cf.
//
// Solidity: function createAccount(address owner, uint256 salt) returns(address ret)
func (_SimpleAccountFactory *SimpleAccountFactoryTransactor) CreateAccount(opts *bind.TransactOpts, owner common.Address, salt *big.Int) (*types.Transaction, error) {
	return _SimpleAccountFactory.contract.Transact(opts, "createAccount", owner, salt)
}

// CreateAccount is a paid mutator transaction binding the contract method 0x5fbfb9cf.
//
// Solidity: function createAccount(address owner, uint256 salt) returns(address ret)
func (_SimpleAccountFactory *SimpleAccountFactorySession) CreateAccount(owner common.Address, salt *big.Int) (*types.Transaction, error) {
	return _SimpleAccountFactory.Contract.CreateAccount(&_SimpleAccountFactory.TransactOpts, owner, salt)
}

// CreateAccount is a paid mutator transaction binding the contract method 0x5fbfb9cf.
//
// Solidity: function createAccount(address owner, uint256 salt) returns(address ret)
func (_SimpleAccountFactory *SimpleAccountFactoryTransactorSession) CreateAccount(owner common.Address, salt *big.Int) (*types.Transaction, error) {
	return _SimpleAccountFactory.Contract.CreateAccount(&_SimpleAccountFactory.TransactOpts, owner, salt)
}

// SimpleAccountFactoryAccountCreatedIterator is returned from FilterAccountCreated and is used to iterate over the raw logs and unpacked data for AccountCreated events raised by the SimpleAccountFactory contract.
type SimpleAccountFactoryAccountCreatedIterator struct {
	Event *SimpleAccountFactoryAccountCreated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *SimpleAccountFactoryAccountCreatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(SimpleAccountFactoryAccountCreated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(SimpleAccountFactoryAccountCreated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *SimpleAccountFactoryAccountCreatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *SimpleAccountFactoryAccountCreatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// SimpleAccountFactoryAccountCreated represents a AccountCreated event raised by the SimpleAccountFactory contract.
type SimpleAccountFactoryAccountCreated struct {
	Account common.Address
	Owner   common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterAccountCreated is a free log retrieval operation binding the contract event 0xac631f3001b55ea1509cf3d7e74898f85392a61a76e8149181ae1259622dabc8.
//
// Solidity: event AccountCreated(address indexed account, address owner)
func (_SimpleAccountFactory *SimpleAccountFactoryFilterer) FilterAccountCreated(opts *bind.FilterOpts, account []common.Address) (*SimpleAccountFactoryAccountCreatedIterator, error) {

	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}

	logs, sub, err := _SimpleAccountFactory.contract.FilterLogs(opts, "AccountCreated", accountRule)
	if err != nil {
		return nil, err
	}
	return &SimpleAccountFactoryAccountCreatedIterator{contract: _SimpleAccountFactory.contract, event: "AccountCreated", logs: logs, sub: sub}, nil
}

// WatchAccountCreated is a free log subscription operation binding the contract event 0xac631f3001b55ea1509cf3d7e74898f85392a61a76e8149181ae1259622dabc8.
//
// Solidity: event AccountCreated(address indexed account, address owner)
func (_SimpleAccountFactory *SimpleAccountFactoryFilterer) WatchAccountCreated(opts *bind.WatchOpts, sink chan<- *SimpleAccountFactoryAccountCreated, account []common.Address) (event.Subscription, error) {

	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}

	logs, sub, err := _SimpleAccountFactory.contract.WatchLogs(opts, "AccountCreated", accountRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(SimpleAccountFactoryAccountCreated)
				if err := _SimpleAccountFactory.contract.UnpackLog(event, "AccountCreated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseAccountCreated is a log parse operation binding the contract event 0xac631f3001b55ea1509cf3d7e74898f85392a61a76e8149181ae1259622dabc8.
//
// Solidity: event AccountCreated(address indexed account, address owner)
func (_SimpleAccountFactory *SimpleAccountFactoryFilterer) ParseAccountCreated(log types.Log) (*SimpleAccountFactoryAccountCreated, error) {
	event := new(SimpleAccountFactoryAccountCreated)
	if err := _SimpleAccountFactory.contract.UnpackLog(event, "AccountCreated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
