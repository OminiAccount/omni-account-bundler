// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package SimpleAccount

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
	_ = abi.ConvertType
)

// SimpleAccountMetaData contains all meta data concerning the SimpleAccount contract.
var SimpleAccountMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"contractIEntryPoint\",\"name\":\"anEntryPoint\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"AddressEmptyCode\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"ERC1967InvalidImplementation\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ERC1967NonPayable\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FailedCall\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InsufficientBalance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidInitialization\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotFromEP\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotInitializing\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"UUPSUnauthorizedCallContext\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"slot\",\"type\":\"bytes32\"}],\"name\":\"UUPSUnsupportedProxiableUUID\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"version\",\"type\":\"uint64\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contractIEntryPoint\",\"name\":\"entryPoint\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"ZKVizingAccountInitialized\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"UPGRADE_INTERFACE_VERSION\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"}],\"name\":\"depositGas\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"valueDepositAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"gasDepositAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"crossFee\",\"type\":\"uint256\"},{\"internalType\":\"uint24\",\"name\":\"gasLimit\",\"type\":\"uint24\"},{\"internalType\":\"uint64\",\"name\":\"gasPrice\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"minArrivalTime\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"maxArrivalTime\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"selectedRelayer\",\"type\":\"address\"}],\"name\":\"depositRemote\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"entryPoint\",\"outputs\":[{\"internalType\":\"contractIEntryPoint\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"valueDepositAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"gasDepositAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint24\",\"name\":\"gasLimit\",\"type\":\"uint24\"},{\"internalType\":\"uint64\",\"name\":\"gasPrice\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"minArrivalTime\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"maxArrivalTime\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"selectedRelayer\",\"type\":\"address\"}],\"name\":\"estimateDepositRemoteCrossFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"destChainId\",\"type\":\"uint64\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint24\",\"name\":\"gasLimit\",\"type\":\"uint24\"},{\"internalType\":\"uint64\",\"name\":\"gasPrice\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"minArrivalTime\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"maxArrivalTime\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"selectedRelayer\",\"type\":\"address\"}],\"name\":\"estimateWithdrawRemoteCrossFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"dest\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"func\",\"type\":\"bytes\"}],\"name\":\"execute\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"dest\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"value\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes[]\",\"name\":\"func\",\"type\":\"bytes[]\"}],\"name\":\"executeBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPreGasBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"anOwner\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC1155BatchReceived\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC1155Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proxiableUUID\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"upgradeToAndCall\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"validateUserOp\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawGas\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"destChainId\",\"type\":\"uint64\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"crossFee\",\"type\":\"uint256\"},{\"internalType\":\"uint24\",\"name\":\"gasLimit\",\"type\":\"uint24\"},{\"internalType\":\"uint64\",\"name\":\"gasPrice\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"minArrivalTime\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"maxArrivalTime\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"selectedRelayer\",\"type\":\"address\"}],\"name\":\"withdrawRemote\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]",
	Bin: "0x60c0604052346200005e576200001e6200001862000145565b6200016b565b6200002862000064565b613804620003e98239608051818181612db201528181612e1e0152612fdc015260a0518181816127460152613505015261380490f35b6200006a565b60405190565b5f80fd5b601f801991011690565b634e487b7160e01b5f52604160045260245ffd5b9062000098906200006e565b810190811060018060401b03821117620000b157604052565b62000078565b90620000ce620000c662000064565b92836200008c565b565b5f80fd5b60018060a01b031690565b620000ea90620000d4565b90565b620000f890620000df565b90565b6200010681620000ed565b036200010e57565b5f80fd5b905051906200012182620000fb565b565b906020828203126200013f576200013c915f0162000112565b90565b620000d0565b6200016862003bed803803806200015c81620000b7565b92833981019062000123565b90565b6200017562000184565b60a05262000182620002ee565b565b6200018e620001d1565b565b90565b620001ac620001a6620001b292620000d4565b62000190565b620000d4565b90565b620001c09062000193565b90565b620001ce90620001b5565b90565b620001dc30620001c3565b608052565b60401c90565b60ff1690565b620001fc6200020291620001e1565b620001e7565b90565b620002119054620001ed565b90565b5f0190565b5f1c90565b60018060401b031690565b620002386200023e9162000219565b6200021e565b90565b6200024d905462000229565b90565b60018060401b031690565b5f1b90565b906200027360018060401b03916200025b565b9181191691161790565b62000296620002906200029c9262000250565b62000190565b62000250565b90565b90565b90620002bc620002b6620002c4926200027d565b6200029f565b825462000260565b9055565b620002d39062000250565b9052565b9190620002ec905f60208501940190620002c8565b565b620002f8620003c4565b620003055f820162000205565b6200039d57620003175f820162000241565b620003336200032c60018060401b0362000250565b9162000250565b036200033d575b50565b62000352905f60018060401b039101620002a2565b60018060401b03620003937fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d2916200038962000064565b91829182620002d7565b0390a15f6200033a565b620003a762000064565b63f92ee8a960e01b815280620003c06004820162000214565b0390fd5b7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a009056fe60806040526004361015610015575b3661106057005b61001f5f3561016e565b806301ffc9a7146101695780631376c37e14610164578063150b7a021461015f578063211a47891461015a5780632e1a7d4d14610155578063436284211461015057806347e1da2a1461014b5780634f1ef2861461014657806352d1902d14610141578063599509061461013c5780635c51ffd1146101375780638799aeea146101325780638da5cb5b1461012d5780639165754414610128578063ad3cb1cc14610123578063b0d691fe1461011e578063b61d27f614610119578063bc197c8114610114578063c4d66de81461010f578063f23a6e611461010a5763fc7092660361000e5761102b565b610fef565b610f4c565b610f0d565b610e34565b610dad565b610d1f565b610bd8565b610ba3565b610b0c565b610a47565b6109ec565b610927565b6108c9565b610763565b6105f7565b6105c4565b610562565b610499565b61038d565b6101fa565b60e01c90565b60405190565b5f80fd5b5f80fd5b5f80fd5b63ffffffff60e01b1690565b61019b81610186565b036101a257565b5f80fd5b905035906101b382610192565b565b906020828203126101ce576101cb915f016101a6565b90565b61017e565b151590565b6101e1906101d3565b9052565b91906101f8905f602085019401906101d8565b565b3461022a576102266102156102103660046101b5565b611068565b61021d610174565b918291826101e5565b0390f35b61017a565b67ffffffffffffffff1690565b6102458161022f565b0361024c57565b5f80fd5b9050359061025d8261023c565b565b90565b61026b8161025f565b0361027257565b5f80fd5b9050359061028382610262565b565b60018060a01b031690565b61029990610285565b90565b6102a581610290565b036102ac57565b5f80fd5b905035906102bd8261029c565b565b62ffffff1690565b6102d0816102bf565b036102d757565b5f80fd5b905035906102e8826102c7565b565b91906101008382031261036657610303815f8501610250565b926103118260208301610276565b9261031f83604084016102b0565b9261032d81606085016102db565b9261033b8260808301610250565b9261036361034c8460a08501610250565b9361035a8160c08601610250565b9360e0016102b0565b90565b61017e565b6103749061025f565b9052565b919061038b905f6020850194019061036b565b565b346103c7576103c36103b26103a33660046102ea565b96959095949194939293611717565b6103ba610174565b91829182610378565b0390f35b61017a565b5f80fd5b5f80fd5b5f80fd5b909182601f830112156104125781359167ffffffffffffffff831161040d57602001926001830284011161040857565b6103d4565b6103d0565b6103cc565b906080828203126104725761042e815f84016102b0565b9261043c82602085016102b0565b9261044a8360408301610276565b92606082013567ffffffffffffffff811161046d5761046992016103d8565b9091565b610182565b61017e565b61048090610186565b9052565b9190610497905f60208501940190610477565b565b346104cd576104c96104b86104af366004610417565b93929092611948565b6104c0610174565b91829182610484565b0390f35b61017a565b90916101208284031261055d576104eb835f84016102b0565b926104f98160208501610276565b926105078260408301610276565b926105158360608401610276565b9261052381608085016102db565b926105318260a08301610250565b9261055a6105428460c08501610250565b936105508160e08601610250565b93610100016102b0565b90565b61017e565b3461059c576105986105876105783660046104d2565b97969096959195949294611a2b565b61058f610174565b91829182610378565b0390f35b61017a565b906020828203126105ba576105b7915f01610276565b90565b61017e565b5f0190565b346105f2576105dc6105d73660046105a1565b611d97565b6105e4610174565b806105ee816105bf565b0390f35b61017a565b61060a6106053660046105a1565b611dd4565b610612610174565b8061061c816105bf565b0390f35b909182601f8301121561065a5781359167ffffffffffffffff831161065557602001926020830284011161065057565b6103d4565b6103d0565b6103cc565b909182601f830112156106995781359167ffffffffffffffff831161069457602001926020830284011161068f57565b6103d4565b6103d0565b6103cc565b909182601f830112156106d85781359167ffffffffffffffff83116106d35760200192602083028401116106ce57565b6103d4565b6103d0565b6103cc565b9060608282031261075e575f82013567ffffffffffffffff81116107595781610707918401610620565b929093602082013567ffffffffffffffff8111610754578361072a91840161065f565b929093604082013567ffffffffffffffff811161074f5761074b920161069e565b9091565b610182565b610182565b610182565b61017e565b34610798576107826107763660046106dd565b94939093929192611fff565b61078a610174565b80610794816105bf565b0390f35b61017a565b5f80fd5b601f801991011690565b634e487b7160e01b5f52604160045260245ffd5b906107c9906107a1565b810190811067ffffffffffffffff8211176107e357604052565b6107ab565b906107fb6107f4610174565b92836107bf565b565b67ffffffffffffffff811161081b576108176020916107a1565b0190565b6107ab565b90825f939282370152565b9092919261084061083b826107fd565b6107e8565b9381855260208501908284011161085c5761085a92610820565b565b61079d565b9080601f8301121561087f5781602061087c9335910161082b565b90565b6103cc565b9190916040818403126108c45761089d835f83016102b0565b92602082013567ffffffffffffffff81116108bf576108bc9201610861565b90565b610182565b61017e565b6108dd6108d7366004610884565b90612206565b6108e5610174565b806108ef816105bf565b0390f35b5f9103126108fd57565b61017e565b90565b61090e90610902565b9052565b9190610925905f60208501940190610905565b565b34610957576109373660046108f3565b610953610942612286565b61094a610174565b91829182610912565b0390f35b61017a565b9091610120828403126109e757610975835f8401610250565b926109838160208501610276565b9261099182604083016102b0565b9261099f8360608401610276565b926109ad81608085016102db565b926109bb8260a08301610250565b926109e46109cc8460c08501610250565b936109da8160e08601610250565b93610100016102b0565b90565b61017e565b34610a2457610a0e6109ff36600461095c565b979690969591959492946125da565b610a16610174565b80610a20816105bf565b0390f35b61017a565b90602082820312610a4257610a3f915f016102b0565b90565b61017e565b34610a7757610a73610a62610a5d366004610a29565b6125ed565b610a6a610174565b918291826101e5565b0390f35b61017a565b909161012082840312610b0757610a95835f8401610276565b92610aa38160208501610276565b92610ab18260408301610276565b92610abf8360608401610276565b92610acd81608085016102db565b92610adb8260a08301610250565b92610b04610aec8460c08501610250565b93610afa8160e08601610250565b93610100016102b0565b90565b61017e565b610b29610b1a366004610a7c565b9796909695919594929461260a565b610b31610174565b80610b3b816105bf565b0390f35b1c90565b60018060a01b031690565b610b5e906008610b639302610b3f565b610b43565b90565b90610b719154610b4e565b90565b610b7e5f80610b66565b90565b610b8a90610290565b9052565b9190610ba1905f60208501940190610b81565b565b34610bd357610bb33660046108f3565b610bcf610bbe610b74565b610bc6610174565b91829182610b8e565b0390f35b61017a565b34610c0657610bf0610beb3660046105a1565b61272c565b610bf8610174565b80610c02816105bf565b0390f35b61017a565b67ffffffffffffffff8111610c2957610c256020916107a1565b0190565b6107ab565b90610c40610c3b83610c0b565b6107e8565b918252565b5f7f352e302e30000000000000000000000000000000000000000000000000000000910152565b610c766005610c2e565b90610c8360208301610c45565b565b610c8d610c6c565b90565b610c98610c85565b90565b610ca3610c90565b90565b5190565b60209181520190565b5f5b838110610cc5575050905f910152565b806020918301518185015201610cb5565b610cf5610cfe602093610d0393610cec81610ca6565b93848093610caa565b95869101610cb3565b6107a1565b0190565b610d1c9160208201915f818403910152610cd6565b90565b34610d4f57610d2f3660046108f3565b610d4b610d3a610c9b565b610d42610174565b91829182610d07565b0390f35b61017a565b90565b610d6b610d66610d7092610285565b610d54565b610285565b90565b610d7c90610d57565b90565b610d8890610d73565b90565b610d9490610d7f565b9052565b9190610dab905f60208501940190610d8b565b565b34610ddd57610dbd3660046108f3565b610dd9610dc861273b565b610dd0610174565b91829182610d98565b0390f35b61017a565b91606083830312610e2f57610df9825f85016102b0565b92610e078360208301610276565b92604082013567ffffffffffffffff8111610e2a57610e2692016103d8565b9091565b610182565b61017e565b34610e6657610e50610e47366004610de2565b92919091612768565b610e58610174565b80610e62816105bf565b0390f35b61017a565b9160a083830312610f0857610e82825f85016102b0565b92610e9083602083016102b0565b92604082013567ffffffffffffffff8111610f035781610eb191840161065f565b929093606082013567ffffffffffffffff8111610efe5783610ed491840161065f565b929093608082013567ffffffffffffffff8111610ef957610ef592016103d8565b9091565b610182565b610182565b610182565b61017e565b34610f4757610f43610f32610f23366004610e6b565b9695909594919493929361278a565b610f3a610174565b91829182610484565b0390f35b61017a565b34610f7a57610f64610f5f366004610a29565b612a8d565b610f6c610174565b80610f76816105bf565b0390f35b61017a565b91909160a081840312610fea57610f98835f83016102b0565b92610fa681602084016102b0565b92610fb48260408501610276565b92610fc28360608301610276565b92608082013567ffffffffffffffff8111610fe557610fe192016103d8565b9091565b610182565b61017e565b3461102657611022611011611005366004610f7f565b94939093929192612a98565b611019610174565b91829182610484565b0390f35b61017a565b3461105b5761103b3660046108f3565b611057611046612ab2565b61104e610174565b91829182610378565b0390f35b61017a565b5f80fd5b5f90565b611070611064565b508061108b611085630a85bd0160e11b610186565b91610186565b1480156110c1575b90811561109f575b5090565b90506110ba6110b46301ffc9a760e01b610186565b91610186565b145f61109b565b50806110dc6110d6630271189760e51b610186565b91610186565b14611093565b5f90565b6110f060406107e8565b90565b606090565b6111036101606107e8565b90565b5f90565b5f90565b5f90565b5f90565b5f90565b606090565b6111276110f8565b906020808080808080808080808c61113d611106565b81520161114861110a565b81520161115361110e565b81520161115e61110e565b81520161116961110e565b81520161117461110e565b81520161117f611112565b81520161118a611112565b815201611195611116565b8152016111a061111a565b8152016111ab61111a565b81525050565b6111b961111f565b90565b6111c46110e6565b90602080836111d16110f3565b8152016111dc6111b1565b81525050565b6111ea6111bc565b90565b6111f760406107e8565b90565b6112026111ed565b906020808361120f611116565b81520161121a611112565b81525050565b6112286111fa565b90565b906112359061025f565b9052565b9061124390610290565b9052565b90565b60ff1690565b61126461125f61126992611247565b610d54565b61124a565b90565b906112769061124a565b9052565b90611284906102bf565b9052565b906112929061022f565b9052565b6112a0905161022f565b90565b5f80fd5b60e01b90565b5f80fd5b905051906112be8261029c565b565b91906040838203126112fa576112f3906112da60406107e8565b936112e7825f83016112b1565b5f8601526020016112b1565b6020830152565b6112ad565b9060408282031261131857611315915f016112c0565b90565b61017e565b6113269061022f565b9052565b919061133d905f6020850194019061131d565b565b611347610174565b3d5f823e3d90fd5b6113599051610290565b90565b6113659061025f565b9052565b61137290610290565b9052565b906020806113989361138e5f8201515f86019061135c565b0151910190611369565b565b91906113ad905f60408501940190611376565b565b905051906113bc82610262565b565b906020828203126113d7576113d4915f016113af565b90565b61017e565b5190565b60209181520190565b60200190565b6113f89061124a565b9052565b6114059061022f565b9052565b5190565b60209181520190565b61143561143e6020936114439361142c81611409565b9384809361140d565b95869101610cb3565b6107a1565b0190565b6114df9160e06101008201926114635f8201515f8501906113fc565b611475602082015160208501906113fc565b611487604082015160408501906113fc565b611499606082015160608501906113fc565b6114ab608082015160808501906113fc565b6114bd60a082015160a08501906113fc565b6114cf60c082015160c08501906113fc565b01519060e0818403910152611416565b90565b61156a9160c061155960e083016114ff5f8601515f8601906113ef565b611511602086015160208601906113ef565b6115236040860151604086019061135c565b61153560608601516060860190611369565b61154760808601516080860190611369565b60a085015184820360a0860152611447565b9201519060c0818403910152611447565b90565b90611577916114e2565b90565b60200190565b9061159461158d836113dc565b80926113e0565b90816115a5602083028401946113e9565b925f915b8383106115b857505050505090565b909192939460206115da6115d48385600195038752895161156d565b9761157a565b93019301919392906115a9565b6115f0906102bf565b9052565b6116cb916101406116b961016083016116135f8601515f8601906113ef565b611625602086015160208601906115e7565b611637604086015160408601906113fc565b611649606086015160608601906113fc565b61165b608086015160808601906113fc565b61166d60a086015160a08601906113fc565b61167f60c086015160c0860190611369565b61169160e086015160e0860190611369565b6116a561010086015161010086019061135c565b610120850151848203610120860152611416565b92015190610140818403910152611416565b90565b6116fc9160206116eb604083015f8501518482035f860152611580565b9201519060208184039101526115f4565b90565b6117149160208201915f8184039101526116ce565b90565b91949296959390966117276110e2565b506117306111e2565b95611739611220565b98895f01906117479161122b565b886020019061175591611239565b60fe61176090611250565b86602001515f01906117719161126c565b8560200151602001906117839161127a565b84602001516040019061179591611288565b8360200151606001906117a791611288565b8260200151608001906117b991611288565b816020015160a001906117cb91611288565b6117d361273b565b6117dc90610d7f565b916342f1ec699282602001516060016117f490611296565b936117fd610174565b809561180982936112a7565b825260048201906118199161132a565b03815a93604094fa92831561193f576118c89461186761187a9361185b61184f60208099611888975f91611911575b500161134f565b60c08989015101611239565b60e08787015101611239565b61186f610174565b92839186830161139a565b8582018103825203826107bf565b6101408383015101526118a161189c61273b565b610d7f565b6118bd634be149526118b1610174565b958694859384936112a7565b8352600483016116ff565b03915afa90811561190c575f916118de575b5090565b6118ff915060203d8111611905575b6118f781836107bf565b8101906113be565b5f6118da565b503d6118ed565b61133f565b611932915060403d8111611938575b61192a81836107bf565b8101906112ff565b5f611848565b503d611920565b61133f565b5f90565b5050505050611955611944565b50630a85bd0160e11b90565b61196a90610d73565b90565b63ffffffff1690565b61198a61198561198f9261196d565b6112a7565b610186565b90565b909594926119dd946119cc6119d6926119c26080966119b860a088019c5f890190610b81565b6020870190610b81565b604085019061036b565b606083019061036b565b019061036b565b565b90565b6119f66119f16119fb926119df565b610d54565b61124a565b90565b90505190611a0b8261023c565b565b90602082820312611a2657611a23915f016119fe565b90565b61017e565b611a92600491611a83611b0d979995611ae5959c999c9b979b611a4c6110e2565b508c631d8c1afa92611a6a611a6030611961565b9691929394611976565b95611a73610174565b9889976020890190815201611992565b602082018103825203826107bf565b97611ad8611a9e6111e2565b97611ab3611aaa611220565b9a5f8c0161122b565b611acc611ac060ff6119e2565b5f60208c01510161126c565b6020808a01510161127a565b6040602088015101611288565b6020611af7611af261273b565b610d7f565b63891e616890611b05610174565b9586926112a7565b82528180611b1d600482016105bf565b03915afa908115611d0e57611b48611b5592611b62955f91611ce0575b506060602089015101611288565b6080602087015101611288565b60a0602085015101611288565b611bb06040611b77611b7261273b565b610d7f565b6342f1ec6990611ba5611b906060602089015101611296565b92611b99610174565b958694859384936112a7565b83526004830161132a565b03915afa938415611cdb57611c6495611bfa611c1694611bee611be26020809a611c24985f91611cad575b500161134f565b60c08a8a015101611239565b60e08888015101611239565b610120868601510152611c0b610174565b92839186830161139a565b8582018103825203826107bf565b610140838301510152611c3d611c3861273b565b610d7f565b611c59634be14952611c4d610174565b958694859384936112a7565b8352600483016116ff565b03915afa908115611ca8575f91611c7a575b5090565b611c9b915060203d8111611ca1575b611c9381836107bf565b8101906113be565b5f611c76565b503d611c89565b61133f565b611cce915060403d8111611cd4575b611cc681836107bf565b8101906112ff565b5f611bdb565b503d611cbc565b61133f565b611d01915060203d8111611d07575b611cf981836107bf565b810190611a0d565b5f611b3a565b503d611cef565b61133f565b611d2490611d1f612bee565b611d3d565b565b611d2f5f610c2e565b90565b611d3a611d26565b90565b80611d59611d53611d4d30611961565b3161025f565b9161025f565b11611d7457611d72903390611d6c611d32565b91612c88565b565b611d7c610174565b631e9acf1760e31b815280611d93600482016105bf565b0390fd5b611da090611d13565b565b5f910312611dac57565b61017e565b916020611dd2929493611dcb60408201965f83019061036b565b019061036b565b565b611de4611ddf61273b565b610d7f565b90639abe7903903492919291349193813b15611e65575f93611e1791611e22611e0b610174565b978896879586946112a7565b845260048401611db1565b03925af18015611e6057611e34575b50565b611e53905f3d8111611e59575b611e4b81836107bf565b810190611da2565b5f611e31565b503d611e41565b61133f565b6112a3565b5090565b5090565b5090565b90565b611e8d611e88611e9292611e76565b610d54565b61025f565b90565b5f7f77726f6e67206172726179206c656e6774687300000000000000000000000000910152565b611ec96013602092610caa565b611ed281611e95565b0190565b611eeb9060208101905f818303910152611ebc565b90565b15611ef557565b611efd610174565b62461bcd60e51b815280611f1360048201611ed6565b0390fd5b6001611f23910161025f565b90565b634e487b7160e01b5f52603260045260245ffd5b9190811015611f4a576020020190565b611f26565b35611f598161029c565b90565b9190811015611f6c576020020190565b611f26565b35611f7b81610262565b90565b5f80fd5b5f80fd5b5f80fd5b903590600160200381360303821215611fcc570180359067ffffffffffffffff8211611fc757602001916001820236038313611fc257565b611f86565b611f82565b611f7e565b90821015611fec576020611fe89202810190611f8a565b9091565b611f26565b611ffc91369161082b565b90565b91909295949561200d612d39565b612018838590611e6a565b61203461202e612029888b90611e6e565b61025f565b9161025f565b148061217f575b61204490611eee565b61204f828290611e72565b61206161205b5f611e79565b9161025f565b145f146120ec5750506120735f611e79565b5b8061209161208b612086858790611e6a565b61025f565b9161025f565b10156120e3576120de906120d96120b26120ad85878591611f3a565b611f4f565b5f6120d36120cd6120c58a8d8891611fd1565b919093611e79565b92611ff1565b91612c88565b611f17565b612074565b5050505090505b565b916120fa5f97949297611e79565b5b8061211861211261210d858790611e6a565b61025f565b9161025f565b10156121725761216d9061216861213961213485878591611f3a565b611f4f565b61214d6121488c898691611f5c565b611f71565b61216261215c8b8b8791611fd1565b90611ff1565b91612c88565b611f17565b6120fb565b50505050505090506120ea565b5061218b828290611e72565b61219d6121975f611e79565b9161025f565b1480156121aa575b61203b565b506120446121b9838390611e72565b6121d56121cf6121ca898c90611e6e565b61025f565b9161025f565b1490506121a5565b906121ef916121ea612da1565b6121f1565b565b90612204916121ff81612e4f565b612ebf565b565b90612210916121dd565b565b5f90565b61222790612222612fcb565b61227a565b90565b90565b5f1b90565b61224661224161224b9261222a565b61222d565b610902565b90565b6122777f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc612232565b90565b5061228361224e565b90565b612296612291612212565b612216565b90565b906122b298979695949392916122ad612bee565b6122f8565b565b156122bb57565b5f80fd5b634e487b7160e01b5f52601160045260245ffd5b6122e26122e89193929361025f565b9261025f565b82018092116122f357565b6122bf565b9097949692959193966123096111e2565b97612312611220565b958a875f01906123219161122b565b866020019061232f91611239565b60fe61233a90611250565b89602001515f019061234b9161126c565b88602001516020019061235d9161127a565b87602001516040019061236f91611288565b86602001516060019061238191611288565b85602001516080019061239391611288565b846020015160a001906123a591611288565b6123ad61273b565b6123b690610d7f565b906342f1ec699185602001516060016123ce90611296565b926123d7610174565b80946123e382936112a7565b825260048201906123f39161132a565b03815a93604094fa80156125d55761245193612430612423602061243d94612460975f916125a7575b500161134f565b60c060208a015101611239565b60e0602088015101611239565b612445610174565b9283916020830161139a565b602082018103825203826107bf565b610140602084015101526124a9602061247f61247a61273b565b610d7f565b634be149529061249e8692612492610174565b958694859384936112a7565b8352600483016116ff565b03915afa80156125a2576124d9915f91612574575b506124d26124cc849261025f565b9161025f565b10156122b4565b6124f86124ec6124e761273b565b610d7f565b936372afdea1926122d3565b9290929190803b1561256f576125215f9361252c95612515610174565b968795869485936112a7565b8352600483016116ff565b03925af1801561256a5761253e575b50565b61255d905f3d8111612563575b61255581836107bf565b810190611da2565b5f61253b565b503d61254b565b61133f565b6112a3565b612595915060203d811161259b575b61258d81836107bf565b8101906113be565b5f6124be565b503d612583565b61133f565b6125c8915060403d81116125ce575b6125c081836107bf565b8101906112ff565b5f61241c565b503d6125b6565b61133f565b906125eb9897969594939291612299565b565b612607906125f9611064565b50612602613030565b61307c565b90565b96949290979593916126448961263d61263761263261262b349487906122d3565b87906122d3565b61025f565b9161025f565b10156122b4565b806126576126515f611e79565b9161025f565b03612668575b505050505050505050565b61267c9833989091929394959697986130ae565b5f808080808080808061265d565b61269b90612696612bee565b61269d565b565b6126ad6126a861273b565b610d7f565b906339875d1a90823b15612727576126e4926126d95f80946126cd610174565b968795869485936112a7565b835260048301610378565b03925af18015612722576126f6575b50565b612715905f3d811161271b575b61270d81836107bf565b810190611da2565b5f6126f3565b503d612703565b61133f565b6112a3565b6127359061268a565b565b5f90565b612743612737565b507f000000000000000000000000000000000000000000000000000000000000000090565b612788936127829193929361277b612d39565b9392611ff1565b91612c88565b565b505050505050505061279a611944565b5063bc197c8160e01b90565b60401c90565b60ff1690565b6127be6127c3916127a6565b6127ac565b90565b6127d090546127b2565b90565b5f1c90565b67ffffffffffffffff1690565b6127f16127f6916127d3565b6127d8565b90565b61280390546127e5565b90565b61281a61281561281f92611e76565b610d54565b61022f565b90565b90565b61283961283461283e92612822565b610d54565b61022f565b90565b61284a90610d73565b90565b9061286067ffffffffffffffff9161222d565b9181191691161790565b61287e6128796128839261022f565b610d54565b61022f565b90565b90565b9061289e6128996128a59261286a565b612886565b825461284d565b9055565b60401b90565b906128c368ff0000000000000000916128a9565b9181191691161790565b6128d6906101d3565b90565b90565b906128f16128ec6128f8926128cd565b6128d9565b82546128af565b9055565b61290590612825565b9052565b919061291c905f602085019401906128fc565b565b612926613473565b9061293b6129355f84016127c6565b156101d3565b906129475f84016127f9565b8061295a6129545f612806565b9161022f565b1480612a7b575b9061297561296f6001612825565b9161022f565b1480612a53575b6129879091156101d3565b9081612a42575b50612a1f576129b7906129ac6129a46001612825565b5f8601612889565b82612a0d575b612a82565b6129bf575b50565b6129cc905f8091016128dc565b6001612a047fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d2916129fb610174565b91829182612909565b0390a15f6129bc565b612a1a60015f86016128dc565b6129b2565b612a27610174565b63f92ee8a960e01b815280612a3e600482016105bf565b0390fd5b612a4d9150156101d3565b5f61298e565b50612987612a6030612841565b3b612a73612a6d5f611e79565b9161025f565b14905061297c565b5082612961565b612a8b906134f9565b565b612a969061291e565b565b505050505050612aa6611944565b5063f23a6e6160e01b90565b612aba6110e2565b50612b026020612ad0612acb61273b565b610d7f565b63653e75ec90612af7612ae230611961565b92612aeb610174565b958694859384936112a7565b835260048301610b8e565b03915afa908115612b46575f91612b18575b5090565b612b39915060203d8111612b3f575b612b3181836107bf565b8101906113be565b5f612b14565b503d612b27565b61133f565b612b57612b5c916127d3565b610b43565b90565b612b699054612b4b565b90565b5f7f6f6e6c79206f776e657200000000000000000000000000000000000000000000910152565b612ba0600a602092610caa565b612ba981612b6c565b0190565b612bc29060208101905f818303910152612b93565b90565b15612bcc57565b612bd4610174565b62461bcd60e51b815280612bea60048201612bad565b0390fd5b33612c09612c03612bfe5f612b5f565b610290565b91610290565b148015612c1c575b612c1a90612bc5565b565b50612c1a33612c3b612c35612c3030611961565b610290565b91610290565b149050612c11565b90612c55612c50836107fd565b6107e8565b918252565b606090565b3d5f14612c7a57612c6f3d612c43565b903d5f602084013e5b565b612c82612c5a565b90612c78565b905f92839291602082019151925af1612ca9612ca2612c5f565b91156101d3565b612cb05750565b602081519101fd5b5f7f6163636f756e743a206e6f74204f776e6572206f7220456e747279506f696e74910152565b612ceb60208092610caa565b612cf481612cb8565b0190565b612d0d9060208101905f818303910152612cdf565b90565b15612d1757565b612d1f610174565b62461bcd60e51b815280612d3560048201612cf8565b0390fd5b33612d5b612d55612d50612d4b61273b565b610d7f565b610290565b91610290565b148015612d6e575b612d6c90612d10565b565b50612d6c33612d8d612d87612d825f612b5f565b610290565b91610290565b149050612d63565b612d9e90610d73565b90565b612daa30612d95565b612ddc612dd67f0000000000000000000000000000000000000000000000000000000000000000610290565b91610290565b148015612e0d575b612dea57565b612df2610174565b63703e46dd60e11b815280612e09600482016105bf565b0390fd5b50612e1661357c565b612e48612e427f0000000000000000000000000000000000000000000000000000000000000000610290565b91610290565b1415612de4565b50612e58612bee565b565b612e6390610d57565b90565b612e6f90612e5a565b90565b612e7b90610d73565b90565b612e8781610902565b03612e8e57565b5f80fd5b90505190612e9f82612e7e565b565b90602082820312612eba57612eb7915f01612e92565b90565b61017e565b9190612eed6020612ed7612ed286612e66565b612e72565b6352d1902d90612ee5610174565b9384926112a7565b82528180612efd600482016105bf565b03915afa80915f92612f9b575b50155f14612f45575050906001612f1f57505b565b612f4190612f2b610174565b918291634c9c8ce360e01b835260048301610b8e565b0390fd5b9283612f60612f5a612f5561224e565b610902565b91610902565b03612f7557612f709293506135a2565b612f1d565b612f9784612f81610174565b918291632a87526960e21b835260048301610912565b0390fd5b612fbd91925060203d8111612fc4575b612fb581836107bf565b810190612ea1565b905f612f0a565b503d612fab565b612fd430612d95565b6130066130007f0000000000000000000000000000000000000000000000000000000000000000610290565b91610290565b0361300d57565b613015610174565b63703e46dd60e11b81528061302c600482016105bf565b0390fd5b3361305261304c61304761304261273b565b610d7f565b610290565b91610290565b0361305957565b613061610174565b637324df4760e01b815280613078600482016105bf565b0390fd5b613084611064565b506130a061309a6130945f612b5f565b92610290565b91610290565b036130aa57600190565b5f90565b613109906130fa613189946004949c999b969a98979c8b631d8c1afa926130e16130d730611961565b9691929394611976565b956130ea610174565b9889976020890190815201611992565b602082018103825203826107bf565b916131616131156111e2565b98613154613121611220565b9661312e8b5f8a0161122b565b6131488c5f602061313f60ff6119e2565b9201510161126c565b6020808d01510161127a565b604060208b015101611288565b602061317361316e61273b565b610d7f565b63891e616890613181610174565b9485926112a7565b82528180613199600482016105bf565b03915afa801561346e5761322c956131c76131d4926131e1955f91613440575b50606060208d015101611288565b608060208b015101611288565b60a0602089015101611288565b60406131f36131ee61273b565b610d7f565b6342f1ec699061322161320c606060208c015101611296565b92613215610174565b978894859384936112a7565b83526004830161132a565b03915afa801561343b576132909461326561325860206132729461329f985f9161340d575b500161134f565b60c060208b015101611239565b60e0602089015101611239565b61012060208701510152613284610174565b9283916020830161139a565b602082018103825203826107bf565b610140602084015101526132e860206132be6132b961273b565b610d7f565b634be14952906132dd86926132d1610174565b958694859384936112a7565b8352600483016116ff565b03915afa801561340857613318915f916133da575b5061331161330b869261025f565b9161025f565b10156122b4565b61333f3461333861333261332d8786906122d3565b61025f565b9161025f565b10156122b4565b61335e61335261334d61273b565b610d7f565b936372afdea1926122d3565b9290929190803b156133d5576133875f936133929561337b610174565b968795869485936112a7565b8352600483016116ff565b03925af180156133d0576133a4575b50565b6133c3905f3d81116133c9575b6133bb81836107bf565b810190611da2565b5f6133a1565b503d6133b1565b61133f565b6112a3565b6133fb915060203d8111613401575b6133f381836107bf565b8101906113be565b5f6132fd565b503d6133e9565b61133f565b61342e915060403d8111613434575b61342681836107bf565b8101906112ff565b5f613251565b503d61341c565b61133f565b613461915060203d8111613467575b61345981836107bf565b810190611a0d565b5f6131b9565b503d61344f565b61133f565b7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a0090565b906134a860018060a01b039161222d565b9181191691161790565b6134bb90610d73565b90565b90565b906134d66134d16134dd926134b2565b6134be565b8254613497565b9055565b6134ea90610d57565b90565b6134f6906134e1565b90565b613503905f6134c1565b7f000000000000000000000000000000000000000000000000000000000000000061352d5f612b5f565b61356061355a7ff75ce79a4abcc8ed48f3b3544cd773dd667599027b50a42ff4bbf68f1a65e7b0936134ed565b916134b2565b91613569610174565b80613573816105bf565b0390a3565b5f90565b613584613578565b5061359f5f61359961359461224e565b61362b565b01612b5f565b90565b906135ac8261362e565b816135d77fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b916134b2565b906135e0610174565b806135ea816105bf565b0390a26135f681611409565b6136086136025f611e79565b9161025f565b115f1461361c57613618916136c7565b505b565b505061362661368a565b61361a565b90565b803b61364261363c5f611e79565b9161025f565b1461366457613662905f61365c61365761224e565b61362b565b016134c1565b565b61368690613670610174565b918291634c9c8ce360e01b835260048301610b8e565b0390fd5b3461369d6136975f611e79565b9161025f565b116136a457565b6136ac610174565b63b398979f60e01b8152806136c3600482016105bf565b0390fd5b5f806136f3936136d5612c5a565b508390602081019051915af4906136ea612c5f565b909190916136f6565b90565b9061370a90613703612c5a565b50156101d3565b5f146137165750613781565b61371f82611409565b61373161372b5f611e79565b9161025f565b1480613766575b613740575090565b6137629061374c610174565b918291639996b31560e01b835260048301610b8e565b0390fd5b50803b61377b6137755f611e79565b9161025f565b14613738565b61378a81611409565b61379c6137965f611e79565b9161025f565b115f146137ab57805190602001fd5b6137b3610174565b63d6bda27560e01b8152806137ca600482016105bf565b0390fdfea26469706673582212209dcd468482b5f43a2cae6f7e9599c99637a86f31538d8d04295ca7fffb5d957864736f6c63430008180033",
}

// SimpleAccountABI is the input ABI used to generate the binding from.
// Deprecated: Use SimpleAccountMetaData.ABI instead.
var SimpleAccountABI = SimpleAccountMetaData.ABI

// SimpleAccountBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use SimpleAccountMetaData.Bin instead.
var SimpleAccountBin = SimpleAccountMetaData.Bin

// DeploySimpleAccount deploys a new Ethereum contract, binding an instance of SimpleAccount to it.
func DeploySimpleAccount(auth *bind.TransactOpts, backend bind.ContractBackend, anEntryPoint common.Address) (common.Address, *types.Transaction, *SimpleAccount, error) {
	parsed, err := SimpleAccountMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(SimpleAccountBin), backend, anEntryPoint)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &SimpleAccount{SimpleAccountCaller: SimpleAccountCaller{contract: contract}, SimpleAccountTransactor: SimpleAccountTransactor{contract: contract}, SimpleAccountFilterer: SimpleAccountFilterer{contract: contract}}, nil
}

// SimpleAccount is an auto generated Go binding around an Ethereum contract.
type SimpleAccount struct {
	SimpleAccountCaller     // Read-only binding to the contract
	SimpleAccountTransactor // Write-only binding to the contract
	SimpleAccountFilterer   // Log filterer for contract events
}

// SimpleAccountCaller is an auto generated read-only Go binding around an Ethereum contract.
type SimpleAccountCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// SimpleAccountTransactor is an auto generated write-only Go binding around an Ethereum contract.
type SimpleAccountTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// SimpleAccountFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type SimpleAccountFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// SimpleAccountSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type SimpleAccountSession struct {
	Contract     *SimpleAccount    // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// SimpleAccountCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type SimpleAccountCallerSession struct {
	Contract *SimpleAccountCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts        // Call options to use throughout this session
}

// SimpleAccountTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type SimpleAccountTransactorSession struct {
	Contract     *SimpleAccountTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts        // Transaction auth options to use throughout this session
}

// SimpleAccountRaw is an auto generated low-level Go binding around an Ethereum contract.
type SimpleAccountRaw struct {
	Contract *SimpleAccount // Generic contract binding to access the raw methods on
}

// SimpleAccountCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type SimpleAccountCallerRaw struct {
	Contract *SimpleAccountCaller // Generic read-only contract binding to access the raw methods on
}

// SimpleAccountTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type SimpleAccountTransactorRaw struct {
	Contract *SimpleAccountTransactor // Generic write-only contract binding to access the raw methods on
}

// NewSimpleAccount creates a new instance of SimpleAccount, bound to a specific deployed contract.
func NewSimpleAccount(address common.Address, backend bind.ContractBackend) (*SimpleAccount, error) {
	contract, err := bindSimpleAccount(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &SimpleAccount{SimpleAccountCaller: SimpleAccountCaller{contract: contract}, SimpleAccountTransactor: SimpleAccountTransactor{contract: contract}, SimpleAccountFilterer: SimpleAccountFilterer{contract: contract}}, nil
}

// NewSimpleAccountCaller creates a new read-only instance of SimpleAccount, bound to a specific deployed contract.
func NewSimpleAccountCaller(address common.Address, caller bind.ContractCaller) (*SimpleAccountCaller, error) {
	contract, err := bindSimpleAccount(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &SimpleAccountCaller{contract: contract}, nil
}

// NewSimpleAccountTransactor creates a new write-only instance of SimpleAccount, bound to a specific deployed contract.
func NewSimpleAccountTransactor(address common.Address, transactor bind.ContractTransactor) (*SimpleAccountTransactor, error) {
	contract, err := bindSimpleAccount(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &SimpleAccountTransactor{contract: contract}, nil
}

// NewSimpleAccountFilterer creates a new log filterer instance of SimpleAccount, bound to a specific deployed contract.
func NewSimpleAccountFilterer(address common.Address, filterer bind.ContractFilterer) (*SimpleAccountFilterer, error) {
	contract, err := bindSimpleAccount(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &SimpleAccountFilterer{contract: contract}, nil
}

// bindSimpleAccount binds a generic wrapper to an already deployed contract.
func bindSimpleAccount(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := SimpleAccountMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_SimpleAccount *SimpleAccountRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _SimpleAccount.Contract.SimpleAccountCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_SimpleAccount *SimpleAccountRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _SimpleAccount.Contract.SimpleAccountTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_SimpleAccount *SimpleAccountRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _SimpleAccount.Contract.SimpleAccountTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_SimpleAccount *SimpleAccountCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _SimpleAccount.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_SimpleAccount *SimpleAccountTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _SimpleAccount.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_SimpleAccount *SimpleAccountTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _SimpleAccount.Contract.contract.Transact(opts, method, params...)
}

// UPGRADEINTERFACEVERSION is a free data retrieval call binding the contract method 0xad3cb1cc.
//
// Solidity: function UPGRADE_INTERFACE_VERSION() view returns(string)
func (_SimpleAccount *SimpleAccountCaller) UPGRADEINTERFACEVERSION(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _SimpleAccount.contract.Call(opts, &out, "UPGRADE_INTERFACE_VERSION")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// UPGRADEINTERFACEVERSION is a free data retrieval call binding the contract method 0xad3cb1cc.
//
// Solidity: function UPGRADE_INTERFACE_VERSION() view returns(string)
func (_SimpleAccount *SimpleAccountSession) UPGRADEINTERFACEVERSION() (string, error) {
	return _SimpleAccount.Contract.UPGRADEINTERFACEVERSION(&_SimpleAccount.CallOpts)
}

// UPGRADEINTERFACEVERSION is a free data retrieval call binding the contract method 0xad3cb1cc.
//
// Solidity: function UPGRADE_INTERFACE_VERSION() view returns(string)
func (_SimpleAccount *SimpleAccountCallerSession) UPGRADEINTERFACEVERSION() (string, error) {
	return _SimpleAccount.Contract.UPGRADEINTERFACEVERSION(&_SimpleAccount.CallOpts)
}

// EntryPoint is a free data retrieval call binding the contract method 0xb0d691fe.
//
// Solidity: function entryPoint() view returns(address)
func (_SimpleAccount *SimpleAccountCaller) EntryPoint(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _SimpleAccount.contract.Call(opts, &out, "entryPoint")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// EntryPoint is a free data retrieval call binding the contract method 0xb0d691fe.
//
// Solidity: function entryPoint() view returns(address)
func (_SimpleAccount *SimpleAccountSession) EntryPoint() (common.Address, error) {
	return _SimpleAccount.Contract.EntryPoint(&_SimpleAccount.CallOpts)
}

// EntryPoint is a free data retrieval call binding the contract method 0xb0d691fe.
//
// Solidity: function entryPoint() view returns(address)
func (_SimpleAccount *SimpleAccountCallerSession) EntryPoint() (common.Address, error) {
	return _SimpleAccount.Contract.EntryPoint(&_SimpleAccount.CallOpts)
}

// EstimateDepositRemoteCrossFee is a free data retrieval call binding the contract method 0x211a4789.
//
// Solidity: function estimateDepositRemoteCrossFee(address owner, uint256 nonce, uint256 valueDepositAmount, uint256 gasDepositAmount, uint24 gasLimit, uint64 gasPrice, uint64 minArrivalTime, uint64 maxArrivalTime, address selectedRelayer) view returns(uint256)
func (_SimpleAccount *SimpleAccountCaller) EstimateDepositRemoteCrossFee(opts *bind.CallOpts, owner common.Address, nonce *big.Int, valueDepositAmount *big.Int, gasDepositAmount *big.Int, gasLimit *big.Int, gasPrice uint64, minArrivalTime uint64, maxArrivalTime uint64, selectedRelayer common.Address) (*big.Int, error) {
	var out []interface{}
	err := _SimpleAccount.contract.Call(opts, &out, "estimateDepositRemoteCrossFee", owner, nonce, valueDepositAmount, gasDepositAmount, gasLimit, gasPrice, minArrivalTime, maxArrivalTime, selectedRelayer)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// EstimateDepositRemoteCrossFee is a free data retrieval call binding the contract method 0x211a4789.
//
// Solidity: function estimateDepositRemoteCrossFee(address owner, uint256 nonce, uint256 valueDepositAmount, uint256 gasDepositAmount, uint24 gasLimit, uint64 gasPrice, uint64 minArrivalTime, uint64 maxArrivalTime, address selectedRelayer) view returns(uint256)
func (_SimpleAccount *SimpleAccountSession) EstimateDepositRemoteCrossFee(owner common.Address, nonce *big.Int, valueDepositAmount *big.Int, gasDepositAmount *big.Int, gasLimit *big.Int, gasPrice uint64, minArrivalTime uint64, maxArrivalTime uint64, selectedRelayer common.Address) (*big.Int, error) {
	return _SimpleAccount.Contract.EstimateDepositRemoteCrossFee(&_SimpleAccount.CallOpts, owner, nonce, valueDepositAmount, gasDepositAmount, gasLimit, gasPrice, minArrivalTime, maxArrivalTime, selectedRelayer)
}

// EstimateDepositRemoteCrossFee is a free data retrieval call binding the contract method 0x211a4789.
//
// Solidity: function estimateDepositRemoteCrossFee(address owner, uint256 nonce, uint256 valueDepositAmount, uint256 gasDepositAmount, uint24 gasLimit, uint64 gasPrice, uint64 minArrivalTime, uint64 maxArrivalTime, address selectedRelayer) view returns(uint256)
func (_SimpleAccount *SimpleAccountCallerSession) EstimateDepositRemoteCrossFee(owner common.Address, nonce *big.Int, valueDepositAmount *big.Int, gasDepositAmount *big.Int, gasLimit *big.Int, gasPrice uint64, minArrivalTime uint64, maxArrivalTime uint64, selectedRelayer common.Address) (*big.Int, error) {
	return _SimpleAccount.Contract.EstimateDepositRemoteCrossFee(&_SimpleAccount.CallOpts, owner, nonce, valueDepositAmount, gasDepositAmount, gasLimit, gasPrice, minArrivalTime, maxArrivalTime, selectedRelayer)
}

// EstimateWithdrawRemoteCrossFee is a free data retrieval call binding the contract method 0x1376c37e.
//
// Solidity: function estimateWithdrawRemoteCrossFee(uint64 destChainId, uint256 amount, address receiver, uint24 gasLimit, uint64 gasPrice, uint64 minArrivalTime, uint64 maxArrivalTime, address selectedRelayer) view returns(uint256)
func (_SimpleAccount *SimpleAccountCaller) EstimateWithdrawRemoteCrossFee(opts *bind.CallOpts, destChainId uint64, amount *big.Int, receiver common.Address, gasLimit *big.Int, gasPrice uint64, minArrivalTime uint64, maxArrivalTime uint64, selectedRelayer common.Address) (*big.Int, error) {
	var out []interface{}
	err := _SimpleAccount.contract.Call(opts, &out, "estimateWithdrawRemoteCrossFee", destChainId, amount, receiver, gasLimit, gasPrice, minArrivalTime, maxArrivalTime, selectedRelayer)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// EstimateWithdrawRemoteCrossFee is a free data retrieval call binding the contract method 0x1376c37e.
//
// Solidity: function estimateWithdrawRemoteCrossFee(uint64 destChainId, uint256 amount, address receiver, uint24 gasLimit, uint64 gasPrice, uint64 minArrivalTime, uint64 maxArrivalTime, address selectedRelayer) view returns(uint256)
func (_SimpleAccount *SimpleAccountSession) EstimateWithdrawRemoteCrossFee(destChainId uint64, amount *big.Int, receiver common.Address, gasLimit *big.Int, gasPrice uint64, minArrivalTime uint64, maxArrivalTime uint64, selectedRelayer common.Address) (*big.Int, error) {
	return _SimpleAccount.Contract.EstimateWithdrawRemoteCrossFee(&_SimpleAccount.CallOpts, destChainId, amount, receiver, gasLimit, gasPrice, minArrivalTime, maxArrivalTime, selectedRelayer)
}

// EstimateWithdrawRemoteCrossFee is a free data retrieval call binding the contract method 0x1376c37e.
//
// Solidity: function estimateWithdrawRemoteCrossFee(uint64 destChainId, uint256 amount, address receiver, uint24 gasLimit, uint64 gasPrice, uint64 minArrivalTime, uint64 maxArrivalTime, address selectedRelayer) view returns(uint256)
func (_SimpleAccount *SimpleAccountCallerSession) EstimateWithdrawRemoteCrossFee(destChainId uint64, amount *big.Int, receiver common.Address, gasLimit *big.Int, gasPrice uint64, minArrivalTime uint64, maxArrivalTime uint64, selectedRelayer common.Address) (*big.Int, error) {
	return _SimpleAccount.Contract.EstimateWithdrawRemoteCrossFee(&_SimpleAccount.CallOpts, destChainId, amount, receiver, gasLimit, gasPrice, minArrivalTime, maxArrivalTime, selectedRelayer)
}

// GetPreGasBalance is a free data retrieval call binding the contract method 0xfc709266.
//
// Solidity: function getPreGasBalance() view returns(uint256)
func (_SimpleAccount *SimpleAccountCaller) GetPreGasBalance(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _SimpleAccount.contract.Call(opts, &out, "getPreGasBalance")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetPreGasBalance is a free data retrieval call binding the contract method 0xfc709266.
//
// Solidity: function getPreGasBalance() view returns(uint256)
func (_SimpleAccount *SimpleAccountSession) GetPreGasBalance() (*big.Int, error) {
	return _SimpleAccount.Contract.GetPreGasBalance(&_SimpleAccount.CallOpts)
}

// GetPreGasBalance is a free data retrieval call binding the contract method 0xfc709266.
//
// Solidity: function getPreGasBalance() view returns(uint256)
func (_SimpleAccount *SimpleAccountCallerSession) GetPreGasBalance() (*big.Int, error) {
	return _SimpleAccount.Contract.GetPreGasBalance(&_SimpleAccount.CallOpts)
}

// OnERC1155BatchReceived is a free data retrieval call binding the contract method 0xbc197c81.
//
// Solidity: function onERC1155BatchReceived(address , address , uint256[] , uint256[] , bytes ) pure returns(bytes4)
func (_SimpleAccount *SimpleAccountCaller) OnERC1155BatchReceived(opts *bind.CallOpts, arg0 common.Address, arg1 common.Address, arg2 []*big.Int, arg3 []*big.Int, arg4 []byte) ([4]byte, error) {
	var out []interface{}
	err := _SimpleAccount.contract.Call(opts, &out, "onERC1155BatchReceived", arg0, arg1, arg2, arg3, arg4)

	if err != nil {
		return *new([4]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([4]byte)).(*[4]byte)

	return out0, err

}

// OnERC1155BatchReceived is a free data retrieval call binding the contract method 0xbc197c81.
//
// Solidity: function onERC1155BatchReceived(address , address , uint256[] , uint256[] , bytes ) pure returns(bytes4)
func (_SimpleAccount *SimpleAccountSession) OnERC1155BatchReceived(arg0 common.Address, arg1 common.Address, arg2 []*big.Int, arg3 []*big.Int, arg4 []byte) ([4]byte, error) {
	return _SimpleAccount.Contract.OnERC1155BatchReceived(&_SimpleAccount.CallOpts, arg0, arg1, arg2, arg3, arg4)
}

// OnERC1155BatchReceived is a free data retrieval call binding the contract method 0xbc197c81.
//
// Solidity: function onERC1155BatchReceived(address , address , uint256[] , uint256[] , bytes ) pure returns(bytes4)
func (_SimpleAccount *SimpleAccountCallerSession) OnERC1155BatchReceived(arg0 common.Address, arg1 common.Address, arg2 []*big.Int, arg3 []*big.Int, arg4 []byte) ([4]byte, error) {
	return _SimpleAccount.Contract.OnERC1155BatchReceived(&_SimpleAccount.CallOpts, arg0, arg1, arg2, arg3, arg4)
}

// OnERC1155Received is a free data retrieval call binding the contract method 0xf23a6e61.
//
// Solidity: function onERC1155Received(address , address , uint256 , uint256 , bytes ) pure returns(bytes4)
func (_SimpleAccount *SimpleAccountCaller) OnERC1155Received(opts *bind.CallOpts, arg0 common.Address, arg1 common.Address, arg2 *big.Int, arg3 *big.Int, arg4 []byte) ([4]byte, error) {
	var out []interface{}
	err := _SimpleAccount.contract.Call(opts, &out, "onERC1155Received", arg0, arg1, arg2, arg3, arg4)

	if err != nil {
		return *new([4]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([4]byte)).(*[4]byte)

	return out0, err

}

// OnERC1155Received is a free data retrieval call binding the contract method 0xf23a6e61.
//
// Solidity: function onERC1155Received(address , address , uint256 , uint256 , bytes ) pure returns(bytes4)
func (_SimpleAccount *SimpleAccountSession) OnERC1155Received(arg0 common.Address, arg1 common.Address, arg2 *big.Int, arg3 *big.Int, arg4 []byte) ([4]byte, error) {
	return _SimpleAccount.Contract.OnERC1155Received(&_SimpleAccount.CallOpts, arg0, arg1, arg2, arg3, arg4)
}

// OnERC1155Received is a free data retrieval call binding the contract method 0xf23a6e61.
//
// Solidity: function onERC1155Received(address , address , uint256 , uint256 , bytes ) pure returns(bytes4)
func (_SimpleAccount *SimpleAccountCallerSession) OnERC1155Received(arg0 common.Address, arg1 common.Address, arg2 *big.Int, arg3 *big.Int, arg4 []byte) ([4]byte, error) {
	return _SimpleAccount.Contract.OnERC1155Received(&_SimpleAccount.CallOpts, arg0, arg1, arg2, arg3, arg4)
}

// OnERC721Received is a free data retrieval call binding the contract method 0x150b7a02.
//
// Solidity: function onERC721Received(address , address , uint256 , bytes ) pure returns(bytes4)
func (_SimpleAccount *SimpleAccountCaller) OnERC721Received(opts *bind.CallOpts, arg0 common.Address, arg1 common.Address, arg2 *big.Int, arg3 []byte) ([4]byte, error) {
	var out []interface{}
	err := _SimpleAccount.contract.Call(opts, &out, "onERC721Received", arg0, arg1, arg2, arg3)

	if err != nil {
		return *new([4]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([4]byte)).(*[4]byte)

	return out0, err

}

// OnERC721Received is a free data retrieval call binding the contract method 0x150b7a02.
//
// Solidity: function onERC721Received(address , address , uint256 , bytes ) pure returns(bytes4)
func (_SimpleAccount *SimpleAccountSession) OnERC721Received(arg0 common.Address, arg1 common.Address, arg2 *big.Int, arg3 []byte) ([4]byte, error) {
	return _SimpleAccount.Contract.OnERC721Received(&_SimpleAccount.CallOpts, arg0, arg1, arg2, arg3)
}

// OnERC721Received is a free data retrieval call binding the contract method 0x150b7a02.
//
// Solidity: function onERC721Received(address , address , uint256 , bytes ) pure returns(bytes4)
func (_SimpleAccount *SimpleAccountCallerSession) OnERC721Received(arg0 common.Address, arg1 common.Address, arg2 *big.Int, arg3 []byte) ([4]byte, error) {
	return _SimpleAccount.Contract.OnERC721Received(&_SimpleAccount.CallOpts, arg0, arg1, arg2, arg3)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_SimpleAccount *SimpleAccountCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _SimpleAccount.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_SimpleAccount *SimpleAccountSession) Owner() (common.Address, error) {
	return _SimpleAccount.Contract.Owner(&_SimpleAccount.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_SimpleAccount *SimpleAccountCallerSession) Owner() (common.Address, error) {
	return _SimpleAccount.Contract.Owner(&_SimpleAccount.CallOpts)
}

// ProxiableUUID is a free data retrieval call binding the contract method 0x52d1902d.
//
// Solidity: function proxiableUUID() view returns(bytes32)
func (_SimpleAccount *SimpleAccountCaller) ProxiableUUID(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _SimpleAccount.contract.Call(opts, &out, "proxiableUUID")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// ProxiableUUID is a free data retrieval call binding the contract method 0x52d1902d.
//
// Solidity: function proxiableUUID() view returns(bytes32)
func (_SimpleAccount *SimpleAccountSession) ProxiableUUID() ([32]byte, error) {
	return _SimpleAccount.Contract.ProxiableUUID(&_SimpleAccount.CallOpts)
}

// ProxiableUUID is a free data retrieval call binding the contract method 0x52d1902d.
//
// Solidity: function proxiableUUID() view returns(bytes32)
func (_SimpleAccount *SimpleAccountCallerSession) ProxiableUUID() ([32]byte, error) {
	return _SimpleAccount.Contract.ProxiableUUID(&_SimpleAccount.CallOpts)
}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_SimpleAccount *SimpleAccountCaller) SupportsInterface(opts *bind.CallOpts, interfaceId [4]byte) (bool, error) {
	var out []interface{}
	err := _SimpleAccount.contract.Call(opts, &out, "supportsInterface", interfaceId)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_SimpleAccount *SimpleAccountSession) SupportsInterface(interfaceId [4]byte) (bool, error) {
	return _SimpleAccount.Contract.SupportsInterface(&_SimpleAccount.CallOpts, interfaceId)
}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_SimpleAccount *SimpleAccountCallerSession) SupportsInterface(interfaceId [4]byte) (bool, error) {
	return _SimpleAccount.Contract.SupportsInterface(&_SimpleAccount.CallOpts, interfaceId)
}

// DepositGas is a paid mutator transaction binding the contract method 0x43628421.
//
// Solidity: function depositGas(uint256 nonce) payable returns()
func (_SimpleAccount *SimpleAccountTransactor) DepositGas(opts *bind.TransactOpts, nonce *big.Int) (*types.Transaction, error) {
	return _SimpleAccount.contract.Transact(opts, "depositGas", nonce)
}

// DepositGas is a paid mutator transaction binding the contract method 0x43628421.
//
// Solidity: function depositGas(uint256 nonce) payable returns()
func (_SimpleAccount *SimpleAccountSession) DepositGas(nonce *big.Int) (*types.Transaction, error) {
	return _SimpleAccount.Contract.DepositGas(&_SimpleAccount.TransactOpts, nonce)
}

// DepositGas is a paid mutator transaction binding the contract method 0x43628421.
//
// Solidity: function depositGas(uint256 nonce) payable returns()
func (_SimpleAccount *SimpleAccountTransactorSession) DepositGas(nonce *big.Int) (*types.Transaction, error) {
	return _SimpleAccount.Contract.DepositGas(&_SimpleAccount.TransactOpts, nonce)
}

// DepositRemote is a paid mutator transaction binding the contract method 0x8799aeea.
//
// Solidity: function depositRemote(uint256 nonce, uint256 valueDepositAmount, uint256 gasDepositAmount, uint256 crossFee, uint24 gasLimit, uint64 gasPrice, uint64 minArrivalTime, uint64 maxArrivalTime, address selectedRelayer) payable returns()
func (_SimpleAccount *SimpleAccountTransactor) DepositRemote(opts *bind.TransactOpts, nonce *big.Int, valueDepositAmount *big.Int, gasDepositAmount *big.Int, crossFee *big.Int, gasLimit *big.Int, gasPrice uint64, minArrivalTime uint64, maxArrivalTime uint64, selectedRelayer common.Address) (*types.Transaction, error) {
	return _SimpleAccount.contract.Transact(opts, "depositRemote", nonce, valueDepositAmount, gasDepositAmount, crossFee, gasLimit, gasPrice, minArrivalTime, maxArrivalTime, selectedRelayer)
}

// DepositRemote is a paid mutator transaction binding the contract method 0x8799aeea.
//
// Solidity: function depositRemote(uint256 nonce, uint256 valueDepositAmount, uint256 gasDepositAmount, uint256 crossFee, uint24 gasLimit, uint64 gasPrice, uint64 minArrivalTime, uint64 maxArrivalTime, address selectedRelayer) payable returns()
func (_SimpleAccount *SimpleAccountSession) DepositRemote(nonce *big.Int, valueDepositAmount *big.Int, gasDepositAmount *big.Int, crossFee *big.Int, gasLimit *big.Int, gasPrice uint64, minArrivalTime uint64, maxArrivalTime uint64, selectedRelayer common.Address) (*types.Transaction, error) {
	return _SimpleAccount.Contract.DepositRemote(&_SimpleAccount.TransactOpts, nonce, valueDepositAmount, gasDepositAmount, crossFee, gasLimit, gasPrice, minArrivalTime, maxArrivalTime, selectedRelayer)
}

// DepositRemote is a paid mutator transaction binding the contract method 0x8799aeea.
//
// Solidity: function depositRemote(uint256 nonce, uint256 valueDepositAmount, uint256 gasDepositAmount, uint256 crossFee, uint24 gasLimit, uint64 gasPrice, uint64 minArrivalTime, uint64 maxArrivalTime, address selectedRelayer) payable returns()
func (_SimpleAccount *SimpleAccountTransactorSession) DepositRemote(nonce *big.Int, valueDepositAmount *big.Int, gasDepositAmount *big.Int, crossFee *big.Int, gasLimit *big.Int, gasPrice uint64, minArrivalTime uint64, maxArrivalTime uint64, selectedRelayer common.Address) (*types.Transaction, error) {
	return _SimpleAccount.Contract.DepositRemote(&_SimpleAccount.TransactOpts, nonce, valueDepositAmount, gasDepositAmount, crossFee, gasLimit, gasPrice, minArrivalTime, maxArrivalTime, selectedRelayer)
}

// Execute is a paid mutator transaction binding the contract method 0xb61d27f6.
//
// Solidity: function execute(address dest, uint256 value, bytes func) returns()
func (_SimpleAccount *SimpleAccountTransactor) Execute(opts *bind.TransactOpts, dest common.Address, value *big.Int, arg2 []byte) (*types.Transaction, error) {
	return _SimpleAccount.contract.Transact(opts, "execute", dest, value, arg2)
}

// Execute is a paid mutator transaction binding the contract method 0xb61d27f6.
//
// Solidity: function execute(address dest, uint256 value, bytes func) returns()
func (_SimpleAccount *SimpleAccountSession) Execute(dest common.Address, value *big.Int, arg2 []byte) (*types.Transaction, error) {
	return _SimpleAccount.Contract.Execute(&_SimpleAccount.TransactOpts, dest, value, arg2)
}

// Execute is a paid mutator transaction binding the contract method 0xb61d27f6.
//
// Solidity: function execute(address dest, uint256 value, bytes func) returns()
func (_SimpleAccount *SimpleAccountTransactorSession) Execute(dest common.Address, value *big.Int, arg2 []byte) (*types.Transaction, error) {
	return _SimpleAccount.Contract.Execute(&_SimpleAccount.TransactOpts, dest, value, arg2)
}

// ExecuteBatch is a paid mutator transaction binding the contract method 0x47e1da2a.
//
// Solidity: function executeBatch(address[] dest, uint256[] value, bytes[] func) returns()
func (_SimpleAccount *SimpleAccountTransactor) ExecuteBatch(opts *bind.TransactOpts, dest []common.Address, value []*big.Int, arg2 [][]byte) (*types.Transaction, error) {
	return _SimpleAccount.contract.Transact(opts, "executeBatch", dest, value, arg2)
}

// ExecuteBatch is a paid mutator transaction binding the contract method 0x47e1da2a.
//
// Solidity: function executeBatch(address[] dest, uint256[] value, bytes[] func) returns()
func (_SimpleAccount *SimpleAccountSession) ExecuteBatch(dest []common.Address, value []*big.Int, arg2 [][]byte) (*types.Transaction, error) {
	return _SimpleAccount.Contract.ExecuteBatch(&_SimpleAccount.TransactOpts, dest, value, arg2)
}

// ExecuteBatch is a paid mutator transaction binding the contract method 0x47e1da2a.
//
// Solidity: function executeBatch(address[] dest, uint256[] value, bytes[] func) returns()
func (_SimpleAccount *SimpleAccountTransactorSession) ExecuteBatch(dest []common.Address, value []*big.Int, arg2 [][]byte) (*types.Transaction, error) {
	return _SimpleAccount.Contract.ExecuteBatch(&_SimpleAccount.TransactOpts, dest, value, arg2)
}

// Initialize is a paid mutator transaction binding the contract method 0xc4d66de8.
//
// Solidity: function initialize(address anOwner) returns()
func (_SimpleAccount *SimpleAccountTransactor) Initialize(opts *bind.TransactOpts, anOwner common.Address) (*types.Transaction, error) {
	return _SimpleAccount.contract.Transact(opts, "initialize", anOwner)
}

// Initialize is a paid mutator transaction binding the contract method 0xc4d66de8.
//
// Solidity: function initialize(address anOwner) returns()
func (_SimpleAccount *SimpleAccountSession) Initialize(anOwner common.Address) (*types.Transaction, error) {
	return _SimpleAccount.Contract.Initialize(&_SimpleAccount.TransactOpts, anOwner)
}

// Initialize is a paid mutator transaction binding the contract method 0xc4d66de8.
//
// Solidity: function initialize(address anOwner) returns()
func (_SimpleAccount *SimpleAccountTransactorSession) Initialize(anOwner common.Address) (*types.Transaction, error) {
	return _SimpleAccount.Contract.Initialize(&_SimpleAccount.TransactOpts, anOwner)
}

// UpgradeToAndCall is a paid mutator transaction binding the contract method 0x4f1ef286.
//
// Solidity: function upgradeToAndCall(address newImplementation, bytes data) payable returns()
func (_SimpleAccount *SimpleAccountTransactor) UpgradeToAndCall(opts *bind.TransactOpts, newImplementation common.Address, data []byte) (*types.Transaction, error) {
	return _SimpleAccount.contract.Transact(opts, "upgradeToAndCall", newImplementation, data)
}

// UpgradeToAndCall is a paid mutator transaction binding the contract method 0x4f1ef286.
//
// Solidity: function upgradeToAndCall(address newImplementation, bytes data) payable returns()
func (_SimpleAccount *SimpleAccountSession) UpgradeToAndCall(newImplementation common.Address, data []byte) (*types.Transaction, error) {
	return _SimpleAccount.Contract.UpgradeToAndCall(&_SimpleAccount.TransactOpts, newImplementation, data)
}

// UpgradeToAndCall is a paid mutator transaction binding the contract method 0x4f1ef286.
//
// Solidity: function upgradeToAndCall(address newImplementation, bytes data) payable returns()
func (_SimpleAccount *SimpleAccountTransactorSession) UpgradeToAndCall(newImplementation common.Address, data []byte) (*types.Transaction, error) {
	return _SimpleAccount.Contract.UpgradeToAndCall(&_SimpleAccount.TransactOpts, newImplementation, data)
}

// ValidateUserOp is a paid mutator transaction binding the contract method 0x5c51ffd1.
//
// Solidity: function validateUserOp(address _owner) returns(bool)
func (_SimpleAccount *SimpleAccountTransactor) ValidateUserOp(opts *bind.TransactOpts, _owner common.Address) (*types.Transaction, error) {
	return _SimpleAccount.contract.Transact(opts, "validateUserOp", _owner)
}

// ValidateUserOp is a paid mutator transaction binding the contract method 0x5c51ffd1.
//
// Solidity: function validateUserOp(address _owner) returns(bool)
func (_SimpleAccount *SimpleAccountSession) ValidateUserOp(_owner common.Address) (*types.Transaction, error) {
	return _SimpleAccount.Contract.ValidateUserOp(&_SimpleAccount.TransactOpts, _owner)
}

// ValidateUserOp is a paid mutator transaction binding the contract method 0x5c51ffd1.
//
// Solidity: function validateUserOp(address _owner) returns(bool)
func (_SimpleAccount *SimpleAccountTransactorSession) ValidateUserOp(_owner common.Address) (*types.Transaction, error) {
	return _SimpleAccount.Contract.ValidateUserOp(&_SimpleAccount.TransactOpts, _owner)
}

// Withdraw is a paid mutator transaction binding the contract method 0x2e1a7d4d.
//
// Solidity: function withdraw(uint256 amount) returns()
func (_SimpleAccount *SimpleAccountTransactor) Withdraw(opts *bind.TransactOpts, amount *big.Int) (*types.Transaction, error) {
	return _SimpleAccount.contract.Transact(opts, "withdraw", amount)
}

// Withdraw is a paid mutator transaction binding the contract method 0x2e1a7d4d.
//
// Solidity: function withdraw(uint256 amount) returns()
func (_SimpleAccount *SimpleAccountSession) Withdraw(amount *big.Int) (*types.Transaction, error) {
	return _SimpleAccount.Contract.Withdraw(&_SimpleAccount.TransactOpts, amount)
}

// Withdraw is a paid mutator transaction binding the contract method 0x2e1a7d4d.
//
// Solidity: function withdraw(uint256 amount) returns()
func (_SimpleAccount *SimpleAccountTransactorSession) Withdraw(amount *big.Int) (*types.Transaction, error) {
	return _SimpleAccount.Contract.Withdraw(&_SimpleAccount.TransactOpts, amount)
}

// WithdrawGas is a paid mutator transaction binding the contract method 0x91657544.
//
// Solidity: function withdrawGas(uint256 amount) returns()
func (_SimpleAccount *SimpleAccountTransactor) WithdrawGas(opts *bind.TransactOpts, amount *big.Int) (*types.Transaction, error) {
	return _SimpleAccount.contract.Transact(opts, "withdrawGas", amount)
}

// WithdrawGas is a paid mutator transaction binding the contract method 0x91657544.
//
// Solidity: function withdrawGas(uint256 amount) returns()
func (_SimpleAccount *SimpleAccountSession) WithdrawGas(amount *big.Int) (*types.Transaction, error) {
	return _SimpleAccount.Contract.WithdrawGas(&_SimpleAccount.TransactOpts, amount)
}

// WithdrawGas is a paid mutator transaction binding the contract method 0x91657544.
//
// Solidity: function withdrawGas(uint256 amount) returns()
func (_SimpleAccount *SimpleAccountTransactorSession) WithdrawGas(amount *big.Int) (*types.Transaction, error) {
	return _SimpleAccount.Contract.WithdrawGas(&_SimpleAccount.TransactOpts, amount)
}

// WithdrawRemote is a paid mutator transaction binding the contract method 0x59950906.
//
// Solidity: function withdrawRemote(uint64 destChainId, uint256 amount, address receiver, uint256 crossFee, uint24 gasLimit, uint64 gasPrice, uint64 minArrivalTime, uint64 maxArrivalTime, address selectedRelayer) returns()
func (_SimpleAccount *SimpleAccountTransactor) WithdrawRemote(opts *bind.TransactOpts, destChainId uint64, amount *big.Int, receiver common.Address, crossFee *big.Int, gasLimit *big.Int, gasPrice uint64, minArrivalTime uint64, maxArrivalTime uint64, selectedRelayer common.Address) (*types.Transaction, error) {
	return _SimpleAccount.contract.Transact(opts, "withdrawRemote", destChainId, amount, receiver, crossFee, gasLimit, gasPrice, minArrivalTime, maxArrivalTime, selectedRelayer)
}

// WithdrawRemote is a paid mutator transaction binding the contract method 0x59950906.
//
// Solidity: function withdrawRemote(uint64 destChainId, uint256 amount, address receiver, uint256 crossFee, uint24 gasLimit, uint64 gasPrice, uint64 minArrivalTime, uint64 maxArrivalTime, address selectedRelayer) returns()
func (_SimpleAccount *SimpleAccountSession) WithdrawRemote(destChainId uint64, amount *big.Int, receiver common.Address, crossFee *big.Int, gasLimit *big.Int, gasPrice uint64, minArrivalTime uint64, maxArrivalTime uint64, selectedRelayer common.Address) (*types.Transaction, error) {
	return _SimpleAccount.Contract.WithdrawRemote(&_SimpleAccount.TransactOpts, destChainId, amount, receiver, crossFee, gasLimit, gasPrice, minArrivalTime, maxArrivalTime, selectedRelayer)
}

// WithdrawRemote is a paid mutator transaction binding the contract method 0x59950906.
//
// Solidity: function withdrawRemote(uint64 destChainId, uint256 amount, address receiver, uint256 crossFee, uint24 gasLimit, uint64 gasPrice, uint64 minArrivalTime, uint64 maxArrivalTime, address selectedRelayer) returns()
func (_SimpleAccount *SimpleAccountTransactorSession) WithdrawRemote(destChainId uint64, amount *big.Int, receiver common.Address, crossFee *big.Int, gasLimit *big.Int, gasPrice uint64, minArrivalTime uint64, maxArrivalTime uint64, selectedRelayer common.Address) (*types.Transaction, error) {
	return _SimpleAccount.Contract.WithdrawRemote(&_SimpleAccount.TransactOpts, destChainId, amount, receiver, crossFee, gasLimit, gasPrice, minArrivalTime, maxArrivalTime, selectedRelayer)
}

// Receive is a paid mutator transaction binding the contract receive function.
//
// Solidity: receive() payable returns()
func (_SimpleAccount *SimpleAccountTransactor) Receive(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _SimpleAccount.contract.RawTransact(opts, nil) // calldata is disallowed for receive function
}

// Receive is a paid mutator transaction binding the contract receive function.
//
// Solidity: receive() payable returns()
func (_SimpleAccount *SimpleAccountSession) Receive() (*types.Transaction, error) {
	return _SimpleAccount.Contract.Receive(&_SimpleAccount.TransactOpts)
}

// Receive is a paid mutator transaction binding the contract receive function.
//
// Solidity: receive() payable returns()
func (_SimpleAccount *SimpleAccountTransactorSession) Receive() (*types.Transaction, error) {
	return _SimpleAccount.Contract.Receive(&_SimpleAccount.TransactOpts)
}

// SimpleAccountInitializedIterator is returned from FilterInitialized and is used to iterate over the raw logs and unpacked data for Initialized events raised by the SimpleAccount contract.
type SimpleAccountInitializedIterator struct {
	Event *SimpleAccountInitialized // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *SimpleAccountInitializedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(SimpleAccountInitialized)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(SimpleAccountInitialized)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *SimpleAccountInitializedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *SimpleAccountInitializedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// SimpleAccountInitialized represents a Initialized event raised by the SimpleAccount contract.
type SimpleAccountInitialized struct {
	Version uint64
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterInitialized is a free log retrieval operation binding the contract event 0xc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d2.
//
// Solidity: event Initialized(uint64 version)
func (_SimpleAccount *SimpleAccountFilterer) FilterInitialized(opts *bind.FilterOpts) (*SimpleAccountInitializedIterator, error) {

	logs, sub, err := _SimpleAccount.contract.FilterLogs(opts, "Initialized")
	if err != nil {
		return nil, err
	}
	return &SimpleAccountInitializedIterator{contract: _SimpleAccount.contract, event: "Initialized", logs: logs, sub: sub}, nil
}

// WatchInitialized is a free log subscription operation binding the contract event 0xc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d2.
//
// Solidity: event Initialized(uint64 version)
func (_SimpleAccount *SimpleAccountFilterer) WatchInitialized(opts *bind.WatchOpts, sink chan<- *SimpleAccountInitialized) (event.Subscription, error) {

	logs, sub, err := _SimpleAccount.contract.WatchLogs(opts, "Initialized")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(SimpleAccountInitialized)
				if err := _SimpleAccount.contract.UnpackLog(event, "Initialized", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseInitialized is a log parse operation binding the contract event 0xc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d2.
//
// Solidity: event Initialized(uint64 version)
func (_SimpleAccount *SimpleAccountFilterer) ParseInitialized(log types.Log) (*SimpleAccountInitialized, error) {
	event := new(SimpleAccountInitialized)
	if err := _SimpleAccount.contract.UnpackLog(event, "Initialized", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// SimpleAccountUpgradedIterator is returned from FilterUpgraded and is used to iterate over the raw logs and unpacked data for Upgraded events raised by the SimpleAccount contract.
type SimpleAccountUpgradedIterator struct {
	Event *SimpleAccountUpgraded // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *SimpleAccountUpgradedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(SimpleAccountUpgraded)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(SimpleAccountUpgraded)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *SimpleAccountUpgradedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *SimpleAccountUpgradedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// SimpleAccountUpgraded represents a Upgraded event raised by the SimpleAccount contract.
type SimpleAccountUpgraded struct {
	Implementation common.Address
	Raw            types.Log // Blockchain specific contextual infos
}

// FilterUpgraded is a free log retrieval operation binding the contract event 0xbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b.
//
// Solidity: event Upgraded(address indexed implementation)
func (_SimpleAccount *SimpleAccountFilterer) FilterUpgraded(opts *bind.FilterOpts, implementation []common.Address) (*SimpleAccountUpgradedIterator, error) {

	var implementationRule []interface{}
	for _, implementationItem := range implementation {
		implementationRule = append(implementationRule, implementationItem)
	}

	logs, sub, err := _SimpleAccount.contract.FilterLogs(opts, "Upgraded", implementationRule)
	if err != nil {
		return nil, err
	}
	return &SimpleAccountUpgradedIterator{contract: _SimpleAccount.contract, event: "Upgraded", logs: logs, sub: sub}, nil
}

// WatchUpgraded is a free log subscription operation binding the contract event 0xbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b.
//
// Solidity: event Upgraded(address indexed implementation)
func (_SimpleAccount *SimpleAccountFilterer) WatchUpgraded(opts *bind.WatchOpts, sink chan<- *SimpleAccountUpgraded, implementation []common.Address) (event.Subscription, error) {

	var implementationRule []interface{}
	for _, implementationItem := range implementation {
		implementationRule = append(implementationRule, implementationItem)
	}

	logs, sub, err := _SimpleAccount.contract.WatchLogs(opts, "Upgraded", implementationRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(SimpleAccountUpgraded)
				if err := _SimpleAccount.contract.UnpackLog(event, "Upgraded", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUpgraded is a log parse operation binding the contract event 0xbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b.
//
// Solidity: event Upgraded(address indexed implementation)
func (_SimpleAccount *SimpleAccountFilterer) ParseUpgraded(log types.Log) (*SimpleAccountUpgraded, error) {
	event := new(SimpleAccountUpgraded)
	if err := _SimpleAccount.contract.UnpackLog(event, "Upgraded", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// SimpleAccountZKVizingAccountInitializedIterator is returned from FilterZKVizingAccountInitialized and is used to iterate over the raw logs and unpacked data for ZKVizingAccountInitialized events raised by the SimpleAccount contract.
type SimpleAccountZKVizingAccountInitializedIterator struct {
	Event *SimpleAccountZKVizingAccountInitialized // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *SimpleAccountZKVizingAccountInitializedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(SimpleAccountZKVizingAccountInitialized)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(SimpleAccountZKVizingAccountInitialized)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *SimpleAccountZKVizingAccountInitializedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *SimpleAccountZKVizingAccountInitializedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// SimpleAccountZKVizingAccountInitialized represents a ZKVizingAccountInitialized event raised by the SimpleAccount contract.
type SimpleAccountZKVizingAccountInitialized struct {
	EntryPoint common.Address
	Owner      common.Address
	Raw        types.Log // Blockchain specific contextual infos
}

// FilterZKVizingAccountInitialized is a free log retrieval operation binding the contract event 0xf75ce79a4abcc8ed48f3b3544cd773dd667599027b50a42ff4bbf68f1a65e7b0.
//
// Solidity: event ZKVizingAccountInitialized(address indexed entryPoint, address indexed owner)
func (_SimpleAccount *SimpleAccountFilterer) FilterZKVizingAccountInitialized(opts *bind.FilterOpts, entryPoint []common.Address, owner []common.Address) (*SimpleAccountZKVizingAccountInitializedIterator, error) {

	var entryPointRule []interface{}
	for _, entryPointItem := range entryPoint {
		entryPointRule = append(entryPointRule, entryPointItem)
	}
	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}

	logs, sub, err := _SimpleAccount.contract.FilterLogs(opts, "ZKVizingAccountInitialized", entryPointRule, ownerRule)
	if err != nil {
		return nil, err
	}
	return &SimpleAccountZKVizingAccountInitializedIterator{contract: _SimpleAccount.contract, event: "ZKVizingAccountInitialized", logs: logs, sub: sub}, nil
}

// WatchZKVizingAccountInitialized is a free log subscription operation binding the contract event 0xf75ce79a4abcc8ed48f3b3544cd773dd667599027b50a42ff4bbf68f1a65e7b0.
//
// Solidity: event ZKVizingAccountInitialized(address indexed entryPoint, address indexed owner)
func (_SimpleAccount *SimpleAccountFilterer) WatchZKVizingAccountInitialized(opts *bind.WatchOpts, sink chan<- *SimpleAccountZKVizingAccountInitialized, entryPoint []common.Address, owner []common.Address) (event.Subscription, error) {

	var entryPointRule []interface{}
	for _, entryPointItem := range entryPoint {
		entryPointRule = append(entryPointRule, entryPointItem)
	}
	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}

	logs, sub, err := _SimpleAccount.contract.WatchLogs(opts, "ZKVizingAccountInitialized", entryPointRule, ownerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(SimpleAccountZKVizingAccountInitialized)
				if err := _SimpleAccount.contract.UnpackLog(event, "ZKVizingAccountInitialized", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseZKVizingAccountInitialized is a log parse operation binding the contract event 0xf75ce79a4abcc8ed48f3b3544cd773dd667599027b50a42ff4bbf68f1a65e7b0.
//
// Solidity: event ZKVizingAccountInitialized(address indexed entryPoint, address indexed owner)
func (_SimpleAccount *SimpleAccountFilterer) ParseZKVizingAccountInitialized(log types.Log) (*SimpleAccountZKVizingAccountInitialized, error) {
	event := new(SimpleAccountZKVizingAccountInitialized)
	if err := _SimpleAccount.contract.UnpackLog(event, "ZKVizingAccountInitialized", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
